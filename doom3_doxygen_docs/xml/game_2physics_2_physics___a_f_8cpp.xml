<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="game_2physics_2_physics___a_f_8cpp" kind="file">
    <compoundname>Physics_AF.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="game_2_game__local_8h" local="yes">../Game_local.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="game_2physics_2_physics___a_f_8cpp_1aaa0c95031cc57199201dc0f21d87e528" prot="public" static="no">
        <name>AF_TIMINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="57" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a797c315b83cad9b556771c1cc6ba506e" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float ERROR_REDUCTION</definition>
        <argsstring></argsstring>
        <name>ERROR_REDUCTION</name>
        <initializer>= 0.5f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a9e838112a116c624d6ea8e32cc77943e" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float ERROR_REDUCTION_MAX</definition>
        <argsstring></argsstring>
        <name>ERROR_REDUCTION_MAX</name>
        <initializer>= 256.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="38" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a2e855ebe723dc1e03a04f98db9a71f9e" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float LIMIT_ERROR_REDUCTION</definition>
        <argsstring></argsstring>
        <name>LIMIT_ERROR_REDUCTION</name>
        <initializer>= 0.3f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a4d8d23d83e47c1b7801697d22cf349fe" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float LCP_EPSILON</definition>
        <argsstring></argsstring>
        <name>LCP_EPSILON</name>
        <initializer>= 1e-7f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a77e2cf7c6479cfa546dbfc3b9d3a7f2b" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float LIMIT_LCP_EPSILON</definition>
        <argsstring></argsstring>
        <name>LIMIT_LCP_EPSILON</name>
        <initializer>= 1e-4f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ae640e088d450b32b29f261f19da99790" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float CONTACT_LCP_EPSILON</definition>
        <argsstring></argsstring>
        <name>CONTACT_LCP_EPSILON</name>
        <initializer>= 1e-6f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a80ab326bfbbf28651e02ce46737f55b0" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float CENTER_OF_MASS_EPSILON</definition>
        <argsstring></argsstring>
        <name>CENTER_OF_MASS_EPSILON</name>
        <initializer>= 1e-4f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a207bd77c61397d42d76a15d291a20989" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float NO_MOVE_TIME</definition>
        <argsstring></argsstring>
        <name>NO_MOVE_TIME</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ac7c9a28f139baa43b3ffe74d091928dc" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float NO_MOVE_TRANSLATION_TOLERANCE</definition>
        <argsstring></argsstring>
        <name>NO_MOVE_TRANSLATION_TOLERANCE</name>
        <initializer>= 10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1afc65651ad47756ecac1fce71a5185bee" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float NO_MOVE_ROTATION_TOLERANCE</definition>
        <argsstring></argsstring>
        <name>NO_MOVE_ROTATION_TOLERANCE</name>
        <initializer>= 10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a5cf9c548fcaf0db18d3473ec743e9e25" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float MIN_MOVE_TIME</definition>
        <argsstring></argsstring>
        <name>MIN_MOVE_TIME</name>
        <initializer>= -1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a2a42fbe17765555667978b89d293aa7a" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float MAX_MOVE_TIME</definition>
        <argsstring></argsstring>
        <name>MAX_MOVE_TIME</name>
        <initializer>= -1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a0fb045fe4075d306f1699a3ce1dc7b45" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float IMPULSE_THRESHOLD</definition>
        <argsstring></argsstring>
        <name>IMPULSE_THRESHOLD</name>
        <initializer>= 500.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a1810a53091ddd7ef7858d4e337dd1e16" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float SUSPEND_LINEAR_VELOCITY</definition>
        <argsstring></argsstring>
        <name>SUSPEND_LINEAR_VELOCITY</name>
        <initializer>= 10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a005da6cd56b2b8d202a9ee94ee589e3f" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float SUSPEND_ANGULAR_VELOCITY</definition>
        <argsstring></argsstring>
        <name>SUSPEND_ANGULAR_VELOCITY</name>
        <initializer>= 15.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1aac350f5c6a9b0f976943bb1b9b06c7d3" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float SUSPEND_LINEAR_ACCELERATION</definition>
        <argsstring></argsstring>
        <name>SUSPEND_LINEAR_ACCELERATION</name>
        <initializer>= 20.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1af429af9f089595e06435290eb3baf16f" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float SUSPEND_ANGULAR_ACCELERATION</definition>
        <argsstring></argsstring>
        <name>SUSPEND_ANGULAR_ACCELERATION</name>
        <initializer>= 30.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ac4d2186ba021c781e375a4ce6f95cb76" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_vec6" kindref="compound">idVec6</ref></type>
        <definition>const idVec6 vec6_lcp_epsilon</definition>
        <argsstring></argsstring>
        <name>vec6_lcp_epsilon</name>
        <initializer>= <ref refid="classid_vec6" kindref="compound">idVec6</ref>( LCP_EPSILON, LCP_EPSILON, LCP_EPSILON,
													 LCP_EPSILON, LCP_EPSILON, LCP_EPSILON )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1af763af147d1c4260eca2f34e206b128e" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int lastTimerReset</definition>
        <argsstring></argsstring>
        <name>lastTimerReset</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="60" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a3b50fd2567d2c70cf93ea3158ddc3e49" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int numArticulatedFigures</definition>
        <argsstring></argsstring>
        <name>numArticulatedFigures</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a27f93b0417803b4722d4e26f585f39a5" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_timer" kindref="compound">idTimer</ref></type>
        <definition>idTimer timer_total</definition>
        <argsstring></argsstring>
        <name>timer_total</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ada41042475139fc231bf18eeeb7b4aa8" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_timer" kindref="compound">idTimer</ref></type>
        <definition>idTimer timer_pc</definition>
        <argsstring></argsstring>
        <name>timer_pc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1adcf6c7ff3b28b8bcc4796e68148ddf67" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_timer" kindref="compound">idTimer</ref></type>
        <definition>idTimer timer_ac</definition>
        <argsstring></argsstring>
        <name>timer_ac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1aecbe21afd1eece5406f1545291e8c6cd" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_timer" kindref="compound">idTimer</ref></type>
        <definition>idTimer timer_collision</definition>
        <argsstring></argsstring>
        <name>timer_collision</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a2de94af6b9bbdf0092feaaeaca03552b" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_timer" kindref="compound">idTimer</ref></type>
        <definition>idTimer timer_lcp</definition>
        <argsstring></argsstring>
        <name>timer_lcp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1adf02857ef21a68c8e7499b2e9a124432" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float AF_VELOCITY_MAX</definition>
        <argsstring></argsstring>
        <name>AF_VELOCITY_MAX</name>
        <initializer>= 16000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7902" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a13c2ee5660263434fda9b136d036a3bf" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_VELOCITY_TOTAL_BITS</definition>
        <argsstring></argsstring>
        <name>AF_VELOCITY_TOTAL_BITS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7903" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a885179ecca41a4c245ca275425c86f7d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_VELOCITY_EXPONENT_BITS</definition>
        <argsstring></argsstring>
        <name>AF_VELOCITY_EXPONENT_BITS</name>
        <initializer>= idMath::BitsForInteger( idMath::BitsForFloat( AF_VELOCITY_MAX ) ) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7904" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ab7a9b54ac13269dbcc15bb8fd213da77" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_VELOCITY_MANTISSA_BITS</definition>
        <argsstring></argsstring>
        <name>AF_VELOCITY_MANTISSA_BITS</name>
        <initializer>= AF_VELOCITY_TOTAL_BITS - 1 - AF_VELOCITY_EXPONENT_BITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7905" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a1f99c964aa8ab92da42355dbdfd7f0f6" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float AF_FORCE_MAX</definition>
        <argsstring></argsstring>
        <name>AF_FORCE_MAX</name>
        <initializer>= 1e20f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7906" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1a977d43a57b3f57b611a46f75e90f4f91" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_FORCE_TOTAL_BITS</definition>
        <argsstring></argsstring>
        <name>AF_FORCE_TOTAL_BITS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7907" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1ab5195f394a646aa227acb9f64d96948b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_FORCE_EXPONENT_BITS</definition>
        <argsstring></argsstring>
        <name>AF_FORCE_EXPONENT_BITS</name>
        <initializer>= idMath::BitsForInteger( idMath::BitsForFloat( AF_FORCE_MAX ) ) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7908" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2physics_2_physics___a_f_8cpp_1afc68cae23996918a73232cabc241945f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int AF_FORCE_MANTISSA_BITS</definition>
        <argsstring></argsstring>
        <name>AF_FORCE_MANTISSA_BITS</name>
        <initializer>= AF_FORCE_TOTAL_BITS - 1 - AF_FORCE_EXPONENT_BITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="7909" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="7909" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="game_2physics_2_physics___a_f_8cpp_1a6dad7284d9465f1a675e0e5a8497d1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawTraceModelSilhouette</definition>
        <argsstring>(const idVec3 &amp;projectionOrigin, const idClipModel *clipModel)</argsstring>
        <name>DrawTraceModelSilhouette</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>projectionOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_clip_model" kindref="compound">idClipModel</ref> *</type>
          <declname>clipModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="6432" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="6432" bodyend="6446"/>
      </memberdef>
      <memberdef kind="function" id="game_2physics_2_physics___a_f_8cpp_1a49ea58e5fdc942ea1b944b4b1b218c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idPhysics_AF_SavePState</definition>
        <argsstring>(idSaveGame *saveFile, const AFPState_t &amp;state)</argsstring>
        <name>idPhysics_AF_SavePState</name>
        <param>
          <type><ref refid="classid_save_game" kindref="compound">idSaveGame</ref> *</type>
          <declname>saveFile</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_f_p_state__s" kindref="compound">AFPState_t</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="6686" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="6686" bodyend="6692"/>
      </memberdef>
      <memberdef kind="function" id="game_2physics_2_physics___a_f_8cpp_1a56ba3be2529f536c5b24b15ea7ef2716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idPhysics_AF_RestorePState</definition>
        <argsstring>(idRestoreGame *saveFile, AFPState_t &amp;state)</argsstring>
        <name>idPhysics_AF_RestorePState</name>
        <param>
          <type><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref> *</type>
          <declname>saveFile</declname>
        </param>
        <param>
          <type><ref refid="struct_a_f_p_state__s" kindref="compound">AFPState_t</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" line="6699" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp" bodystart="6699" bodyend="6705"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">CLASS_DECLARATION(<sp/><ref refid="classid_physics___base" kindref="compound">idPhysics_Base</ref>,<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ERROR_REDUCTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ERROR_REDUCTION_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>256.0f;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LIMIT_ERROR_REDUCTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.3f;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LCP_EPSILON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e-7f;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LIMIT_LCP_EPSILON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e-4f;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CONTACT_LCP_EPSILON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e-6f;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CENTER_OF_MASS_EPSILON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e-4f;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NO_MOVE_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NO_MOVE_TRANSLATION_TOLERANCE<sp/><sp/><sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NO_MOVE_ROTATION_TOLERANCE<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MIN_MOVE_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MAX_MOVE_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>IMPULSE_THRESHOLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>500.0f;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SUSPEND_LINEAR_VELOCITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SUSPEND_ANGULAR_VELOCITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>15.0f;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SUSPEND_LINEAR_ACCELERATION<sp/><sp/><sp/><sp/><sp/>=<sp/>20.0f;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SUSPEND_ANGULAR_ACCELERATION<sp/><sp/><sp/><sp/>=<sp/>30.0f;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">const<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>vec6_lcp_epsilon<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>LCP_EPSILON,<sp/>LCP_EPSILON,<sp/>LCP_EPSILON,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LCP_EPSILON,<sp/>LCP_EPSILON,<sp/>LCP_EPSILON<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastTimerReset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArticulatedFigures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_timer" kindref="compound">idTimer</ref><sp/>timer_total,<sp/>timer_pc,<sp/>timer_ac,<sp/>timer_collision,<sp/>timer_lcp;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="74"><highlight class="comment">================</highlight></codeline>
<codeline lineno="75"><highlight class="comment">idAFConstraint::idAFConstraint</highlight></codeline>
<codeline lineno="76"><highlight class="comment">================</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">idAFConstraint::idAFConstraint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CONSTRAINT_INVALID;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noname&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>lo.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>lo.SubVec6(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-vec6_infinity;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>hi.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hi.SubVec6(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec6_infinity;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>e.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>e.SubVec6(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec6_lcp_epsilon;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>boxConstraint<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[3]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[4]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[5]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>firstIndex<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;fl,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="106"><highlight class="comment">================</highlight></codeline>
<codeline lineno="107"><highlight class="comment">idAFConstraint::~idAFConstraint</highlight></codeline>
<codeline lineno="108"><highlight class="comment">================</highlight></codeline>
<codeline lineno="109"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">idAFConstraint::~idAFConstraint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment">================</highlight></codeline>
<codeline lineno="115"><highlight class="comment">idAFConstraint::SetBody1</highlight></codeline>
<codeline lineno="116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::SetBody1(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body1<sp/>!=<sp/>body)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;SetChanged();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="128"><highlight class="comment">================</highlight></codeline>
<codeline lineno="129"><highlight class="comment">idAFConstraint::SetBody2</highlight></codeline>
<codeline lineno="130"><highlight class="comment">================</highlight></codeline>
<codeline lineno="131"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::SetBody2(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>!=<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;SetChanged();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="142"><highlight class="comment">================</highlight></codeline>
<codeline lineno="143"><highlight class="comment">idAFConstraint::GetMultiplier</highlight></codeline>
<codeline lineno="144"><highlight class="comment">================</highlight></codeline>
<codeline lineno="145"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;idAFConstraint::GetMultiplier(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lm;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment">================</highlight></codeline>
<codeline lineno="152"><highlight class="comment">idAFConstraint::Evaluate</highlight></codeline>
<codeline lineno="153"><highlight class="comment">================</highlight></codeline>
<codeline lineno="154"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="160"><highlight class="comment">================</highlight></codeline>
<codeline lineno="161"><highlight class="comment">idAFConstraint::ApplyFriction</highlight></codeline>
<codeline lineno="162"><highlight class="comment">================</highlight></codeline>
<codeline lineno="163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment">================</highlight></codeline>
<codeline lineno="169"><highlight class="comment">idAFConstraint::GetForce</highlight></codeline>
<codeline lineno="170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::GetForce(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetData(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>==<sp/>body1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.TransposeMultiply(<sp/>v,<sp/>lm<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>==<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.TransposeMultiply(<sp/>v,<sp/>lm<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.Zero();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>force[0]<sp/>=<sp/>v[0];<sp/>force[1]<sp/>=<sp/>v[1];<sp/>force[2]<sp/>=<sp/>v[2];<sp/>force[3]<sp/>=<sp/>v[3];<sp/>force[4]<sp/>=<sp/>v[4];<sp/>force[5]<sp/>=<sp/>v[5];</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment">================</highlight></codeline>
<codeline lineno="190"><highlight class="comment">idAFConstraint::Translate</highlight></codeline>
<codeline lineno="191"><highlight class="comment">================</highlight></codeline>
<codeline lineno="192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment">================</highlight></codeline>
<codeline lineno="199"><highlight class="comment">idAFConstraint::Rotate</highlight></codeline>
<codeline lineno="200"><highlight class="comment">================</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="207"><highlight class="comment">================</highlight></codeline>
<codeline lineno="208"><highlight class="comment">idAFConstraint::GetCenter</highlight></codeline>
<codeline lineno="209"><highlight class="comment">================</highlight></codeline>
<codeline lineno="210"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>center.Zero();</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment">================</highlight></codeline>
<codeline lineno="217"><highlight class="comment">idAFConstraint::DebugDraw</highlight></codeline>
<codeline lineno="218"><highlight class="comment">================</highlight></codeline>
<codeline lineno="219"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="224"><highlight class="comment">================</highlight></codeline>
<codeline lineno="225"><highlight class="comment">idAFConstraint::InitSize</highlight></codeline>
<codeline lineno="226"><highlight class="comment">================</highlight></codeline>
<codeline lineno="227"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::InitSize(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Zero(<sp/>size,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>J2.Zero(<sp/>size,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Zero(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>c2.Zero(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>s.Zero(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>lm.Zero(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="238"><highlight class="comment">================</highlight></codeline>
<codeline lineno="239"><highlight class="comment">idAFConstraint::Save</highlight></codeline>
<codeline lineno="240"><highlight class="comment">================</highlight></codeline>
<codeline lineno="241"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteInt(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="247"><highlight class="comment">================</highlight></codeline>
<codeline lineno="248"><highlight class="comment">idAFConstraint::Restore</highlight></codeline>
<codeline lineno="249"><highlight class="comment">================</highlight></codeline>
<codeline lineno="250"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>constraintType_t<sp/>t;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadInt(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;)t<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>t<sp/>==<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="266"><highlight class="comment">idAFConstraint_Fixed::idAFConstraint_Fixed</highlight></codeline>
<codeline lineno="267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">idAFConstraint_Fixed::idAFConstraint_Fixed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_FIXED;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>InitOffset();</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="283"><highlight class="comment">================</highlight></codeline>
<codeline lineno="284"><highlight class="comment">idAFConstraint_Fixed::InitOffset</highlight></codeline>
<codeline lineno="285"><highlight class="comment">================</highlight></codeline>
<codeline lineno="286"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::InitOffset(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>(<sp/>body1-&gt;GetWorldOrigin()<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relAxis<sp/>=<sp/>body1-&gt;GetWorldAxis()<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relAxis<sp/>=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="299"><highlight class="comment">================</highlight></codeline>
<codeline lineno="300"><highlight class="comment">idAFConstraint_Fixed::SetBody1</highlight></codeline>
<codeline lineno="301"><highlight class="comment">================</highlight></codeline>
<codeline lineno="302"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::SetBody1(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body1<sp/>!=<sp/>body)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitOffset();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;SetChanged();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="314"><highlight class="comment">================</highlight></codeline>
<codeline lineno="315"><highlight class="comment">idAFConstraint_Fixed::SetBody2</highlight></codeline>
<codeline lineno="316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::SetBody2(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>!=<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitOffset();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;SetChanged();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment">================</highlight></codeline>
<codeline lineno="330"><highlight class="comment">idAFConstraint_Fixed::Evaluate</highlight></codeline>
<codeline lineno="331"><highlight class="comment">================</highlight></codeline>
<codeline lineno="332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ofs,<sp/>a2;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>ax;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>r;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>offset<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>a2<sp/>+<sp/>master-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>relAxis<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2.Zero();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>relAxis;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>mat3_identity,<sp/>mat3_zero,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/>mat3_identity<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>-mat3_identity,<sp/>SkewSymmetric(<sp/>a2<sp/>),</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/>-mat3_identity<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>6,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>ofs<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>*<sp/>ax<sp/>).ToRotation();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.SubVec3(1)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>r.GetVec()<sp/>*<sp/>-(float)<sp/>DEG2RAD(<sp/>r.GetAngle()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="371"><highlight class="comment">================</highlight></codeline>
<codeline lineno="372"><highlight class="comment">idAFConstraint_Fixed::ApplyFriction</highlight></codeline>
<codeline lineno="373"><highlight class="comment">================</highlight></codeline>
<codeline lineno="374"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="380"><highlight class="comment">================</highlight></codeline>
<codeline lineno="381"><highlight class="comment">idAFConstraint_Fixed::Translate</highlight></codeline>
<codeline lineno="382"><highlight class="comment">================</highlight></codeline>
<codeline lineno="383"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="391"><highlight class="comment">================</highlight></codeline>
<codeline lineno="392"><highlight class="comment">idAFConstraint_Fixed::Rotate</highlight></codeline>
<codeline lineno="393"><highlight class="comment">================</highlight></codeline>
<codeline lineno="394"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relAxis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="403"><highlight class="comment">================</highlight></codeline>
<codeline lineno="404"><highlight class="comment">idAFConstraint_Fixed::GetCenter</highlight></codeline>
<codeline lineno="405"><highlight class="comment">================</highlight></codeline>
<codeline lineno="406"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="412"><highlight class="comment">================</highlight></codeline>
<codeline lineno="413"><highlight class="comment">idAFConstraint_Fixed::DebugDraw</highlight></codeline>
<codeline lineno="414"><highlight class="comment">================</highlight></codeline>
<codeline lineno="415"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorRed,<sp/>body1-&gt;GetWorldOrigin(),<sp/>master-&gt;GetWorldOrigin()<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorRed,<sp/>body1-&gt;GetWorldOrigin(),<sp/>vec3_origin<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="429"><highlight class="comment">================</highlight></codeline>
<codeline lineno="430"><highlight class="comment">idAFConstraint_Fixed::Save</highlight></codeline>
<codeline lineno="431"><highlight class="comment">================</highlight></codeline>
<codeline lineno="432"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>relAxis<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="440"><highlight class="comment">================</highlight></codeline>
<codeline lineno="441"><highlight class="comment">idAFConstraint_Fixed::Restore</highlight></codeline>
<codeline lineno="442"><highlight class="comment">================</highlight></codeline>
<codeline lineno="443"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Fixed::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>relAxis<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_BallAndSocketJoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="458"><highlight class="comment">================</highlight></codeline>
<codeline lineno="459"><highlight class="comment">idAFConstraint_BallAndSocketJoint::idAFConstraint_BallAndSocketJoint</highlight></codeline>
<codeline lineno="460"><highlight class="comment">================</highlight></codeline>
<codeline lineno="461"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">idAFConstraint_BallAndSocketJoint::idAFConstraint_BallAndSocketJoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_BALLANDSOCKETJOINT;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>fc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="478"><highlight class="comment">================</highlight></codeline>
<codeline lineno="479"><highlight class="comment">idAFConstraint_BallAndSocketJoint::~idAFConstraint_BallAndSocketJoint</highlight></codeline>
<codeline lineno="480"><highlight class="comment">================</highlight></codeline>
<codeline lineno="481"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">idAFConstraint_BallAndSocketJoint::~idAFConstraint_BallAndSocketJoint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="492"><highlight class="comment">================</highlight></codeline>
<codeline lineno="493"><highlight class="comment">idAFConstraint_BallAndSocketJoint::SetAnchor</highlight></codeline>
<codeline lineno="494"><highlight class="comment">================</highlight></codeline>
<codeline lineno="495"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;worldPosition<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor1<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>worldPosition;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetAnchor(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetAnchor(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment">================</highlight></codeline>
<codeline lineno="518"><highlight class="comment">idAFConstraint_BallAndSocketJoint::GetAnchor</highlight></codeline>
<codeline lineno="519"><highlight class="comment">================</highlight></codeline>
<codeline lineno="520"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFConstraint_BallAndSocketJoint::GetAnchor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body2-&gt;GetWorldOrigin()<sp/>+<sp/>body2-&gt;GetWorldAxis()<sp/>*<sp/>anchor2;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anchor2;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="529"><highlight class="comment">================</highlight></codeline>
<codeline lineno="530"><highlight class="comment">idAFConstraint_BallAndSocketJoint::SetNoLimit</highlight></codeline>
<codeline lineno="531"><highlight class="comment">================</highlight></codeline>
<codeline lineno="532"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::SetNoLimit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="545"><highlight class="comment">================</highlight></codeline>
<codeline lineno="546"><highlight class="comment">idAFConstraint_BallAndSocketJoint::SetConeLimit</highlight></codeline>
<codeline lineno="547"><highlight class="comment">================</highlight></codeline>
<codeline lineno="548"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::SetConeLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;coneAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>coneAngle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___cone_limit" kindref="compound">idAFConstraint_ConeLimit</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>coneAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),<sp/>coneAngle,<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>coneAxis,<sp/>coneAngle,<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="567"><highlight class="comment">================</highlight></codeline>
<codeline lineno="568"><highlight class="comment">idAFConstraint_BallAndSocketJoint::SetPyramidLimit</highlight></codeline>
<codeline lineno="569"><highlight class="comment">================</highlight></codeline>
<codeline lineno="570"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::SetPyramidLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pyramidAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;baseAxis,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___pyramid_limit" kindref="compound">idAFConstraint_PyramidLimit</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>pyramidAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),<sp/>angle1,<sp/>angle2,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>pyramidAxis,<sp/>baseAxis,<sp/>angle1,<sp/>angle2,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="593"><highlight class="comment">================</highlight></codeline>
<codeline lineno="594"><highlight class="comment">idAFConstraint_BallAndSocketJoint::SetLimitEpsilon</highlight></codeline>
<codeline lineno="595"><highlight class="comment">================</highlight></codeline>
<codeline lineno="596"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::SetLimitEpsilon(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetEpsilon(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetEpsilon(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="607"><highlight class="comment">================</highlight></codeline>
<codeline lineno="608"><highlight class="comment">idAFConstraint_BallAndSocketJoint::GetFriction</highlight></codeline>
<codeline lineno="609"><highlight class="comment">================</highlight></codeline>
<codeline lineno="610"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::GetFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_forceFriction.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>af_forceFriction.GetFloat();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>friction<sp/>*<sp/>physics-&gt;GetJointFrictionScale();</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="619"><highlight class="comment">================</highlight></codeline>
<codeline lineno="620"><highlight class="comment">idAFConstraint_BallAndSocketJoint::Evaluate</highlight></codeline>
<codeline lineno="621"><highlight class="comment">================</highlight></codeline>
<codeline lineno="622"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>a2<sp/>+<sp/>master-&gt;GetWorldOrigin()<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>anchor2<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>mat3_identity,<sp/>-SkewSymmetric(<sp/>a1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>-mat3_identity,<sp/>SkewSymmetric(<sp/>a2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>3,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="659"><highlight class="comment">================</highlight></codeline>
<codeline lineno="660"><highlight class="comment">idAFConstraint_BallAndSocketJoint::ApplyFriction</highlight></codeline>
<codeline lineno="661"><highlight class="comment">================</highlight></codeline>
<codeline lineno="662"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>angular;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMass,<sp/>currentFriction;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFriction<sp/>=<sp/>GetFriction();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentFriction<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useImpulseFriction.GetBool()<sp/>||<sp/>af_useJointImpulseFriction.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>=<sp/>body1-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>=<sp/>body1-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>-=<sp/>body2-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>+=<sp/>body2-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>*=<sp/>currentFriction<sp/>/<sp/>invMass;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;SetAngularVelocity(<sp/>body1-&gt;GetAngularVelocity()<sp/>-<sp/>angular<sp/>*<sp/>body1-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body2-&gt;SetAngularVelocity(<sp/>body2-&gt;GetAngularVelocity()<sp/>+<sp/>angular<sp/>*<sp/>body2-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___ball_and_socket_joint_friction" kindref="compound">idAFConstraint_BallAndSocketJointFriction</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="700"><highlight class="comment">================</highlight></codeline>
<codeline lineno="701"><highlight class="comment">idAFConstraint_BallAndSocketJoint::GetForce</highlight></codeline>
<codeline lineno="702"><highlight class="comment">================</highlight></codeline>
<codeline lineno="703"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::GetForce(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::GetForce(<sp/>body,<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>add<sp/>limit<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="710"><highlight class="comment">================</highlight></codeline>
<codeline lineno="711"><highlight class="comment">idAFConstraint_BallAndSocketJoint::Translate</highlight></codeline>
<codeline lineno="712"><highlight class="comment">================</highlight></codeline>
<codeline lineno="713"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="727"><highlight class="comment">================</highlight></codeline>
<codeline lineno="728"><highlight class="comment">idAFConstraint_BallAndSocketJoint::Rotate</highlight></codeline>
<codeline lineno="729"><highlight class="comment">================</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="744"><highlight class="comment">================</highlight></codeline>
<codeline lineno="745"><highlight class="comment">idAFConstraint_BallAndSocketJoint::GetCenter</highlight></codeline>
<codeline lineno="746"><highlight class="comment">================</highlight></codeline>
<codeline lineno="747"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="753"><highlight class="comment">================</highlight></codeline>
<codeline lineno="754"><highlight class="comment">idAFConstraint_BallAndSocketJoint::DebugDraw</highlight></codeline>
<codeline lineno="755"><highlight class="comment">================</highlight></codeline>
<codeline lineno="756"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorBlue,<sp/>a1<sp/>-<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>5,<sp/>0,<sp/>0<sp/>),<sp/>a1<sp/>+<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>5,<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorBlue,<sp/>a1<sp/>-<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>5,<sp/>0<sp/>),<sp/>a1<sp/>+<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>5,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorBlue,<sp/>a1<sp/>-<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>5<sp/>),<sp/>a1<sp/>+<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>5<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showLimits.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="774"><highlight class="comment">================</highlight></codeline>
<codeline lineno="775"><highlight class="comment">idAFConstraint_BallAndSocketJoint::Save</highlight></codeline>
<codeline lineno="776"><highlight class="comment">================</highlight></codeline>
<codeline lineno="777"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="792"><highlight class="comment">================</highlight></codeline>
<codeline lineno="793"><highlight class="comment">idAFConstraint_BallAndSocketJoint::Restore</highlight></codeline>
<codeline lineno="794"><highlight class="comment">================</highlight></codeline>
<codeline lineno="795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJoint::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_BallAndSocketJointFriction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="818"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::idAFConstraint_BallAndSocketJointFriction</highlight></codeline>
<codeline lineno="819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="820"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">idAFConstraint_BallAndSocketJointFriction::idAFConstraint_BallAndSocketJointFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_FRICTION;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ballAndSocketJointFriction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>joint<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="831"><highlight class="comment">================</highlight></codeline>
<codeline lineno="832"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::Setup</highlight></codeline>
<codeline lineno="833"><highlight class="comment">================</highlight></codeline>
<codeline lineno="834"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::Setup(<sp/><ref refid="classid_a_f_constraint___ball_and_socket_joint" kindref="compound">idAFConstraint_BallAndSocketJoint</ref><sp/>*bsj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;joint<sp/>=<sp/>bsj;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>bsj-&gt;GetBody1();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>bsj-&gt;GetBody2();</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="842"><highlight class="comment">================</highlight></codeline>
<codeline lineno="843"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::Evaluate</highlight></codeline>
<codeline lineno="844"><highlight class="comment">================</highlight></codeline>
<codeline lineno="845"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="851"><highlight class="comment">================</highlight></codeline>
<codeline lineno="852"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::ApplyFriction</highlight></codeline>
<codeline lineno="853"><highlight class="comment">================</highlight></codeline>
<codeline lineno="854"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="860"><highlight class="comment">================</highlight></codeline>
<codeline lineno="861"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::Add</highlight></codeline>
<codeline lineno="862"><highlight class="comment">================</highlight></codeline>
<codeline lineno="863"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>joint-&gt;GetFriction()<sp/>*<sp/>joint-&gt;GetMultiplier().Length();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>lo[1]<sp/>=<sp/>lo[2]<sp/>=<sp/>-f;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>hi[1]<sp/>=<sp/>hi[2]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Zero(<sp/>3,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>J1[0][3]<sp/>=<sp/>J1[1][4]<sp/>=<sp/>J1[2][5]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>3,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2[0][3]<sp/>=<sp/>J2[1][4]<sp/>=<sp/>J2[2][5]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="892"><highlight class="comment">================</highlight></codeline>
<codeline lineno="893"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::Translate</highlight></codeline>
<codeline lineno="894"><highlight class="comment">================</highlight></codeline>
<codeline lineno="895"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="900"><highlight class="comment">================</highlight></codeline>
<codeline lineno="901"><highlight class="comment">idAFConstraint_BallAndSocketJointFriction::Rotate</highlight></codeline>
<codeline lineno="902"><highlight class="comment">================</highlight></codeline>
<codeline lineno="903"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_BallAndSocketJointFriction::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_UniversalJoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="915"><highlight class="comment">================</highlight></codeline>
<codeline lineno="916"><highlight class="comment">idAFConstraint_UniversalJoint::idAFConstraint_UniversalJoint</highlight></codeline>
<codeline lineno="917"><highlight class="comment">================</highlight></codeline>
<codeline lineno="918"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">idAFConstraint_UniversalJoint::idAFConstraint_UniversalJoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_UNIVERSALJOINT;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>fc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="935"><highlight class="comment">================</highlight></codeline>
<codeline lineno="936"><highlight class="comment">idAFConstraint_UniversalJoint::~idAFConstraint_UniversalJoint</highlight></codeline>
<codeline lineno="937"><highlight class="comment">================</highlight></codeline>
<codeline lineno="938"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">idAFConstraint_UniversalJoint::~idAFConstraint_UniversalJoint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fc;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="952"><highlight class="comment">================</highlight></codeline>
<codeline lineno="953"><highlight class="comment">idAFConstraint_UniversalJoint::SetAnchor</highlight></codeline>
<codeline lineno="954"><highlight class="comment">================</highlight></codeline>
<codeline lineno="955"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;worldPosition<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor1<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>worldPosition;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetAnchor(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetAnchor(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="977"><highlight class="comment">================</highlight></codeline>
<codeline lineno="978"><highlight class="comment">idAFConstraint_UniversalJoint::GetAnchor</highlight></codeline>
<codeline lineno="979"><highlight class="comment">================</highlight></codeline>
<codeline lineno="980"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFConstraint_UniversalJoint::GetAnchor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body2-&gt;GetWorldOrigin()<sp/>+<sp/>body2-&gt;GetWorldAxis()<sp/>*<sp/>anchor2;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anchor2;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="989"><highlight class="comment">================</highlight></codeline>
<codeline lineno="990"><highlight class="comment">idAFConstraint_UniversalJoint::SetShafts</highlight></codeline>
<codeline lineno="991"><highlight class="comment">================</highlight></codeline>
<codeline lineno="992"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetShafts(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;cardanShaft1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;cardanShaft2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>cardanAxis;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>shaft1<sp/>=<sp/>cardanShaft1;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>shaft1.Normalize();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>l<sp/>!=<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>shaft2<sp/>=<sp/>cardanShaft2;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>shaft2.Normalize();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>l<sp/>!=<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cardan<sp/>axis<sp/>is<sp/>a<sp/>vector<sp/>orthogonal<sp/>to<sp/>both<sp/>cardan<sp/>shafts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>cardanAxis<sp/>=<sp/>shaft1.Cross(<sp/>shaft2<sp/>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cardanAxis.Normalize()<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vecY;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaft1.OrthogonalBasis(<sp/>cardanAxis,<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cardanAxis.Normalize();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>shaft1<sp/>*=<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>axis1<sp/>=<sp/>cardanAxis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaft2<sp/>*=<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>=<sp/>cardanAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>=<sp/>cardanAxis;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetBody1Axis(<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetBody1Axis(<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">idAFConstraint_UniversalJoint::SetNoLimit</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetNoLimit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">idAFConstraint_UniversalJoint::SetConeLimit</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1050"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetConeLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;coneAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>coneAngle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pyramidLimit;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___cone_limit" kindref="compound">idAFConstraint_ConeLimit</ref>;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>coneAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),<sp/>coneAngle,<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>coneAxis,<sp/>coneAngle,<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1069"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1070"><highlight class="comment">idAFConstraint_UniversalJoint::SetPyramidLimit</highlight></codeline>
<codeline lineno="1071"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1072"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetPyramidLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pyramidAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;baseAxis,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___pyramid_limit" kindref="compound">idAFConstraint_PyramidLimit</ref>;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>pyramidAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),<sp/>angle1,<sp/>angle2,<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>pyramidAxis,<sp/>baseAxis,<sp/>angle1,<sp/>angle2,<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">idAFConstraint_UniversalJoint::SetLimitEpsilon</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::SetLimitEpsilon(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetEpsilon(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;SetEpsilon(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">idAFConstraint_UniversalJoint::GetFriction</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::GetFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_forceFriction.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>af_forceFriction.GetFloat();</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>friction<sp/>*<sp/>physics-&gt;GetJointFrictionScale();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1119"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1120"><highlight class="comment">idAFConstraint_UniversalJoint::Evaluate</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"></highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/>NOTE:<sp/>this<sp/>joint<sp/>is<sp/>homokinetic</highlight></codeline>
<codeline lineno="1123"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2,<sp/>s1,<sp/>s2,<sp/>d1,<sp/>d2,<sp/>v;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>shaft1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>s1.Cross(<sp/>axis1<sp/>*<sp/>body1-&gt;GetWorldAxis()<sp/>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>shaft2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>axis2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>a2<sp/>+<sp/>master-&gt;GetWorldOrigin()<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>shaft2;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>axis2;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>a2<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>mat3_identity,<sp/><sp/>-SkewSymmetric(<sp/>a1<sp/>),</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>s1[0],<sp/>s1[1],<sp/>s1[2],</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>4,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>-mat3_identity,<sp/>SkewSymmetric(<sp/>a2<sp/>),</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>s2[0],<sp/>s2[1],<sp/>s2[2],</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>4,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>4,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>s1.Cross(<sp/>s2<sp/>);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v.Normalize()<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>m1,<sp/>m2;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[0]<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[1]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[2]<sp/>=<sp/>v.Cross(<sp/>m1[0]<sp/>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[0]<sp/>=<sp/>-s2;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[1]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[2]<sp/>=<sp/>v.Cross(<sp/>m2[0]<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>*=<sp/>m2.Transpose()<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[3]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>d1<sp/>*<sp/>d2<sp/>);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1193"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">idAFConstraint_UniversalJoint::ApplyFriction</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>angular;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMass,<sp/>currentFriction;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFriction<sp/>=<sp/>GetFriction();</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentFriction<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useImpulseFriction.GetBool()<sp/>||<sp/>af_useJointImpulseFriction.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>=<sp/>body1-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>=<sp/>body1-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>-=<sp/>body2-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>+=<sp/>body2-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>*=<sp/>currentFriction<sp/>/<sp/>invMass;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;SetAngularVelocity(<sp/>body1-&gt;GetAngularVelocity()<sp/>-<sp/>angular<sp/>*<sp/>body1-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body2-&gt;SetAngularVelocity(<sp/>body2-&gt;GetAngularVelocity()<sp/>+<sp/>angular<sp/>*<sp/>body2-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___universal_joint_friction" kindref="compound">idAFConstraint_UniversalJointFriction</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">idAFConstraint_UniversalJoint::GetForce</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::GetForce(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::GetForce(<sp/>body,<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>add<sp/>limit<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1244"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1245"><highlight class="comment">idAFConstraint_UniversalJoint::Translate</highlight></codeline>
<codeline lineno="1246"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1247"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1261"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1262"><highlight class="comment">idAFConstraint_UniversalJoint::Rotate</highlight></codeline>
<codeline lineno="1263"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1264"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaft2<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1280"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1281"><highlight class="comment">idAFConstraint_UniversalJoint::GetCenter</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1283"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1289"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1290"><highlight class="comment">idAFConstraint_UniversalJoint::DebugDraw</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1292"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2,<sp/>s1,<sp/>s2,<sp/>d1,<sp/>d2,<sp/>v;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>shaft1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>axis1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>shaft2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>axis2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>shaft2;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>axis2;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>s1.Cross(<sp/>s2<sp/>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v.Normalize()<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>m1,<sp/>m2;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[0]<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[1]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[2]<sp/>=<sp/>v.Cross(<sp/>m1[0]<sp/>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[0]<sp/>=<sp/>-s2;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[1]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2[2]<sp/>=<sp/>v.Cross(<sp/>m2[0]<sp/>);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>*=<sp/>m2.Transpose()<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorCyan,<sp/>a1,<sp/>a1<sp/>+<sp/>s1<sp/>*<sp/>5.0f,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorBlue,<sp/>a2,<sp/>a2<sp/>+<sp/>s2<sp/>*<sp/>5.0f,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>a1,<sp/>a1<sp/>+<sp/>d1<sp/>*<sp/>5.0f<sp/>);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>a2,<sp/>a2<sp/>+<sp/>d2<sp/>*<sp/>5.0f<sp/>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showLimits.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1345"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1346"><highlight class="comment">idAFConstraint_UniversalJoint::Save</highlight></codeline>
<codeline lineno="1347"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1348"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>shaft2<sp/>);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>axis1<sp/>);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>axis2<sp/>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1367"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1368"><highlight class="comment">idAFConstraint_UniversalJoint::Restore</highlight></codeline>
<codeline lineno="1369"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1370"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJoint::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>shaft1<sp/>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>shaft2<sp/>);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>axis1<sp/>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>axis2<sp/>);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pyramidLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidLimit-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_UniversalJointFriction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1396"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1397"><highlight class="comment">idAFConstraint_UniversalJointFriction::idAFConstraint_UniversalJointFriction</highlight></codeline>
<codeline lineno="1398"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1399"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal">idAFConstraint_UniversalJointFriction::idAFConstraint_UniversalJointFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_FRICTION;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;universalJointFriction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>joint<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1410"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1411"><highlight class="comment">idAFConstraint_UniversalJointFriction::Setup</highlight></codeline>
<codeline lineno="1412"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1413"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::Setup(<sp/><ref refid="classid_a_f_constraint___universal_joint" kindref="compound">idAFConstraint_UniversalJoint</ref><sp/>*uj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;joint<sp/>=<sp/>uj;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>uj-&gt;GetBody1();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>uj-&gt;GetBody2();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1421"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1422"><highlight class="comment">idAFConstraint_UniversalJointFriction::Evaluate</highlight></codeline>
<codeline lineno="1423"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1424"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1430"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1431"><highlight class="comment">idAFConstraint_UniversalJointFriction::ApplyFriction</highlight></codeline>
<codeline lineno="1432"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1433"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1439"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1440"><highlight class="comment">idAFConstraint_UniversalJointFriction::Add</highlight></codeline>
<codeline lineno="1441"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1442"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>s1,<sp/>s2,<sp/>dir1,<sp/>dir2;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>joint-&gt;GetFriction()<sp/>*<sp/>joint-&gt;GetMultiplier().Length();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>lo[1]<sp/>=<sp/>-f;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>hi[1]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>joint-&gt;GetShafts(<sp/>s1,<sp/>s2<sp/>);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>*=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>s1.NormalVectors(<sp/>dir1,<sp/>dir2<sp/>);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>dir1;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(1)<sp/>=<sp/>dir2;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>-dir1;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(1)<sp/>=<sp/>-dir2;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1484"><highlight class="comment">idAFConstraint_UniversalJointFriction::Translate</highlight></codeline>
<codeline lineno="1485"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1486"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1491"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1492"><highlight class="comment">idAFConstraint_UniversalJointFriction::Rotate</highlight></codeline>
<codeline lineno="1493"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1494"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_UniversalJointFriction::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_CylindricalJoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1506"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1507"><highlight class="comment">idAFConstraint_CylindricalJoint::idAFConstraint_CylindricalJoint</highlight></codeline>
<codeline lineno="1508"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1509"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal">idAFConstraint_CylindricalJoint::idAFConstraint_CylindricalJoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1515"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1516"><highlight class="comment">idAFConstraint_CylindricalJoint::Evaluate</highlight></codeline>
<codeline lineno="1517"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1518"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_CylindricalJoint::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1524"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1525"><highlight class="comment">idAFConstraint_CylindricalJoint::ApplyFriction</highlight></codeline>
<codeline lineno="1526"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1527"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_CylindricalJoint::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1533"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1534"><highlight class="comment">idAFConstraint_CylindricalJoint::Translate</highlight></codeline>
<codeline lineno="1535"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1536"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_CylindricalJoint::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1542"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1543"><highlight class="comment">idAFConstraint_CylindricalJoint::Rotate</highlight></codeline>
<codeline lineno="1544"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1545"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_CylindricalJoint::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1551"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1552"><highlight class="comment">idAFConstraint_CylindricalJoint::DebugDraw</highlight></codeline>
<codeline lineno="1553"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1554"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_CylindricalJoint::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Hinge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1567"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1568"><highlight class="comment">idAFConstraint_Hinge::idAFConstraint_Hinge</highlight></codeline>
<codeline lineno="1569"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1570"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal">idAFConstraint_Hinge::idAFConstraint_Hinge(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_HINGE;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>steering<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>fc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>initialAxis<sp/>=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialAxis<sp/>*=<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1591"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1592"><highlight class="comment">idAFConstraint_Hinge::~idAFConstraint_Hinge</highlight></codeline>
<codeline lineno="1593"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1594"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal">idAFConstraint_Hinge::~idAFConstraint_Hinge(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fc;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>steering;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1608"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1609"><highlight class="comment">idAFConstraint_Hinge::SetAnchor</highlight></codeline>
<codeline lineno="1610"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1611"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;worldPosition<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor1<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>(<sp/>worldPosition<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>worldPosition;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetAnchor(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1629"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1630"><highlight class="comment">idAFConstraint_Hinge::GetAnchor</highlight></codeline>
<codeline lineno="1631"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1632"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFConstraint_Hinge::GetAnchor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body2-&gt;GetWorldOrigin()<sp/>+<sp/>body2-&gt;GetWorldAxis()<sp/>*<sp/>anchor2;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anchor2;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1641"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1642"><highlight class="comment">idAFConstraint_Hinge::SetAxis</highlight></codeline>
<codeline lineno="1643"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1644"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetAxis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>normAxis;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>normAxis<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>normAxis.Normalize();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>axis<sp/>relative<sp/>to<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>axis1<sp/>=<sp/>normAxis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>axis<sp/>relative<sp/>to<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>=<sp/>normAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>=<sp/>normAxis;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1663"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1664"><highlight class="comment">idAFConstraint_Hinge::GetAxis</highlight></codeline>
<codeline lineno="1665"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1666"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFConstraint_Hinge::GetAxis(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>axis2<sp/>*<sp/>body2-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>axis2;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1675"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1676"><highlight class="comment">idAFConstraint_Hinge::SetNoLimit</highlight></codeline>
<codeline lineno="1677"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1678"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetNoLimit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1687"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1688"><highlight class="comment">idAFConstraint_Hinge::SetLimit</highlight></codeline>
<codeline lineno="1689"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1690"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;axis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___cone_limit" kindref="compound">idAFConstraint_ConeLimit</ref>;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>axis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose(),<sp/>angle,<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Setup(<sp/>body1,<sp/>body2,<sp/>anchor2,<sp/>axis,<sp/>angle,<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1705"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1706"><highlight class="comment">idAFConstraint_Hinge::SetLimitEpsilon</highlight></codeline>
<codeline lineno="1707"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1708"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetLimitEpsilon(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetEpsilon(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1716"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1717"><highlight class="comment">idAFConstraint_Hinge::GetFriction</highlight></codeline>
<codeline lineno="1718"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1719"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::GetFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_forceFriction.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>af_forceFriction.GetFloat();</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>friction<sp/>*<sp/>physics-&gt;GetJointFrictionScale();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1728"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1729"><highlight class="comment">idAFConstraint_Hinge::GetAngle</highlight></codeline>
<codeline lineno="1730"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1731"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::GetAngle(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>body1-&gt;GetWorldAxis()<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose()<sp/>*<sp/>initialAxis.Transpose();</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>axis.ToRotation();</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>rotation.GetAngle();</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rotation.GetVec()<sp/>*<sp/>axis1<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-angle;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angle;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1747"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1748"><highlight class="comment">idAFConstraint_Hinge::SetSteerAngle</highlight></codeline>
<codeline lineno="1749"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1750"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetSteerAngle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>degrees<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>coneLimit;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___hinge_steering" kindref="compound">idAFConstraint_HingeSteering</ref>();</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>steering-&gt;SetSteerAngle(<sp/>degrees<sp/>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1764"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1765"><highlight class="comment">idAFConstraint_Hinge::SetSteerSpeed</highlight></codeline>
<codeline lineno="1766"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1767"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::SetSteerSpeed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;SetSteerSpeed(<sp/>speed<sp/>);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1775"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1776"><highlight class="comment">idAFConstraint_Hinge::Evaluate</highlight></codeline>
<codeline lineno="1777"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1778"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>x1,<sp/>x2,<sp/>cross;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vecX,<sp/>vecY;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>axis1<sp/>*<sp/>body1-&gt;GetWorldAxis();<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>in<sp/>body1<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>x1.OrthogonalBasis(<sp/>vecX,<sp/>vecY<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>basis<sp/>for<sp/>axis<sp/>in<sp/>body1<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anchor<sp/>in<sp/>body1<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();<sp/><sp/></highlight><highlight class="comment">//<sp/>anchor<sp/>in<sp/>master<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>axis2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>a2<sp/>+<sp/>master-&gt;GetWorldOrigin()<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>axis2;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>a2<sp/>-<sp/>(<sp/>a1<sp/>+<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>mat3_identity,<sp/><sp/>-SkewSymmetric(<sp/>a1<sp/>),</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>vecX[0],<sp/>vecX[1],<sp/>vecX[2],</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecY[0],<sp/>vecY[1],<sp/>vecY[2],</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>-mat3_identity,<sp/>SkewSymmetric(<sp/>a2<sp/>),</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>-vecX[0],<sp/>-vecX[1],<sp/>-vecX[2],</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-vecY[0],<sp/>-vecY[1],<sp/>-vecY[2],</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f,<sp/>0.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>cross<sp/>=<sp/>x1.Cross(<sp/>x2<sp/>);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[3]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>cross<sp/>*<sp/>vecX<sp/>);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[4]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>cross<sp/>*<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1836"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1837"><highlight class="comment">idAFConstraint_Hinge::ApplyFriction</highlight></codeline>
<codeline lineno="1838"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1839"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>angular;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMass,<sp/>currentFriction;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFriction<sp/>=<sp/>GetFriction();</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentFriction<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useImpulseFriction.GetBool()<sp/>||<sp/>af_useJointImpulseFriction.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>=<sp/>body1-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>=<sp/>body1-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>-=<sp/>body2-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invMass<sp/>+=<sp/>body2-&gt;GetInverseMass();</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>*=<sp/>currentFriction<sp/>/<sp/>invMass;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;SetAngularVelocity(<sp/>body1-&gt;GetAngularVelocity()<sp/>-<sp/>angular<sp/>*<sp/>body1-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body2-&gt;SetAngularVelocity(<sp/>body2-&gt;GetAngularVelocity()<sp/>+<sp/>angular<sp/>*<sp/>body2-&gt;GetInverseMass()<sp/>);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___hinge_friction" kindref="compound">idAFConstraint_HingeFriction</ref>;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1877"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1878"><highlight class="comment">idAFConstraint_Hinge::GetForce</highlight></codeline>
<codeline lineno="1879"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1880"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::GetForce(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::GetForce(<sp/>body,<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>add<sp/>limit<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1887"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1888"><highlight class="comment">idAFConstraint_Hinge::Translate</highlight></codeline>
<codeline lineno="1889"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1890"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1901"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1902"><highlight class="comment">idAFConstraint_Hinge::Rotate</highlight></codeline>
<codeline lineno="1903"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1904"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis2<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1916"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1917"><highlight class="comment">idAFConstraint_Hinge::GetCenter</highlight></codeline>
<codeline lineno="1918"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1919"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1925"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1926"><highlight class="comment">idAFConstraint_Hinge::DebugDraw</highlight></codeline>
<codeline lineno="1927"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1928"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vecX,<sp/>vecY;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>x1<sp/>=<sp/>axis1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>x1.OrthogonalBasis(<sp/>vecX,<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorBlue,<sp/>a1<sp/>-<sp/>4.0f<sp/>*<sp/>x1,<sp/>a1<sp/>+<sp/>4.0f<sp/>*<sp/>x1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorBlue,<sp/>a1<sp/>-<sp/>2.0f<sp/>*<sp/>vecX,<sp/>a1<sp/>+<sp/>2.0f<sp/>*<sp/>vecX<sp/>);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorBlue,<sp/>a1<sp/>-<sp/>2.0f<sp/>*<sp/>vecY,<sp/>a1<sp/>+<sp/>2.0f<sp/>*<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showLimits.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1947"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1948"><highlight class="comment">idAFConstraint_Hinge::Save</highlight></codeline>
<codeline lineno="1949"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1950"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>axis1<sp/>);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>axis2<sp/>);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>initialAxis<sp/>);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1980"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1981"><highlight class="comment">idAFConstraint_Hinge::Restore</highlight></codeline>
<codeline lineno="1982"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1983"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Hinge::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>axis1<sp/>);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>axis2<sp/>);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>initialAxis<sp/>);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>friction<sp/>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!coneLimit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___cone_limit" kindref="compound">idAFConstraint_ConeLimit</ref>;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;SetPhysics(<sp/>physics<sp/>);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneLimit-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!steering<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___hinge_steering" kindref="compound">idAFConstraint_HingeSteering</ref>;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steering-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___hinge_friction" kindref="compound">idAFConstraint_HingeFriction</ref>;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_HingeFriction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2028"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2029"><highlight class="comment">idAFConstraint_HingeFriction::idAFConstraint_HingeFriction</highlight></codeline>
<codeline lineno="2030"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2031"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal">idAFConstraint_HingeFriction::idAFConstraint_HingeFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_FRICTION;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hingeFriction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>hinge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2042"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2043"><highlight class="comment">idAFConstraint_HingeFriction::Setup</highlight></codeline>
<codeline lineno="2044"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2045"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::Setup(<sp/><ref refid="classid_a_f_constraint___hinge" kindref="compound">idAFConstraint_Hinge</ref><sp/>*h<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;hinge<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>h-&gt;GetBody1();</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>h-&gt;GetBody2();</highlight></codeline>
<codeline lineno="2050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2053"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2054"><highlight class="comment">idAFConstraint_HingeFriction::Evaluate</highlight></codeline>
<codeline lineno="2055"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2056"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2062"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2063"><highlight class="comment">idAFConstraint_HingeFriction::ApplyFriction</highlight></codeline>
<codeline lineno="2064"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2065"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2071"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2072"><highlight class="comment">idAFConstraint_HingeFriction::Add</highlight></codeline>
<codeline lineno="2073"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2074"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>hinge-&gt;GetFriction()<sp/>*<sp/>hinge-&gt;GetMultiplier().Length();</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>-f;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>hinge-&gt;GetAxis(<sp/>a1,<sp/>a2<sp/>);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>*=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>*=<sp/>body2-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>-a2;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2111"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2112"><highlight class="comment">idAFConstraint_HingeFriction::Translate</highlight></codeline>
<codeline lineno="2113"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2119"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2120"><highlight class="comment">idAFConstraint_HingeFriction::Rotate</highlight></codeline>
<codeline lineno="2121"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2122"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeFriction::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_HingeSteering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2134"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2135"><highlight class="comment">idAFConstraint_HingeSteering::idAFConstraint_HingeSteering</highlight></codeline>
<codeline lineno="2136"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal">idAFConstraint_HingeSteering::idAFConstraint_HingeSteering(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_HINGESTEERING;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hingeFriction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>hinge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>steerSpeed<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon<sp/>=<sp/>LCP_EPSILON;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2150"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2151"><highlight class="comment">idAFConstraint_HingeSteering::Save</highlight></codeline>
<codeline lineno="2152"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2153"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(steerAngle);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(steerSpeed);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(epsilon);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2161"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2162"><highlight class="comment">idAFConstraint_HingeSteering::Restore</highlight></codeline>
<codeline lineno="2163"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(steerAngle);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(steerSpeed);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(epsilon);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2172"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2173"><highlight class="comment">idAFConstraint_HingeSteering::Setup</highlight></codeline>
<codeline lineno="2174"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2175"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Setup(<sp/><ref refid="classid_a_f_constraint___hinge" kindref="compound">idAFConstraint_Hinge</ref><sp/>*h<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;hinge<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>h-&gt;GetBody1();</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>h-&gt;GetBody2();</highlight></codeline>
<codeline lineno="2180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2183"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2184"><highlight class="comment">idAFConstraint_HingeSteering::Evaluate</highlight></codeline>
<codeline lineno="2185"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2186"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2192"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2193"><highlight class="comment">idAFConstraint_HingeSteering::ApplyFriction</highlight></codeline>
<codeline lineno="2194"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2201"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2202"><highlight class="comment">idAFConstraint_HingeSteering::Add</highlight></codeline>
<codeline lineno="2203"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2204"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle,<sp/>speed;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>hinge-&gt;GetAxis(<sp/>a1,<sp/>a2<sp/>);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>hinge-&gt;GetAngle();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>*=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>*=<sp/>body2-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0).Zero();</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>-a2;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>speed<sp/>=<sp/>steerAngle<sp/>-<sp/>angle;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steerSpeed<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>speed<sp/>&gt;<sp/>steerSpeed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>speed<sp/>=<sp/>steerSpeed;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>speed<sp/>&lt;<sp/>-steerSpeed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>speed<sp/>=<sp/>-steerSpeed;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>DEG2RAD(<sp/>speed<sp/>)<sp/>*<sp/>invTimeStep;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2246"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2247"><highlight class="comment">idAFConstraint_HingeSteering::Translate</highlight></codeline>
<codeline lineno="2248"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2249"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2254"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2255"><highlight class="comment">idAFConstraint_HingeSteering::Rotate</highlight></codeline>
<codeline lineno="2256"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2257"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_HingeSteering::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Slider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2269"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2270"><highlight class="comment">idAFConstraint_Slider::idAFConstraint_Slider</highlight></codeline>
<codeline lineno="2271"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal">idAFConstraint_Slider::idAFConstraint_Slider(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_SLIDER;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>(<sp/>body1-&gt;GetWorldOrigin()<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relAxis<sp/>=<sp/>body1-&gt;GetWorldAxis()<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relAxis<sp/>=<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2294"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2295"><highlight class="comment">idAFConstraint_Slider::SetAxis</highlight></codeline>
<codeline lineno="2296"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2297"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::SetAxis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;ax<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>normAxis;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>normalized<sp/>axis<sp/>relative<sp/>to<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>normAxis<sp/>=<sp/>ax;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>normAxis.Normalize();</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>normAxis<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>normAxis;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2313"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2314"><highlight class="comment">idAFConstraint_Slider::Evaluate</highlight></codeline>
<codeline lineno="2315"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2316"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vecX,<sp/>vecY,<sp/>ofs;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>r;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(axis<sp/>*<sp/>master-&gt;GetWorldAxis()).OrthogonalBasis(<sp/>vecX,<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>master-&gt;GetWorldAxis()<sp/>*<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>*<sp/>(relAxis<sp/>*<sp/>master-&gt;GetWorldAxis())<sp/>).ToRotation();</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis.OrthogonalBasis(<sp/>vecX,<sp/>vecY<sp/>);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>body1-&gt;GetWorldAxis().Transpose()<sp/>*<sp/>relAxis<sp/>).ToRotation();</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>mat3_zero,<sp/>mat3_identity,</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>vecX,<sp/>vecY,<sp/>vec3_origin<sp/>),<sp/>mat3_zero<sp/>);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>mat3_zero,<sp/>-mat3_identity,</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref>(<sp/>-vecX,<sp/>-vecY,<sp/>vec3_origin<sp/>),<sp/>mat3_zero<sp/>);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>5,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.SubVec3(0)<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>r.GetVec()<sp/>*<sp/>-<sp/>(float)<sp/>DEG2RAD(<sp/>r.GetAngle()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[3]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>vecX<sp/>*<sp/>ofs<sp/>);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[4]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(<sp/>vecY<sp/>*<sp/>ofs<sp/>);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2358"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2359"><highlight class="comment">idAFConstraint_Slider::ApplyFriction</highlight></codeline>
<codeline lineno="2360"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2361"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2367"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2368"><highlight class="comment">idAFConstraint_Slider::Translate</highlight></codeline>
<codeline lineno="2369"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2370"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2378"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2379"><highlight class="comment">idAFConstraint_Slider::Rotate</highlight></codeline>
<codeline lineno="2380"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2381"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2389"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2390"><highlight class="comment">idAFConstraint_Slider::GetCenter</highlight></codeline>
<codeline lineno="2391"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2392"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>master-&gt;GetWorldAxis()<sp/>*<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2406"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2407"><highlight class="comment">idAFConstraint_Slider::DebugDraw</highlight></codeline>
<codeline lineno="2408"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2409"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ofs;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>master-&gt;GetWorldAxis()<sp/>*<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>offset<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>ofs,<sp/>ofs<sp/>+<sp/>axis<sp/>*<sp/>body1-&gt;GetWorldAxis()<sp/>);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2425"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2426"><highlight class="comment">idAFConstraint_Slider::Save</highlight></codeline>
<codeline lineno="2427"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2428"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>relAxis<sp/>);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2437"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2438"><highlight class="comment">idAFConstraint_Slider::Restore</highlight></codeline>
<codeline lineno="2439"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2440"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Slider::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>relAxis<sp/>);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2456"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2457"><highlight class="comment">idAFConstraint_Line::idAFConstraint_Line</highlight></codeline>
<codeline lineno="2458"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2459"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal">idAFConstraint_Line::idAFConstraint_Line(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2465"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2466"><highlight class="comment">idAFConstraint_Line::Evaluate</highlight></codeline>
<codeline lineno="2467"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2468"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Line::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2474"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2475"><highlight class="comment">idAFConstraint_Line::ApplyFriction</highlight></codeline>
<codeline lineno="2476"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2477"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Line::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2483"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2484"><highlight class="comment">idAFConstraint_Line::Translate</highlight></codeline>
<codeline lineno="2485"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2486"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Line::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2492"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2493"><highlight class="comment">idAFConstraint_Line::Rotate</highlight></codeline>
<codeline lineno="2494"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2495"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Line::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2501"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2502"><highlight class="comment">idAFConstraint_Line::DebugDraw</highlight></codeline>
<codeline lineno="2503"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2504"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Line::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2517"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2518"><highlight class="comment">idAFConstraint_Plane::idAFConstraint_Plane</highlight></codeline>
<codeline lineno="2519"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2520"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal">idAFConstraint_Plane::idAFConstraint_Plane(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_PLANE;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.noCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2533"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2534"><highlight class="comment">idAFConstraint_Plane::SetPlane</highlight></codeline>
<codeline lineno="2535"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2536"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::SetPlane(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;normal,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;anchor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor1<sp/>=<sp/>(<sp/>anchor<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>(<sp/>anchor<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeNormal<sp/>=<sp/>normal<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>anchor;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeNormal<sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2552"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2553"><highlight class="comment">idAFConstraint_Plane::Evaluate</highlight></codeline>
<codeline lineno="2554"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2555"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2,<sp/>normal,<sp/>p;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>v;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>planeNormal<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>planeNormal;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>a1<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SubVec3(0)<sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SubVec3(1)<sp/>=<sp/>p.Cross(<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>1,<sp/>6,<sp/>v.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>a1<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SubVec3(0)<sp/>=<sp/>-normal;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SubVec3(1)<sp/>=<sp/>p.Cross(<sp/>-normal<sp/>);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>1,<sp/>6,<sp/>v.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>(a1<sp/>*<sp/>normal<sp/>-<sp/>a2<sp/>*<sp/>normal);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2591"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2592"><highlight class="comment">idAFConstraint_Plane::ApplyFriction</highlight></codeline>
<codeline lineno="2593"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2594"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2600"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2601"><highlight class="comment">idAFConstraint_Plane::Translate</highlight></codeline>
<codeline lineno="2602"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2603"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2611"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2612"><highlight class="comment">idAFConstraint_Plane::Rotate</highlight></codeline>
<codeline lineno="2613"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2614"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeNormal<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2623"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2624"><highlight class="comment">idAFConstraint_Plane::DebugDraw</highlight></codeline>
<codeline lineno="2625"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2626"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>normal,<sp/>right,<sp/>up;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>planeNormal<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>planeNormal;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.NormalVectors(<sp/>right,<sp/>up<sp/>);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>*=<sp/>4.0f;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>*=<sp/>4.0f;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>up<sp/>*=<sp/>4.0f;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorCyan,<sp/>a1<sp/>-<sp/>right,<sp/>a1<sp/>+<sp/>right<sp/>);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorCyan,<sp/>a1<sp/>-<sp/>up,<sp/>a1<sp/>+<sp/>up<sp/>);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorCyan,<sp/>a1,<sp/>a1<sp/>+<sp/>normal,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2651"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2652"><highlight class="comment">idAFConstraint_Plane::Save</highlight></codeline>
<codeline lineno="2653"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2654"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>planeNormal<sp/>);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2663"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2664"><highlight class="comment">idAFConstraint_Plane::Restore</highlight></codeline>
<codeline lineno="2665"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2666"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Plane::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>planeNormal<sp/>);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Spring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2682"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2683"><highlight class="comment">idAFConstraint_Spring::idAFConstraint_Spring</highlight></codeline>
<codeline lineno="2684"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2685"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal">idAFConstraint_Spring::idAFConstraint_Spring(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>body1<sp/>);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_SPRING;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>body1;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>body2;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>kstretch<sp/>=<sp/>kcompress<sp/>=<sp/>damping<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>minLength<sp/>=<sp/>maxLength<sp/>=<sp/>restLength<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2699"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2700"><highlight class="comment">idAFConstraint_Spring::SetAnchor</highlight></codeline>
<codeline lineno="2701"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2702"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;worldAnchor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;worldAnchor2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor1<sp/>=<sp/>(<sp/>worldAnchor1<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>anchor<sp/>relative<sp/>to<sp/>center<sp/>of<sp/>mass<sp/>of<sp/>body2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>(<sp/>worldAnchor2<sp/>-<sp/>body2-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body2-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>=<sp/>worldAnchor2;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2716"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2717"><highlight class="comment">idAFConstraint_Spring::SetSpring</highlight></codeline>
<codeline lineno="2718"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2719"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::SetSpring(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stretch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>compress,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>damping,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restLength<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>stretch<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>compress<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>restLength<sp/>&gt;=<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;kstretch<sp/>=<sp/>stretch;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;kcompress<sp/>=<sp/>compress;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;damping<sp/>=<sp/>damping;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;restLength<sp/>=<sp/>restLength;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2729"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2730"><highlight class="comment">idAFConstraint_Spring::SetLimit</highlight></codeline>
<codeline lineno="2731"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2732"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::SetLimit(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxLength<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>minLength<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>maxLength<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>maxLength<sp/>&gt;=<sp/>minLength<sp/>);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;minLength<sp/>=<sp/>minLength;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;maxLength<sp/>=<sp/>maxLength;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2740"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2741"><highlight class="comment">idAFConstraint_Spring::Evaluate</highlight></codeline>
<codeline lineno="2742"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2743"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2,<sp/>velocity1,<sp/>velocity2,<sp/>force;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>v1,<sp/>v2;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>dampingForce,<sp/>length,<sp/>error;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>limit;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity1<sp/>=<sp/>body1-&gt;GetPointVelocity(<sp/>a1<sp/>);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity2<sp/>=<sp/>master-&gt;GetPointVelocity(<sp/>a2<sp/>);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity2.Zero();</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>force<sp/>=<sp/>a2<sp/>-<sp/>a1;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>force<sp/>*<sp/>force;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dampingForce<sp/>=<sp/>damping<sp/>*<sp/>idMath::Fabs(<sp/>(velocity2<sp/>-<sp/>velocity1)<sp/>*<sp/>force<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dampingForce<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>force.Normalize();</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>&gt;<sp/>restLength<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kstretch<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>springForce<sp/>=<sp/>force<sp/>*<sp/>(<sp/>Square(<sp/>length<sp/>-<sp/>restLength<sp/>)<sp/>*<sp/>kstretch<sp/>-<sp/>dampingForce<sp/>);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;AddForce(<sp/>a1,<sp/>springForce<sp/>);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master-&gt;AddForce(<sp/>a2,<sp/>-springForce<sp/>);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kcompress<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>springForce<sp/>=<sp/>force<sp/>*<sp/>-(<sp/>Square(<sp/>restLength<sp/>-<sp/>length<sp/>)<sp/>*<sp/>kcompress<sp/>-<sp/>dampingForce<sp/>);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;AddForce(<sp/>a1,<sp/>springForce<sp/>);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master-&gt;AddForce(<sp/>a2,<sp/>-springForce<sp/>);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>spring<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>&lt;<sp/>minLength<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force<sp/>=<sp/>-force;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>minLength<sp/>-<sp/>length;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxLength<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>maxLength<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>length<sp/>-<sp/>maxLength;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>limit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>-=<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1.SubVec3(0)<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1.SubVec3(1)<sp/>=<sp/>a1.Cross(<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.Set(<sp/>1,<sp/>6,<sp/>v1.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>-=<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2.SubVec3(0)<sp/>=<sp/>-force;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2.SubVec3(1)<sp/>=<sp/>a2.Cross(<sp/>-force<sp/>);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>1,<sp/>6,<sp/>v2.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>-(<sp/>invTimeStep<sp/>*<sp/>ERROR_REDUCTION<sp/>)<sp/>*<sp/>error;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.Zero(<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Zero(<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.Clamp(<sp/>-ERROR_REDUCTION_MAX,<sp/>ERROR_REDUCTION_MAX<sp/>);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2832"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2833"><highlight class="comment">idAFConstraint_Spring::ApplyFriction</highlight></codeline>
<codeline lineno="2834"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2835"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2841"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2842"><highlight class="comment">idAFConstraint_Spring::Translate</highlight></codeline>
<codeline lineno="2843"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2844"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2852"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2853"><highlight class="comment">idAFConstraint_Spring::Rotate</highlight></codeline>
<codeline lineno="2854"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2855"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor2<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2863"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2864"><highlight class="comment">idAFConstraint_Spring::GetCenter</highlight></codeline>
<codeline lineno="2865"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2866"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<sp/>a1<sp/>+<sp/>a2<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2883"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2884"><highlight class="comment">idAFConstraint_Spring::DebugDraw</highlight></codeline>
<codeline lineno="2885"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2886"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>a1,<sp/>a2,<sp/>dir,<sp/>mid,<sp/>p;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>anchor1<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>anchor2<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>anchor2;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>a2<sp/>-<sp/>a1;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>a1<sp/>+<sp/>0.5f<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>spring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>a1,<sp/>a2<sp/>);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>rest<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>restLength<sp/>*<sp/>0.5f<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorWhite,<sp/>mid<sp/>+<sp/>p,<sp/>dir,<sp/>1.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorWhite,<sp/>mid<sp/>-<sp/>p,<sp/>dir,<sp/>1.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>restLength<sp/>&gt;<sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>a2,<sp/>mid<sp/>+<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>a1,<sp/>mid<sp/>-<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>minLength<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>min<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorBlue,<sp/>mid<sp/>+<sp/>minLength<sp/>*<sp/>0.5f<sp/>*<sp/>dir,<sp/>dir,<sp/>2.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorBlue,<sp/>mid<sp/>-<sp/>minLength<sp/>*<sp/>0.5f<sp/>*<sp/>dir,<sp/>dir,<sp/>2.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxLength<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>max<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorRed,<sp/>mid<sp/>+<sp/>maxLength<sp/>*<sp/>0.5f<sp/>*<sp/>dir,<sp/>dir,<sp/>2.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/>colorRed,<sp/>mid<sp/>-<sp/>maxLength<sp/>*<sp/>0.5f<sp/>*<sp/>dir,<sp/>dir,<sp/>2.0f,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2930"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2931"><highlight class="comment">idAFConstraint_Spring::Save</highlight></codeline>
<codeline lineno="2932"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2933"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>kstretch<sp/>);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>kcompress<sp/>);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>damping<sp/>);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>restLength<sp/>);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>minLength<sp/>);</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>maxLength<sp/>);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2947"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2948"><highlight class="comment">idAFConstraint_Spring::Restore</highlight></codeline>
<codeline lineno="2949"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2950"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Spring::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor1<sp/>);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>anchor2<sp/>);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>kstretch<sp/>);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>kcompress<sp/>);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>damping<sp/>);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>restLength<sp/>);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>minLength<sp/>);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>maxLength<sp/>);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Contact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2971"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2972"><highlight class="comment">idAFConstraint_Contact::idAFConstraint_Contact</highlight></codeline>
<codeline lineno="2973"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2974"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal">idAFConstraint_Contact::idAFConstraint_Contact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;contact&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_CONTACT;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>fc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2985"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2986"><highlight class="comment">idAFConstraint_Contact::~idAFConstraint_Contact</highlight></codeline>
<codeline lineno="2987"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2988"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal">idAFConstraint_Contact::~idAFConstraint_Contact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fc;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2996"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2997"><highlight class="comment">idAFConstraint_Contact::Setup</highlight></codeline>
<codeline lineno="2998"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2999"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::Setup(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b2,<sp/><ref refid="structcontact_info__t" kindref="compound">contactInfo_t</ref><sp/>&amp;c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>p;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>v;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vel;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minBounceVelocity<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>b1<sp/>);</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>b2;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>contact<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>c.point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SubVec3(0)<sp/>=<sp/>c.normal;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SubVec3(1)<sp/>=<sp/>p.Cross(<sp/>c.normal<sp/>);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>1,<sp/>6,<sp/>v.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>v.SubVec3(0)<sp/>*<sp/>body1-&gt;GetLinearVelocity()<sp/>+<sp/>v.SubVec3(1)<sp/>*<sp/>body1-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>c.point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SubVec3(0)<sp/>=<sp/>-c.normal;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SubVec3(1)<sp/>=<sp/>p.Cross(<sp/>-c.normal<sp/>);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>1,<sp/>6,<sp/>v.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>+=<sp/>v.SubVec3(0)<sp/>*<sp/>body2-&gt;GetLinearVelocity()<sp/>+<sp/>v.SubVec3(1)<sp/>*<sp/>body2-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body1-&gt;GetBouncyness()<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>-vel<sp/>&gt;<sp/>minBounceVelocity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>body1-&gt;GetBouncyness()<sp/>*<sp/>vel;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>e[0]<sp/>=<sp/>CONTACT_LCP_EPSILON;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>idMath::INFINITY;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>boxConstraint<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3041"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3042"><highlight class="comment">idAFConstraint_Contact::Evaluate</highlight></codeline>
<codeline lineno="3043"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3044"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3050"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3051"><highlight class="comment">idAFConstraint_Contact::ApplyFriction</highlight></codeline>
<codeline lineno="3052"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3053"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r,<sp/>velocity,<sp/>normal,<sp/>dir1,<sp/>dir2;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>friction,<sp/>magnitude,<sp/>forceNumerator,<sp/>forceDenominator;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>impulse,<sp/>dv;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>body1-&gt;GetContactFriction();</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>&amp;&amp;<sp/>body2-&gt;GetContactFriction()<sp/>&lt;<sp/>friction<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>body2-&gt;GetContactFriction();</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>*=<sp/>physics-&gt;GetContactFrictionScale();</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>friction<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seperate<sp/>friction<sp/>per<sp/>contact<sp/>is<sp/>silly<sp/>but<sp/>it&apos;s<sp/>fast<sp/>and<sp/>often<sp/>looks<sp/>close<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useImpulseFriction.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.SetData(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dv.SetData(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>velocity<sp/>in<sp/>the<sp/>contact<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>contact.point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>body1-&gt;GetLinearVelocity()<sp/>+<sp/>body1-&gt;GetAngularVelocity().Cross(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>-=<sp/>contact.normal<sp/>*<sp/>velocity<sp/>*<sp/>contact.normal;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>normalized<sp/>direction<sp/>of<sp/>friction<sp/>and<sp/>magnitude<sp/>of<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>-velocity;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnitude<sp/>=<sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceNumerator<sp/>=<sp/>friction<sp/>*<sp/>magnitude;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceDenominator<sp/>=<sp/>body1-&gt;GetInverseMass()<sp/>+<sp/>(<sp/>(<sp/>body1-&gt;GetInverseWorldInertia()<sp/>*<sp/>r.Cross(<sp/>normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.SubVec3(0)<sp/>=<sp/>(forceNumerator<sp/>/<sp/>forceDenominator)<sp/>*<sp/>normal;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>impulse.SubVec3(0)<sp/>);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;InverseWorldSpatialInertiaMultiply(<sp/>dv,<sp/>impulse.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>velocity<sp/>with<sp/>friction<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;SetLinearVelocity(<sp/>body1-&gt;GetLinearVelocity()<sp/>+<sp/>dv.SubVec3(0)<sp/>);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body1-&gt;SetAngularVelocity(<sp/>body1-&gt;GetAngularVelocity()<sp/>+<sp/>dv.SubVec3(1)<sp/>);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___contact_friction" kindref="compound">idAFConstraint_ContactFriction</ref>;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>setup<sp/>each<sp/>frame<sp/>because<sp/>contact<sp/>constraints<sp/>are<sp/>re-used<sp/>for<sp/>different<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Setup(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fc-&gt;Add(<sp/>physics,<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3107"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3108"><highlight class="comment">idAFConstraint_Contact::Translate</highlight></codeline>
<codeline lineno="3109"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3110"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contact<sp/>should<sp/>never<sp/>be<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3117"><highlight class="comment">idAFConstraint_Contact::Rotate</highlight></codeline>
<codeline lineno="3118"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3119"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contact<sp/>should<sp/>never<sp/>be<sp/>rotated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3125"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3126"><highlight class="comment">idAFConstraint_Contact::GetCenter</highlight></codeline>
<codeline lineno="3127"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3128"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::GetCenter(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;center<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>contact.point;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3134"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3135"><highlight class="comment">idAFConstraint_Contact::DebugDraw</highlight></codeline>
<codeline lineno="3136"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Contact::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/>contact.normal.NormalVectors(<sp/>x,<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>contact.point,<sp/>contact.point<sp/>+<sp/>6.0f<sp/>*<sp/>contact.normal<sp/>);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>contact.point<sp/>-<sp/>2.0f<sp/>*<sp/>x,<sp/>contact.point<sp/>+<sp/>2.0f<sp/>*<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>contact.point<sp/>-<sp/>2.0f<sp/>*<sp/>y,<sp/>contact.point<sp/>+<sp/>2.0f<sp/>*<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_ContactFriction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3154"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3155"><highlight class="comment">idAFConstraint_ContactFriction::idAFConstraint_ContactFriction</highlight></codeline>
<codeline lineno="3156"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal">idAFConstraint_ContactFriction::idAFConstraint_ContactFriction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_FRICTION;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;contactFriction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3168"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3169"><highlight class="comment">idAFConstraint_ContactFriction::Setup</highlight></codeline>
<codeline lineno="3170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::Setup(<sp/><ref refid="classid_a_f_constraint___contact" kindref="compound">idAFConstraint_Contact</ref><sp/>*cc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cc<sp/>=<sp/>cc;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>cc-&gt;GetBody1();</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>cc-&gt;GetBody2();</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3179"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3180"><highlight class="comment">idAFConstraint_ContactFriction::Evaluate</highlight></codeline>
<codeline lineno="3181"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3182"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3188"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3189"><highlight class="comment">idAFConstraint_ContactFriction::ApplyFriction</highlight></codeline>
<codeline lineno="3190"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3197"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3198"><highlight class="comment">idAFConstraint_ContactFriction::Add</highlight></codeline>
<codeline lineno="3199"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3200"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r,<sp/>dir1,<sp/>dir2;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>friction;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRow;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>body1-&gt;GetContactFriction()<sp/>*<sp/>physics-&gt;GetContactFrictionScale();</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>body<sp/>only<sp/>has<sp/>friction<sp/>in<sp/>one<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body1-&gt;GetFrictionDirection(<sp/>dir1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>the<sp/>friction<sp/>direction<sp/>into<sp/>the<sp/>contact<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir1<sp/>-=<sp/>dir1<sp/>*<sp/>cc-&gt;GetContact().normal<sp/>*<sp/>dir1;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir1.Normalize();</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0)<sp/>=<sp/>dir1;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>dir1<sp/>);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SetSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>1,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0)<sp/>=<sp/>-dir1;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-dir1<sp/>);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2.SetSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>-friction;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>friction;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxConstraint<sp/>=<sp/>cc;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>two<sp/>friction<sp/>directions<sp/>orthogonal<sp/>to<sp/>contact<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;GetContact().normal.NormalVectors(<sp/>dir1,<sp/>dir2<sp/>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0)<sp/>=<sp/>dir1;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>dir1<sp/>);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(0)<sp/>=<sp/>dir2;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>dir2<sp/>);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.SetSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>c1[1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0)<sp/>=<sp/>-dir1;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-dir1<sp/>);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(0)<sp/>=<sp/>-dir2;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-dir2<sp/>);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2.SetSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>c2[1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2-&gt;GetContactFriction()<sp/>&lt;<sp/>friction<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>body2-&gt;GetContactFriction();</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>-friction;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>friction;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxConstraint<sp/>=<sp/>cc;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[1]<sp/>=<sp/>-friction;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[1]<sp/>=<sp/>friction;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body1-&gt;GetContactMotorDirection(<sp/>dir1<sp/>)<sp/>&amp;&amp;<sp/>body1-&gt;GetContactMotorForce()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>the<sp/>motor<sp/>force<sp/>direction<sp/>into<sp/>the<sp/>contact<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir1<sp/>-=<sp/>dir1<sp/>*<sp/>cc-&gt;GetContact().normal<sp/>*<sp/>dir1;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir1.Normalize();</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRow<sp/>=<sp/>J1.GetNumRows();</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.ChangeSize(<sp/>newRow+1,<sp/>J1.GetNumColumns()<sp/>);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(newRow).SubVec3(0)<sp/>=<sp/>-dir1;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(newRow).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-dir1<sp/>);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.ChangeSize(<sp/>newRow+1<sp/>);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[newRow]<sp/>=<sp/>body1-&gt;GetContactMotorVelocity();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>cc-&gt;GetContact().point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.ChangeSize(<sp/>newRow+1,<sp/>J2.GetNumColumns()<sp/>);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(newRow).SubVec3(0)<sp/>=<sp/>-dir1;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(newRow).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-dir1<sp/>);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2.ChangeSize(<sp/>newRow+1<sp/>);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[newRow]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[newRow]<sp/>=<sp/>-body1-&gt;GetContactMotorForce();</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[newRow]<sp/>=<sp/>body1-&gt;GetContactMotorForce();</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[newRow]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3313"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3314"><highlight class="comment">idAFConstraint_ContactFriction::Translate</highlight></codeline>
<codeline lineno="3315"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3316"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3321"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3322"><highlight class="comment">idAFConstraint_ContactFriction::Rotate</highlight></codeline>
<codeline lineno="3323"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3324"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3329"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3330"><highlight class="comment">idAFConstraint_ContactFriction::DebugDraw</highlight></codeline>
<codeline lineno="3331"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ContactFriction::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_ConeLimit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3344"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3345"><highlight class="comment">idAFConstraint_ConeLimit::idAFConstraint_ConeLimit</highlight></codeline>
<codeline lineno="3346"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3347"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal">idAFConstraint_ConeLimit::idAFConstraint_ConeLimit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_CONELIMIT;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;coneLimit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3357"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3358"><highlight class="comment">idAFConstraint_ConeLimit::Setup</highlight></codeline>
<codeline lineno="3359"><highlight class="comment"></highlight></codeline>
<codeline lineno="3360"><highlight class="comment"><sp/><sp/>the<sp/>coneAnchor<sp/>is<sp/>the<sp/>top<sp/>of<sp/>the<sp/>cone<sp/>in<sp/>body2<sp/>space</highlight></codeline>
<codeline lineno="3361"><highlight class="comment"><sp/><sp/>the<sp/>coneAxis<sp/>is<sp/>the<sp/>axis<sp/>of<sp/>the<sp/>cone<sp/>in<sp/>body2<sp/>space</highlight></codeline>
<codeline lineno="3362"><highlight class="comment"><sp/><sp/>the<sp/>coneAngle<sp/>is<sp/>the<sp/>angle<sp/>the<sp/>cone<sp/>hull<sp/>makes<sp/>at<sp/>the<sp/>top</highlight></codeline>
<codeline lineno="3363"><highlight class="comment"><sp/><sp/>the<sp/>body1Axis<sp/>is<sp/>the<sp/>axis<sp/>in<sp/>body1<sp/>space<sp/>that<sp/>should<sp/>stay<sp/>within<sp/>the<sp/>cone</highlight></codeline>
<codeline lineno="3364"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3365"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Setup(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;coneAnchor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;coneAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>coneAngle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body2<sp/>=<sp/>b2;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;coneAxis<sp/>=<sp/>coneAxis;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;coneAxis.Normalize();</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;coneAnchor<sp/>=<sp/>coneAnchor;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1Axis<sp/>=<sp/>body1Axis;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1Axis.Normalize();</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cosAngle<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>coneAngle<sp/>*<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sinHalfAngle<sp/>=<sp/>(float)<sp/>sin(<sp/>DEG2RAD(<sp/>coneAngle<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cosHalfAngle<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>coneAngle<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3380"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3381"><highlight class="comment">idAFConstraint_ConeLimit::SetAnchor</highlight></codeline>
<codeline lineno="3382"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3383"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;coneAnchor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;coneAnchor<sp/>=<sp/>coneAnchor;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3389"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3390"><highlight class="comment">idAFConstraint_ConeLimit::SetBody1Axis</highlight></codeline>
<codeline lineno="3391"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3392"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::SetBody1Axis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1Axis<sp/>=<sp/>body1Axis;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3398"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3399"><highlight class="comment">idAFConstraint_ConeLimit::Evaluate</highlight></codeline>
<codeline lineno="3400"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3401"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3407"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3408"><highlight class="comment">idAFConstraint_ConeLimit::ApplyFriction</highlight></codeline>
<codeline lineno="3409"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3410"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3415"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3416"><highlight class="comment">idAFConstraint_ConeLimit::Add</highlight></codeline>
<codeline lineno="3417"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3418"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>J1row,<sp/>J2row;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ax,<sp/>anchor,<sp/>body1ax,<sp/>normal,<sp/>coneVector,<sp/>p1,<sp/>p2;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/>q;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_skipLimits.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm.Zero();<sp/><sp/></highlight><highlight class="comment">//<sp/>constraint<sp/>exerts<sp/>no<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>coneAxis<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>coneAnchor<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>coneAxis;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>coneAnchor;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>body1ax<sp/>=<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>ax<sp/>*<sp/>body1ax;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>body1<sp/>axis<sp/>is<sp/>inside<sp/>the<sp/>cone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>&gt;<sp/>cosAngle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm.Zero();<sp/><sp/></highlight><highlight class="comment">//<sp/>constraint<sp/>exerts<sp/>no<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>inward<sp/>cone<sp/>normal<sp/>for<sp/>the<sp/>position<sp/>the<sp/>body1<sp/>axis<sp/>went<sp/>outside<sp/>the<sp/>cone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>body1ax.Cross(<sp/>ax<sp/>);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/>q.x<sp/>=<sp/>normal.x<sp/>*<sp/>sinHalfAngle;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>q.y<sp/>=<sp/>normal.y<sp/>*<sp/>sinHalfAngle;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/>q.z<sp/>=<sp/>normal.z<sp/>*<sp/>sinHalfAngle;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/>q.w<sp/>=<sp/>cosHalfAngle;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>coneVector<sp/>=<sp/>ax<sp/>*<sp/>q.ToMat3();</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>coneVector.Cross(<sp/>ax<sp/>).Cross(<sp/>coneVector<sp/>);</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>anchor<sp/>+<sp/>32.0f<sp/>*<sp/>coneVector<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/>J1row.SubVec3(0)<sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>J1row.SubVec3(1)<sp/>=<sp/>p1.Cross(<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>1,<sp/>6,<sp/>J1row.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>(invTimeStep<sp/>*<sp/>LIMIT_ERROR_REDUCTION)<sp/>*<sp/>(<sp/>normal<sp/>*<sp/>(32.0f<sp/>*<sp/>body1ax)<sp/>);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>anchor<sp/>+<sp/>32.0f<sp/>*<sp/>coneVector<sp/>-<sp/>master-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2row.SubVec3(0)<sp/>=<sp/>-normal;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2row.SubVec3(1)<sp/>=<sp/>p2.Cross(<sp/>-normal<sp/>);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>1,<sp/>6,<sp/>J2row.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>e[0]<sp/>=<sp/>LIMIT_LCP_EPSILON;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3493"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3494"><highlight class="comment">idAFConstraint_ConeLimit::Translate</highlight></codeline>
<codeline lineno="3495"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3496"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneAnchor<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3504"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3505"><highlight class="comment">idAFConstraint_ConeLimit::Rotate</highlight></codeline>
<codeline lineno="3506"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3507"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneAnchor<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coneAxis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3516"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3517"><highlight class="comment">idAFConstraint_ConeLimit::DebugDraw</highlight></codeline>
<codeline lineno="3518"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3519"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ax,<sp/>anchor,<sp/>x,<sp/>y,<sp/>z,<sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinAngle,<sp/>a,<sp/>size<sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>coneAxis<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>coneAnchor<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>coneAxis;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>coneAnchor;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>body1<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>anchor,<sp/>anchor<sp/>+<sp/>size<sp/>*<sp/>(body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis())<sp/>);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>cone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>ax.NormalVectors(<sp/>x,<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>sinAngle<sp/>=<sp/>idMath::Sqrt(<sp/>1.0f<sp/>-<sp/>cosAngle<sp/>*<sp/>cosAngle<sp/>);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>size<sp/>*<sp/>sinAngle;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>*=<sp/>size<sp/>*<sp/>sinAngle;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>anchor<sp/>+<sp/>ax<sp/>*<sp/>size<sp/>*<sp/>cosAngle;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>x<sp/>+<sp/>z;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>=<sp/>0.0f;<sp/>a<sp/>&lt;<sp/>360.0f;<sp/>a<sp/>+=<sp/>45.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>x<sp/>*<sp/>(float)<sp/>cos(<sp/>DEG2RAD(a<sp/>+<sp/>45.0f)<sp/>)<sp/>+<sp/>y<sp/>*<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>sin(<sp/>DEG2RAD(a<sp/>+<sp/>45.0f)<sp/>)<sp/>+<sp/>z;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorMagenta,<sp/>anchor,<sp/>start<sp/>);</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorMagenta,<sp/>start,<sp/>end<sp/>);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3555"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3556"><highlight class="comment">idAFConstraint_ConeLimit::Save</highlight></codeline>
<codeline lineno="3557"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint___cone_limit" kindref="compound">idAFConstraint_ConeLimit</ref>::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>coneAnchor<sp/>);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>coneAxis<sp/>);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>body1Axis<sp/>);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosAngle<sp/>);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>sinHalfAngle<sp/>);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosHalfAngle<sp/>);</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>epsilon<sp/>);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3571"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3572"><highlight class="comment">idAFConstraint_ConeLimit::Restore</highlight></codeline>
<codeline lineno="3573"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3574"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_ConeLimit::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>coneAnchor<sp/>);</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>coneAxis<sp/>);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>body1Axis<sp/>);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosAngle<sp/>);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>sinHalfAngle<sp/>);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosHalfAngle<sp/>);</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>epsilon<sp/>);</highlight></codeline>
<codeline lineno="3584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_PyramidLimit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3594"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3595"><highlight class="comment">idAFConstraint_PyramidLimit::idAFConstraint_PyramidLimit</highlight></codeline>
<codeline lineno="3596"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3597"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal">idAFConstraint_PyramidLimit::idAFConstraint_PyramidLimit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_PYRAMIDLIMIT;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;pyramidLimit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3607"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3608"><highlight class="comment">idAFConstraint_PyramidLimit::Setup</highlight></codeline>
<codeline lineno="3609"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3610"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Setup(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b1,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pyramidAnchor,</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pyramidAxis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;baseAxis,</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pyramidAngle1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pyramidAngle2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>b2;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>the<sp/>base<sp/>and<sp/>make<sp/>sure<sp/>the<sp/>basis<sp/>is<sp/>orthonormal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[2]<sp/>=<sp/>pyramidAxis;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[2].Normalize();</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[0]<sp/>=<sp/>baseAxis;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[0]<sp/>-=<sp/>pyramidBasis[2]<sp/>*<sp/>baseAxis<sp/>*<sp/>pyramidBasis[2];</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[0].Normalize();</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidBasis[1]<sp/>=<sp/>pyramidBasis[0].Cross(<sp/>pyramidBasis[2]<sp/>);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pyramid<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pyramidAnchor<sp/>=<sp/>pyramidAnchor;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>angles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/>cosAngle[0]<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>pyramidAngle1<sp/>*<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>cosAngle[1]<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>pyramidAngle2<sp/>*<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/>sinHalfAngle[0]<sp/>=<sp/>(float)<sp/>sin(<sp/>DEG2RAD(<sp/>pyramidAngle1<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>sinHalfAngle[1]<sp/>=<sp/>(float)<sp/>sin(<sp/>DEG2RAD(<sp/>pyramidAngle2<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>cosHalfAngle[0]<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>pyramidAngle1<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>cosHalfAngle[1]<sp/>=<sp/>(float)<sp/>cos(<sp/>DEG2RAD(<sp/>pyramidAngle2<sp/>*<sp/>0.25f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1Axis<sp/>=<sp/>body1Axis;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3637"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3638"><highlight class="comment">idAFConstraint_PyramidLimit::SetAnchor</highlight></codeline>
<codeline lineno="3639"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3640"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::SetAnchor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pyramidAnchor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pyramidAnchor<sp/>=<sp/>pyramidAnchor;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3646"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3647"><highlight class="comment">idAFConstraint_PyramidLimit::SetBody1Axis</highlight></codeline>
<codeline lineno="3648"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3649"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::SetBody1Axis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;body1Axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;body1Axis<sp/>=<sp/>body1Axis;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3655"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3656"><highlight class="comment">idAFConstraint_PyramidLimit::Evaluate</highlight></codeline>
<codeline lineno="3657"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3658"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3664"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3665"><highlight class="comment">idAFConstraint_PyramidLimit::ApplyFriction</highlight></codeline>
<codeline lineno="3666"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3667"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3672"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3673"><highlight class="comment">idAFConstraint_PyramidLimit::Add</highlight></codeline>
<codeline lineno="3674"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3675"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Add(<sp/><ref refid="classid_physics___a_f" kindref="compound">idPhysics_AF</ref><sp/>*phys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a[2];</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>J1row,<sp/>J2row;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>worldBase;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>anchor,<sp/>body1ax,<sp/>ax[2],<sp/>v,<sp/>normal,<sp/>pyramidVector,<sp/>p1,<sp/>p2;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/>q;</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_skipLimits.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm.Zero();<sp/><sp/></highlight><highlight class="comment">//<sp/>constraint<sp/>exerts<sp/>no<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[0]<sp/>=<sp/>pyramidBasis[0]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[1]<sp/>=<sp/>pyramidBasis[1]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[2]<sp/>=<sp/>pyramidBasis[2]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>pyramidAnchor<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase<sp/>=<sp/>pyramidBasis;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>pyramidAnchor;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>body1ax<sp/>=<sp/>body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i]<sp/>=<sp/>body1ax<sp/>-<sp/>worldBase[!i]<sp/>*<sp/>body1ax<sp/>*<sp/>worldBase[!i];</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i].Normalize();</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>worldBase[2]<sp/>*<sp/>ax[i];</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>body1<sp/>axis<sp/>is<sp/>inside<sp/>the<sp/>pyramid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a[0]<sp/>&gt;<sp/>cosAngle[0]<sp/>&amp;&amp;<sp/>a[1]<sp/>&gt;<sp/>cosAngle[1]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm.Zero();<sp/><sp/></highlight><highlight class="comment">//<sp/>constraint<sp/>exerts<sp/>no<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>inward<sp/>pyramid<sp/>normal<sp/>for<sp/>the<sp/>position<sp/>the<sp/>body1<sp/>axis<sp/>went<sp/>outside<sp/>the<sp/>pyramid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramidVector<sp/>=<sp/>worldBase[2];</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a[i]<sp/>&lt;=<sp/>cosAngle[i]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>ax[i].Cross(<sp/>worldBase[2]<sp/>);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.Normalize();</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.x<sp/>=<sp/>v.x<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.y<sp/>=<sp/>v.y<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.z<sp/>=<sp/>v.z<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.w<sp/>=<sp/>cosHalfAngle[i];</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidVector<sp/>*=<sp/>q.ToMat3();</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>pyramidVector.Cross(<sp/>worldBase[2]<sp/>).Cross(<sp/>pyramidVector<sp/>);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>anchor<sp/>+<sp/>32.0f<sp/>*<sp/>pyramidVector<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>J1row.SubVec3(0)<sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/>J1row.SubVec3(1)<sp/>=<sp/>p1.Cross(<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.Set(<sp/>1,<sp/>6,<sp/>J1row.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>(invTimeStep<sp/>*<sp/>LIMIT_ERROR_REDUCTION)<sp/>*<sp/>(<sp/>normal<sp/>*<sp/>(32.0f<sp/>*<sp/>body1ax)<sp/>);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>anchor<sp/>+<sp/>32.0f<sp/>*<sp/>pyramidVector<sp/>-<sp/>master-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2row.SubVec3(0)<sp/>=<sp/>-normal;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2row.SubVec3(1)<sp/>=<sp/>p2.Cross(<sp/>-normal<sp/>);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.Set(<sp/>1,<sp/>6,<sp/>J2row.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>e[0]<sp/>=<sp/>LIMIT_LCP_EPSILON;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;AddFrameConstraint(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3762"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3763"><highlight class="comment">idAFConstraint_PyramidLimit::Translate</highlight></codeline>
<codeline lineno="3764"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3765"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidAnchor<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3773"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3774"><highlight class="comment">idAFConstraint_PyramidLimit::Rotate</highlight></codeline>
<codeline lineno="3775"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3776"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidAnchor<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidBasis[0]<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidBasis[1]<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramidBasis[2]<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3787"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3788"><highlight class="comment">idAFConstraint_PyramidLimit::DebugDraw</highlight></codeline>
<codeline lineno="3789"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3790"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>anchor,<sp/>dir,<sp/>p[4];</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>worldBase,<sp/>m[2];</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/>q;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*master;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>body2<sp/>?<sp/>body2<sp/>:<sp/>physics-&gt;GetMasterBody();</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[0]<sp/>=<sp/>pyramidBasis[0]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[1]<sp/>=<sp/>pyramidBasis[1]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase[2]<sp/>=<sp/>pyramidBasis[2]<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>master-&gt;GetWorldOrigin()<sp/>+<sp/>pyramidAnchor<sp/>*<sp/>master-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldBase<sp/>=<sp/>pyramidBasis;</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor<sp/>=<sp/>pyramidAnchor;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>body1<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorGreen,<sp/>anchor,<sp/>anchor<sp/>+<sp/>size<sp/>*<sp/>(body1Axis<sp/>*<sp/>body1-&gt;GetWorldAxis())<sp/>);</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>pyramid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.x<sp/>=<sp/>worldBase[!i].x<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.y<sp/>=<sp/>worldBase[!i].y<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.z<sp/>=<sp/>worldBase[!i].z<sp/>*<sp/>sinHalfAngle[i];</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.w<sp/>=<sp/>cosHalfAngle[i];</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i]<sp/>=<sp/>q.ToMat3();</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>worldBase[2]<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>anchor<sp/>+<sp/>m[0]<sp/>*<sp/>(m[1]<sp/>*<sp/>dir);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>anchor<sp/>+<sp/>m[0]<sp/>*<sp/>(m[1].Transpose()<sp/>*<sp/>dir);</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>anchor<sp/>+<sp/>m[0].Transpose()<sp/>*<sp/>(m[1].Transpose()<sp/>*<sp/>dir);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>anchor<sp/>+<sp/>m[0].Transpose()<sp/>*<sp/>(m[1]<sp/>*<sp/>dir);</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorMagenta,<sp/>anchor,<sp/>p[i]<sp/>);</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorMagenta,<sp/>p[i],<sp/>p[(i+1)&amp;3]<sp/>);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3837"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3838"><highlight class="comment">idAFConstraint_PyramidLimit::Save</highlight></codeline>
<codeline lineno="3839"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3840"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>pyramidAnchor<sp/>);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>pyramidBasis<sp/>);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>body1Axis<sp/>);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>sinHalfAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>sinHalfAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosHalfAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>cosHalfAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>epsilon<sp/>);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3856"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3857"><highlight class="comment">idAFConstraint_PyramidLimit::Restore</highlight></codeline>
<codeline lineno="3858"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3859"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_PyramidLimit::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>idAFConstraint::Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>pyramidAnchor<sp/>);</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>pyramidBasis<sp/>);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>body1Axis<sp/>);</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>sinHalfAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>sinHalfAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosHalfAngle[0]<sp/>);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>cosHalfAngle[1]<sp/>);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>epsilon<sp/>);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFConstraint_Suspension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3882"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3883"><highlight class="comment">idAFConstraint_Suspension::idAFConstraint_Suspension</highlight></codeline>
<codeline lineno="3884"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3885"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal">idAFConstraint_Suspension::idAFConstraint_Suspension(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>CONSTRAINT_SUSPENSION;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;suspension&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSize(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.allowPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.frameConstraint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/>localOrigin.Zero();</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>localAxis.Identity();</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionUp<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionDown<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionKCompress<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionDamping<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>steerAngle<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/>motorEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>motorForce<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/>motorVelocity<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>wheelModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;trace,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>trace<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon<sp/>=<sp/>LCP_EPSILON;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3910"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3911"><highlight class="comment">idAFConstraint_Suspension::Setup</highlight></codeline>
<codeline lineno="3912"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3913"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::Setup(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis,<sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/>body1<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/>body2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/>localOrigin<sp/>=<sp/>(<sp/>origin<sp/>-<sp/>body-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/>localAxis<sp/>=<sp/>axis<sp/>*<sp/>body-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/>wheelModel<sp/>=<sp/>clipModel;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3924"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3925"><highlight class="comment">idAFConstraint_Suspension::SetSuspension</highlight></codeline>
<codeline lineno="3926"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3927"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::SetSuspension(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>up,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>down,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionUp<sp/>=<sp/>up;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionDown<sp/>=<sp/>down;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionKCompress<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionDamping<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/>friction<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3937"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3938"><highlight class="comment">idAFConstraint_Suspension::GetWheelOrigin</highlight></codeline>
<codeline lineno="3939"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3940"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFConstraint_Suspension::GetWheelOrigin(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>wheelOffset<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3946"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3947"><highlight class="comment">idAFConstraint_Suspension::Evaluate</highlight></codeline>
<codeline lineno="3948"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3949"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::Evaluate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocity,<sp/>suspensionLength,<sp/>springLength,<sp/>compression,<sp/>dampingForce,<sp/>springForce;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/>start,<sp/>end,<sp/>vel1,<sp/>vel2,<sp/>springDir,<sp/>r,<sp/>frictionDir,<sp/>motorDir;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>localAxis<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>body1-&gt;GetWorldOrigin()<sp/>+<sp/>localOrigin<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>origin<sp/>+<sp/>suspensionUp<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>origin<sp/>-<sp/>suspensionDown<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetVec(<sp/>axis[2]<sp/>);</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetAngle(<sp/>steerAngle<sp/>);</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.Translation(<sp/>trace,<sp/>start,<sp/>end,<sp/>wheelModel,<sp/>axis,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>wheelOffset<sp/>=<sp/>(<sp/>trace.endpos<sp/>-<sp/>body1-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>body1-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&gt;=<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>0,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>0,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>and<sp/>add<sp/>spring<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>vel1<sp/>=<sp/>body1-&gt;GetPointVelocity(<sp/>start<sp/>);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel2<sp/>=<sp/>body2-&gt;GetPointVelocity(<sp/>trace.c.point<sp/>);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel2.Zero();</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/>suspensionLength<sp/>=<sp/>suspensionUp<sp/>+<sp/>suspensionDown;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/>springDir<sp/>=<sp/>trace.endpos<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/>springLength<sp/>=<sp/>trace.fraction<sp/>*<sp/>suspensionLength;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/>dampingForce<sp/>=<sp/>suspensionDamping<sp/>*<sp/>idMath::Fabs(<sp/>(<sp/>vel2<sp/>-<sp/>vel1<sp/>)<sp/>*<sp/>springDir<sp/>)<sp/>/<sp/>(<sp/>1.0f<sp/>+<sp/>springLength<sp/>*<sp/>springLength<sp/>);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/>compression<sp/>=<sp/>suspensionLength<sp/>-<sp/>springLength;</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>springForce<sp/>=<sp/>compression<sp/>*<sp/>compression<sp/>*<sp/>suspensionKCompress<sp/>-<sp/>dampingForce;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(0)<sp/>=<sp/>trace.c.normal;</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>trace.c.normal<sp/>);</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.SetSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>J1.SubVec6(0).SubVec3(0)<sp/>*<sp/>body1-&gt;GetLinearVelocity()<sp/>+<sp/>J1.SubVec6(0).SubVec3(1)<sp/>*<sp/>body1-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SetSize(<sp/>2,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(0)<sp/>=<sp/>-trace.c.normal;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(0).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-trace.c.normal<sp/>);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2.SetSize(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>+=<sp/>J2.SubVec6(0).SubVec3(0)<sp/>*<sp/>body2-&gt;GetLinearVelocity()<sp/>+<sp/>J2.SubVec6(0).SubVec3(1)<sp/>*<sp/>body2-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[0]<sp/>=<sp/>-compression;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+<sp/>0.5f<sp/>*<sp/>-velocity;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/>e[0]<sp/>=<sp/>1e-4f;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[0]<sp/>=<sp/>springForce;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/>boxConstraint<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>the<sp/>friction<sp/>direction<sp/>into<sp/>the<sp/>contact<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/>frictionDir<sp/>=<sp/>axis[1]<sp/>-<sp/>axis[1]<sp/>*<sp/>trace.c.normal<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/>frictionDir.Normalize();</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(0)<sp/>=<sp/>frictionDir;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>J1.SubVec6(1).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>frictionDir<sp/>);</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(0)<sp/>=<sp/>-frictionDir;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(1).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-frictionDir<sp/>);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>lo[1]<sp/>=<sp/>-friction<sp/>*<sp/>physics-&gt;GetContactFrictionScale();</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/>hi[1]<sp/>=<sp/>friction<sp/>*<sp/>physics-&gt;GetContactFrictionScale();</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>boxConstraint<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>motorEnabled<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>the<sp/>motor<sp/>force<sp/>direction<sp/>into<sp/>the<sp/>contact<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motorDir<sp/>=<sp/>axis[0]<sp/>-<sp/>axis[0]<sp/>*<sp/>trace.c.normal<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motorDir.Normalize();</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body1-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.ChangeSize(<sp/>3,<sp/>J1.GetNumColumns()<sp/>);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(2).SubVec3(0)<sp/>=<sp/>-motorDir;</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J1.SubVec6(2).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-motorDir<sp/>);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1.ChangeSize(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[2]<sp/>=<sp/>motorVelocity;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>trace.c.point<sp/>-<sp/>body2-&gt;GetWorldOrigin();</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.ChangeSize(<sp/>3,<sp/>J2.GetNumColumns()<sp/>);</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(2).SubVec3(0)<sp/>=<sp/>-motorDir;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2.SubVec6(2).SubVec3(1)<sp/>=<sp/>r.Cross(<sp/>-motorDir<sp/>);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2.ChangeSize(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[2]<sp/>=<sp/>-motorForce;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[2]<sp/>=<sp/>motorForce;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[2]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4074"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4075"><highlight class="comment">idAFConstraint_Suspension::ApplyFriction</highlight></codeline>
<codeline lineno="4076"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4077"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4083"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4084"><highlight class="comment">idAFConstraint_Suspension::Translate</highlight></codeline>
<codeline lineno="4085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4086"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4091"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4092"><highlight class="comment">idAFConstraint_Suspension::Rotate</highlight></codeline>
<codeline lineno="4093"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4094"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4099"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4100"><highlight class="comment">idAFConstraint_Suspension::DebugDraw</highlight></codeline>
<codeline lineno="4101"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFConstraint_Suspension::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>localAxis<sp/>*<sp/>body1-&gt;GetWorldAxis();</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetVec(<sp/>axis[2]<sp/>);</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetAngle(<sp/>steerAngle<sp/>);</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&lt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>trace.c.point;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>origin,<sp/>origin<sp/>+<sp/>6.0f<sp/>*<sp/>axis[2]<sp/>);</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>origin<sp/>-<sp/>4.0f<sp/>*<sp/>axis[0],<sp/>origin<sp/>+<sp/>4.0f<sp/>*<sp/>axis[0]<sp/>);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/>colorWhite,<sp/>origin<sp/>-<sp/>2.0f<sp/>*<sp/>axis[1],<sp/>origin<sp/>+<sp/>2.0f<sp/>*<sp/>axis[1]<sp/>);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFBody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4132"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4133"><highlight class="comment">idAFBody::idAFBody</highlight></codeline>
<codeline lineno="4134"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4135"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal">idAFBody::idAFBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="4138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4141"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4142"><highlight class="comment">idAFBody::idAFBody</highlight></codeline>
<codeline lineno="4143"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4144"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal">idAFBody::idAFBody(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;name,<sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>density<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>clipModel<sp/>);</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>clipModel-&gt;IsTraceModel()<sp/>);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;clipModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/>SetClipModel(<sp/>clipModel<sp/>);</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDensity(<sp/>density<sp/>);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;worldOrigin<sp/>=<sp/>clipModel-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;worldAxis<sp/>=<sp/>clipModel-&gt;GetAxis();</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/>=<sp/>*current;</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4165"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4166"><highlight class="comment">idAFBody::~idAFBody</highlight></codeline>
<codeline lineno="4167"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4168"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal">idAFBody::~idAFBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clipModel;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4174"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4175"><highlight class="comment">idAFBody::Init</highlight></codeline>
<codeline lineno="4176"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;noname&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryConstraint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFriction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>angularFriction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFriction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>bouncyness<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>clipMask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>frictionDir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec3_zero;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>contactMotorDir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec3_zero;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>contactMotorVelocity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>contactMotorForce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>invMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/>centerOfMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec3_zero;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaTensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseInertiaTensor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;state[0];</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;state[1];</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;worldOrigin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec3_zero;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;worldAxis<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;spatialVelocity<sp/><sp/><sp/><sp/>=<sp/>vec6_zero;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;externalForce<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec6_zero;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>*next<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>*current;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>*current;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/>atRestOrigin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vec3_zero;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/>atRestAxis<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>s.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/>totalForce.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>auxForce.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>acceleration.Zero(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/>response<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>responseIndex<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/>numResponses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>maxAuxiliaryIndex<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSubTreeAuxiliaryIndex<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;fl,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.selfCollision<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.isZero<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4231"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4232"><highlight class="comment">idAFBody::SetClipModel</highlight></codeline>
<codeline lineno="4233"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4234"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetClipModel(<sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;clipModel<sp/>&amp;&amp;<sp/>this-&gt;clipModel<sp/>!=<sp/>clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;clipModel;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;clipModel<sp/>=<sp/>clipModel;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4243"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4244"><highlight class="comment">idAFBody::SetFriction</highlight></codeline>
<codeline lineno="4245"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4246"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>linear,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angular,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>contact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>linear<sp/>&lt;<sp/>0.0f<sp/>||<sp/>linear<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>&lt;<sp/>0.0f<sp/>||<sp/>angular<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFBody::SetFriction:<sp/>friction<sp/>out<sp/>of<sp/>range,<sp/>linear<sp/>=<sp/>%.1f,<sp/>angular<sp/>=<sp/>%.1f,<sp/>contact<sp/>=<sp/>%.1f&quot;</highlight><highlight class="normal">,<sp/>linear,<sp/>angular,<sp/>contact<sp/>);</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFriction<sp/>=<sp/>linear;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/>angularFriction<sp/>=<sp/>angular;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFriction<sp/>=<sp/>contact;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4260"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4261"><highlight class="comment">idAFBody::SetBouncyness</highlight></codeline>
<codeline lineno="4262"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4263"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetBouncyness(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bounce<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bounce<sp/>&lt;<sp/>0.0f<sp/>||<sp/>bounce<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFBody::SetBouncyness:<sp/>bouncyness<sp/>out<sp/>of<sp/>range,<sp/>bounce<sp/>=<sp/>%.1f&quot;</highlight><highlight class="normal">,<sp/>bounce<sp/>);</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/>bouncyness<sp/>=<sp/>bounce;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4273"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4274"><highlight class="comment">idAFBody::SetDensity</highlight></codeline>
<codeline lineno="4275"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4276"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetDensity(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>density,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;inertiaScale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>body<sp/>mass<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;GetMassProperties(<sp/>density,<sp/>mass,<sp/>centerOfMass,<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mass<sp/>&lt;=<sp/>0.0f<sp/>||<sp/>FLOAT_IS_NAN(<sp/>mass<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFBody::SetDensity:<sp/>invalid<sp/>mass<sp/>for<sp/>body<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centerOfMass.Zero();</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor.Identity();</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>center<sp/>of<sp/>mass<sp/>is<sp/>at<sp/>the<sp/>body<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!centerOfMass.Compare(<sp/>vec3_origin,<sp/>CENTER_OF_MASS_EPSILON<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFBody::SetDentity:<sp/>center<sp/>of<sp/>mass<sp/>not<sp/>at<sp/>origin<sp/>for<sp/>body<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/>centerOfMass.Zero();</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>inverse<sp/>mass<sp/>and<sp/>inverse<sp/>inertia<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>invMass<sp/>=<sp/>1.0f<sp/>/<sp/>mass;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inertiaScale<sp/>!=<sp/>mat3_identity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor<sp/>*=<sp/>inertiaScale;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inertiaTensor.IsDiagonal(<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor[0][1]<sp/>=<sp/>inertiaTensor[0][2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor[1][0]<sp/>=<sp/>inertiaTensor[1][2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor[2][0]<sp/>=<sp/>inertiaTensor[2][1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseInertiaTensor.Identity();</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseInertiaTensor[0][0]<sp/>=<sp/>1.0f<sp/>/<sp/>inertiaTensor[0][0];</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseInertiaTensor[1][1]<sp/>=<sp/>1.0f<sp/>/<sp/>inertiaTensor[1][1];</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseInertiaTensor[2][2]<sp/>=<sp/>1.0f<sp/>/<sp/>inertiaTensor[2][2];</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseInertiaTensor<sp/>=<sp/>inertiaTensor.Inverse();</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4317"><highlight class="comment">idAFBody::SetFrictionDirection</highlight></codeline>
<codeline lineno="4318"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4319"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetFrictionDirection(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/>frictionDir<sp/>=<sp/>dir<sp/>*<sp/>current-&gt;worldAxis.Transpose();</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.useFrictionDir<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4326"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4327"><highlight class="comment">idAFBody::GetFrictionDirection</highlight></codeline>
<codeline lineno="4328"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4329"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFBody::GetFrictionDirection(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl.useFrictionDir<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>frictionDir<sp/>*<sp/>current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4339"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4340"><highlight class="comment">idAFBody::SetContactMotorDirection</highlight></codeline>
<codeline lineno="4341"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4342"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::SetContactMotorDirection(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>contactMotorDir<sp/>=<sp/>dir<sp/>*<sp/>current-&gt;worldAxis.Transpose();</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.useContactMotorDir<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4349"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4350"><highlight class="comment">idAFBody::GetContactMotorDirection</highlight></codeline>
<codeline lineno="4351"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4352"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAFBody::GetContactMotorDirection(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl.useContactMotorDir<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>contactMotorDir<sp/>*<sp/>current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4362"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4363"><highlight class="comment">idAFBody::GetPointVelocity</highlight></codeline>
<codeline lineno="4364"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4365"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idAFBody::GetPointVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r<sp/>=<sp/>point<sp/>-<sp/>current-&gt;worldOrigin;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current-&gt;spatialVelocity.SubVec3(0)<sp/>+<sp/>current-&gt;spatialVelocity.SubVec3(1).Cross(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="4369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4372"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4373"><highlight class="comment">idAFBody::AddForce</highlight></codeline>
<codeline lineno="4374"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4375"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::AddForce(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;externalForce.SubVec3(0)<sp/>+=<sp/>force;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;externalForce.SubVec3(1)<sp/>+=<sp/>(point<sp/>-<sp/>current-&gt;worldOrigin).Cross(<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="4379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4382"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4383"><highlight class="comment">idAFBody::InverseWorldSpatialInertiaMultiply</highlight></codeline>
<codeline lineno="4384"><highlight class="comment"></highlight></codeline>
<codeline lineno="4385"><highlight class="comment"><sp/><sp/>dst<sp/>=<sp/>this-&gt;inverseWorldSpatialInertia<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="4386"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4387"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::InverseWorldSpatialInertiaMultiply(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mPtr<sp/>=<sp/>inverseWorldSpatialInertia.ToFloatPtr();</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*vPtr<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*dstPtr<sp/>=<sp/>dst.ToFloatPtr();</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl.spatialInertiaSparse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[0]<sp/>=<sp/>mPtr[0*6+0]<sp/>*<sp/>vPtr[0];</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[1]<sp/>=<sp/>mPtr[1*6+1]<sp/>*<sp/>vPtr[1];</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[2]<sp/>=<sp/>mPtr[2*6+2]<sp/>*<sp/>vPtr[2];</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[3]<sp/>=<sp/>mPtr[3*6+3]<sp/>*<sp/>vPtr[3]<sp/>+<sp/>mPtr[3*6+4]<sp/>*<sp/>vPtr[4]<sp/>+<sp/>mPtr[3*6+5]<sp/>*<sp/>vPtr[5];</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[4]<sp/>=<sp/>mPtr[4*6+3]<sp/>*<sp/>vPtr[3]<sp/>+<sp/>mPtr[4*6+4]<sp/>*<sp/>vPtr[4]<sp/>+<sp/>mPtr[4*6+5]<sp/>*<sp/>vPtr[5];</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[5]<sp/>=<sp/>mPtr[5*6+3]<sp/>*<sp/>vPtr[3]<sp/>+<sp/>mPtr[5*6+4]<sp/>*<sp/>vPtr[4]<sp/>+<sp/>mPtr[5*6+5]<sp/>*<sp/>vPtr[5];</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;spatial<sp/>inertia<sp/>is<sp/>not<sp/>sparse<sp/>for<sp/>body<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4406"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4407"><highlight class="comment">idAFBody::Save</highlight></codeline>
<codeline lineno="4408"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4409"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteInt(<sp/>clipMask<sp/>);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>frictionDir<sp/>);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>contactMotorDir<sp/>);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactMotorVelocity<sp/>);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactMotorForce<sp/>);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>mass<sp/>);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>invMass<sp/>);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>centerOfMass<sp/>);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>inverseInertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>current-&gt;worldAxis<sp/>);</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec6(<sp/>current-&gt;spatialVelocity<sp/>);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec6(<sp/>current-&gt;externalForce<sp/>);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec3(<sp/>atRestOrigin<sp/>);</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteMat3(<sp/>atRestAxis<sp/>);</highlight></codeline>
<codeline lineno="4433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4436"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4437"><highlight class="comment">idAFBody::Restore</highlight></codeline>
<codeline lineno="4438"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4439"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFBody::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadInt(<sp/>clipMask<sp/>);</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>frictionDir<sp/>);</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>contactMotorDir<sp/>);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactMotorVelocity<sp/>);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactMotorForce<sp/>);</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>mass<sp/>);</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>invMass<sp/>);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>centerOfMass<sp/>);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>inverseInertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>current-&gt;worldAxis<sp/>);</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec6(<sp/>current-&gt;spatialVelocity<sp/>);</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec6(<sp/>current-&gt;externalForce<sp/>);</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec3(<sp/>atRestOrigin<sp/>);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadMat3(<sp/>atRestAxis<sp/>);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idAFTree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MrE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4474"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4475"><highlight class="comment">idAFTree::Factor</highlight></codeline>
<codeline lineno="4476"><highlight class="comment"></highlight></codeline>
<codeline lineno="4477"><highlight class="comment"><sp/><sp/>factor<sp/>matrix<sp/>for<sp/>the<sp/>primary<sp/>constraints<sp/>in<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="4478"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4479"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::Factor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*child;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>childI;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>childI.SetData(<sp/>6,<sp/>6,<sp/>MATX_ALLOCA(<sp/>6<sp/>*<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>leaves<sp/>up<sp/>towards<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>sortedBodies.Num()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;children.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[j]-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>child-&gt;I<sp/>=<sp/>-<sp/>child-&gt;body1-&gt;J.Transpose()<sp/>*<sp/>child-&gt;body1-&gt;I<sp/>*<sp/>child-&gt;body1-&gt;J;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childI.SetSize(<sp/>child-&gt;J1.GetNumRows(),<sp/>child-&gt;J1.GetNumRows()<sp/>);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;body1-&gt;J.TransposeMultiply(<sp/>child-&gt;body1-&gt;I<sp/>).Multiply(<sp/>childI,<sp/>child-&gt;body1-&gt;J<sp/>);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childI.Negate();</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;invI<sp/>=<sp/>childI;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!child-&gt;invI.InverseFastSelf()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFTree::Factor:<sp/>couldn&apos;t<sp/>invert<sp/>%dx%d<sp/>matrix<sp/>for<sp/>constraint<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;invI.GetNumRows(),<sp/>child-&gt;invI.GetNumColumns(),<sp/>child-&gt;GetName().c_str()<sp/>);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J<sp/>=<sp/>child-&gt;invI<sp/>*<sp/>child-&gt;J;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;I<sp/>-=<sp/>child-&gt;J.TransposeMultiply(<sp/>childI<sp/>)<sp/>*<sp/>child-&gt;J;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;invI<sp/>=<sp/>body-&gt;I;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;invI.InverseFastSelf()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAFTree::Factor:<sp/>couldn&apos;t<sp/>invert<sp/>%dx%d<sp/>matrix<sp/>for<sp/>body<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;invI.GetNumRows(),<sp/>child-&gt;invI.GetNumColumns(),<sp/>body-&gt;GetName().c_str()<sp/>);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;J<sp/>=<sp/>body-&gt;invI<sp/>*<sp/>body-&gt;J;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;J<sp/>=<sp/>body-&gt;inverseWorldSpatialInertia<sp/>*<sp/>body-&gt;J;</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4529"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4530"><highlight class="comment">idAFTree::Solve</highlight></codeline>
<codeline lineno="4531"><highlight class="comment"></highlight></codeline>
<codeline lineno="4532"><highlight class="comment"><sp/><sp/>solve<sp/>for<sp/>primary<sp/>constraints<sp/>in<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="4533"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4534"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::Solve(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auxiliaryIndex<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/>*child;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*primaryConstraint;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>leaves<sp/>up<sp/>towards<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>sortedBodies.Num()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[j];</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>child-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!child-&gt;fl.isZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J.TransposeMultiplySub(<sp/>primaryConstraint-&gt;s,<sp/>child-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!primaryConstraint-&gt;fl.isZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J.TransposeMultiplySub(<sp/>body-&gt;s,<sp/>primaryConstraint-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSymmetry<sp/>=<sp/>af_useSymmetry.GetBool();</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>root<sp/>down<sp/>towards<sp/>the<sp/>leaves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useSymmetry<sp/>&amp;&amp;<sp/>body-&gt;parent-&gt;maxSubTreeAuxiliaryIndex<sp/>&lt;<sp/>auxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!primaryConstraint-&gt;fl.isZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;s<sp/>=<sp/>primaryConstraint-&gt;invI<sp/>*<sp/>primaryConstraint-&gt;s;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J.MultiplySub(<sp/>primaryConstraint-&gt;s,<sp/>primaryConstraint-&gt;body2-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;lm<sp/>=<sp/>primaryConstraint-&gt;s;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useSymmetry<sp/>&amp;&amp;<sp/>body-&gt;maxSubTreeAuxiliaryIndex<sp/>&lt;<sp/>auxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;children.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;fl.isZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;s<sp/>=<sp/>body-&gt;invI<sp/>*<sp/>body-&gt;s;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;J.MultiplySub(<sp/>body-&gt;s,<sp/>primaryConstraint-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;children.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;s<sp/>=<sp/>body-&gt;invI<sp/>*<sp/>body-&gt;s;</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4596"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4597"><highlight class="comment">idAFTree::Response</highlight></codeline>
<codeline lineno="4598"><highlight class="comment"></highlight></codeline>
<codeline lineno="4599"><highlight class="comment"><sp/><sp/>calculate<sp/>body<sp/>forces<sp/>in<sp/>the<sp/>tree<sp/>in<sp/>response<sp/>to<sp/>a<sp/>constraint<sp/>force</highlight></codeline>
<codeline lineno="4600"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4601"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::Response(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auxiliaryIndex<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*child,<sp/>*primaryConstraint;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>single<sp/>body<sp/>don&apos;t<sp/>waste<sp/>time<sp/>because<sp/>there<sp/>aren&apos;t<sp/>any<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sortedBodies.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>constraint-&gt;body1;</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;tree<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetResponseForce(<sp/>body-&gt;numResponses<sp/>)<sp/>=<sp/>constraint-&gt;J1.SubVec6(<sp/>row<sp/>);</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;responseIndex[body-&gt;numResponses++]<sp/>=<sp/>auxiliaryIndex;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>constraint-&gt;body2;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetResponseForce(<sp/>body-&gt;numResponses<sp/>)<sp/>=<sp/>constraint-&gt;J2.SubVec6(<sp/>row<sp/>);</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;responseIndex[body-&gt;numResponses++]<sp/>=<sp/>auxiliaryIndex;</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetData(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>right<sp/>hand<sp/>side<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;s.Zero();</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;s.Zero();</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetResponseForce(<sp/>body-&gt;numResponses<sp/>).Zero();</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>right<sp/>hand<sp/>side<sp/>for<sp/>first<sp/>constrained<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>constraint-&gt;body1;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;tree<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>v,<sp/>constraint-&gt;J1[row]<sp/>);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J1.Multiply(<sp/>primaryConstraint-&gt;s,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[i]-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J2.Multiply(<sp/>child-&gt;s,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetResponseForce(<sp/>body-&gt;numResponses<sp/>)<sp/>=<sp/>constraint-&gt;J1.SubVec6(<sp/>row<sp/>);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>right<sp/>hand<sp/>side<sp/>for<sp/>second<sp/>constrained<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>constraint-&gt;body2;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>&amp;&amp;<sp/>body-&gt;tree<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>v,<sp/>constraint-&gt;J2[row]<sp/>);</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J1.MultiplyAdd(<sp/>primaryConstraint-&gt;s,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[i]-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J2.MultiplyAdd(<sp/>child-&gt;s,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetResponseForce(<sp/>body-&gt;numResponses<sp/>)<sp/>=<sp/>constraint-&gt;J2.SubVec6(<sp/>row<sp/>);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>Solve(<sp/>auxiliaryIndex<sp/>);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSymmetry<sp/>=<sp/>af_useSymmetry.GetBool();</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>body<sp/>forces<sp/>in<sp/>response<sp/>to<sp/>the<sp/>constraint<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>force;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useSymmetry<sp/>&amp;&amp;<sp/>body-&gt;maxAuxiliaryIndex<sp/>&lt;<sp/>auxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.SetData(<sp/>6,<sp/>body-&gt;response<sp/>+<sp/>body-&gt;numResponses<sp/>*<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>forces<sp/>of<sp/>all<sp/>primary<sp/>constraints<sp/>acting<sp/>on<sp/>this<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J1.TransposeMultiplyAdd(<sp/>force,<sp/>primaryConstraint-&gt;lm<sp/>);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[j]-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J2.TransposeMultiplyAdd(<sp/>force,<sp/>child-&gt;lm<sp/>);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;responseIndex[body-&gt;numResponses++]<sp/>=<sp/>auxiliaryIndex;</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4704"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4705"><highlight class="comment">idAFTree::CalculateForces</highlight></codeline>
<codeline lineno="4706"><highlight class="comment"></highlight></codeline>
<codeline lineno="4707"><highlight class="comment"><sp/><sp/>calculate<sp/>forces<sp/>on<sp/>the<sp/>bodies<sp/>in<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="4708"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4709"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::CalculateForces(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invStep;</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*child,<sp/>*c,<sp/>*primaryConstraint;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forces<sp/>on<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;totalForce.SubVec6(0)<sp/>=<sp/>body-&gt;current-&gt;externalForce<sp/>+<sp/>body-&gt;auxForce.SubVec6(0);</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>single<sp/>body<sp/>don&apos;t<sp/>waste<sp/>time<sp/>because<sp/>there<sp/>aren&apos;t<sp/>any<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sortedBodies.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/>invStep<sp/>=<sp/>1.0f<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>right<sp/>hand<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>body-&gt;acceleration,<sp/>body-&gt;totalForce.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;acceleration.SubVec6(0)<sp/>+=<sp/>body-&gt;current-&gt;spatialVelocity<sp/>*<sp/>invStep;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b<sp/>=<sp/>(<sp/>J<sp/>*<sp/>acc<sp/>+<sp/>c<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>primaryConstraint;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;s<sp/>=<sp/>c-&gt;J1<sp/>*<sp/>c-&gt;body1-&gt;acceleration<sp/>+<sp/>c-&gt;J2<sp/>*<sp/>c-&gt;body2-&gt;acceleration<sp/>+<sp/>invStep<sp/>*<sp/>(<sp/>c-&gt;c1<sp/>+<sp/>c-&gt;c2<sp/>);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;s.Zero();</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;fl.isZero<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>Solve();</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>forces<sp/>on<sp/>bodies<sp/>after<sp/>applying<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>forces<sp/>of<sp/>all<sp/>primary<sp/>constraints<sp/>acting<sp/>on<sp/>this<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint<sp/>=<sp/>body-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraint-&gt;J1.TransposeMultiplyAdd(<sp/>body-&gt;totalForce,<sp/>primaryConstraint-&gt;lm<sp/>);</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[j]-&gt;primaryConstraint;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;J2.TransposeMultiplyAdd(<sp/>body-&gt;totalForce,<sp/>child-&gt;lm<sp/>);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4767"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4768"><highlight class="comment">idAFTree::SetMaxSubTreeAuxiliaryIndex</highlight></codeline>
<codeline lineno="4769"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4770"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::SetMaxSubTreeAuxiliaryIndex(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/>*child;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>leaves<sp/>up<sp/>towards<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>sortedBodies.Num()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;maxSubTreeAuxiliaryIndex<sp/>=<sp/>body-&gt;maxAuxiliaryIndex;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>body-&gt;children[j];</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>child-&gt;maxSubTreeAuxiliaryIndex<sp/>&gt;<sp/>body-&gt;maxSubTreeAuxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;maxSubTreeAuxiliaryIndex<sp/>=<sp/>child-&gt;maxSubTreeAuxiliaryIndex;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4790"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4791"><highlight class="comment">idAFTree::SortBodies_r</highlight></codeline>
<codeline lineno="4792"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4793"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::SortBodies_r(<sp/><ref refid="classid_list" kindref="compound">idList&lt;idAFBody*&gt;</ref>&amp;sortedList,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortedList.Append(<sp/>body-&gt;children[i]<sp/>);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;children.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SortBodies_r(<sp/>sortedList,<sp/>body-&gt;children[i]<sp/>);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4806"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4807"><highlight class="comment">idAFTree::SortBodies</highlight></codeline>
<codeline lineno="4808"><highlight class="comment"></highlight></codeline>
<codeline lineno="4809"><highlight class="comment"><sp/><sp/>sort<sp/>body<sp/>list<sp/>to<sp/>make<sp/>sure<sp/>parents<sp/>come<sp/>first</highlight></codeline>
<codeline lineno="4810"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4811"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::SortBodies(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sortedBodies[i]-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>sortedBodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Articulated<sp/>figure<sp/>tree<sp/>has<sp/>no<sp/>root.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>sortedBodies.Clear();</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/>sortedBodies.Append(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/>SortBodies_r(<sp/>sortedBodies,<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4834"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4835"><highlight class="comment">idAFTree::DebugDraw</highlight></codeline>
<codeline lineno="4836"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4837"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAFTree::DebugDraw(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;color<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>sortedBodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>sortedBodies[i];</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>color,<sp/>body-&gt;parent-&gt;current-&gt;worldOrigin,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idPhysics_AF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MrE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4856"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4857"><highlight class="comment">idPhysics_AF::EvaluateConstraints</highlight></codeline>
<codeline lineno="4858"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4859"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::EvaluateConstraints(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*c;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>invTimeStep<sp/>=<sp/>1.0f<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>the<sp/>constraint<sp/>equations<sp/>for<sp/>the<sp/>current<sp/>position<sp/>and<sp/>orientation<sp/>of<sp/>the<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>primaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>primaryConstraints[i];</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;Evaluate(<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;J<sp/>=<sp/>c-&gt;J2;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints[i]-&gt;Evaluate(<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>contact<sp/>constraints<sp/>to<sp/>the<sp/>list<sp/>with<sp/>frame<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddFrameConstraint(<sp/>contactConstraints[i]<sp/>);</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>body<sp/>primary<sp/>constraint<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;primaryConstraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;J<sp/>=<sp/>body-&gt;primaryConstraint-&gt;J1.Transpose();</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4894"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4895"><highlight class="comment">idPhysics_AF::EvaluateBodies</highlight></codeline>
<codeline lineno="4896"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4897"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::EvaluateBodies(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>transpose<sp/>the<sp/>axis<sp/>before<sp/>using<sp/>it<sp/>because<sp/>idMat3<sp/>is<sp/>column-major</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>body-&gt;current-&gt;worldAxis.Transpose();</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>center<sp/>of<sp/>mass<sp/>is<sp/>at<sp/>the<sp/>body<sp/>point<sp/>of<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;centerOfMass.Compare(<sp/>vec3_origin,<sp/>CENTER_OF_MASS_EPSILON<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spatial<sp/>inertia<sp/>in<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;I.Set(<sp/>body-&gt;mass<sp/>*<sp/>mat3_identity,<sp/>mat3_zero,</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/>axis<sp/>*<sp/>body-&gt;inertiaTensor<sp/>*<sp/>axis.Transpose()<sp/>);</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"></highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>spatial<sp/>inertia<sp/>in<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;inverseWorldSpatialInertia.Set(<sp/>body-&gt;invMass<sp/>*<sp/>mat3_identity,<sp/>mat3_zero,</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat3_zero,<sp/>axis<sp/>*<sp/>body-&gt;inverseInertiaTensor<sp/>*<sp/>axis.Transpose()<sp/>);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"></highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;fl.spatialInertiaSparse<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>massMoment<sp/>=<sp/>body-&gt;mass<sp/>*<sp/>SkewSymmetric(<sp/>body-&gt;centerOfMass<sp/>);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spatial<sp/>inertia<sp/>in<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;I.Set(<sp/>body-&gt;mass<sp/>*<sp/>mat3_identity,<sp/>massMoment,</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massMoment.Transpose(),<sp/>axis<sp/>*<sp/>body-&gt;inertiaTensor<sp/>*<sp/>axis.Transpose()<sp/>);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>spatial<sp/>inertia<sp/>in<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;inverseWorldSpatialInertia<sp/>=<sp/>body-&gt;I.InverseFast();</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;fl.spatialInertiaSparse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>auxiliary<sp/>constraint<sp/>force<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;auxForce.Zero();</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4941"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4942"><highlight class="comment">idPhysics_AF::AddFrameConstraints</highlight></codeline>
<codeline lineno="4943"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4944"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddFrameConstraints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>frame<sp/>constraints<sp/>to<sp/>auxiliary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>frameConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints.Append(<sp/>frameConstraints[i]<sp/>);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4955"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4956"><highlight class="comment">idPhysics_AF::RemoveFrameConstraints</highlight></codeline>
<codeline lineno="4957"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4958"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::RemoveFrameConstraints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>the<sp/>frame<sp/>constraints<sp/>from<sp/>the<sp/>auxiliary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>auxiliaryConstraints.SetNum(<sp/>auxiliaryConstraints.Num()<sp/>-<sp/>frameConstraints.Num(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>frameConstraints.SetNum(<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4966"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4967"><highlight class="comment">idPhysics_AF::ApplyFriction</highlight></codeline>
<codeline lineno="4968"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4969"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ApplyFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>endTimeMSec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invTimeStep;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_skipFriction.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointFrictionDentStart<sp/>&lt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>&amp;&amp;<sp/>jointFrictionDentEnd<sp/>&gt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>halfTime<sp/>=<sp/>(<sp/>jointFrictionDentEnd<sp/>-<sp/>jointFrictionDentStart<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointFrictionDentStart<sp/>+<sp/>halfTime<sp/>&gt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jointFrictionDentScale<sp/>=<sp/>1.0f<sp/>-<sp/>(<sp/>1.0f<sp/>-<sp/>jointFrictionDent<sp/>)<sp/>*<sp/>(<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>-<sp/>jointFrictionDentStart<sp/>)<sp/>/<sp/>halfTime;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jointFrictionDentScale<sp/>=<sp/>jointFrictionDent<sp/>+<sp/>(<sp/>1.0f<sp/>-<sp/>jointFrictionDent<sp/>)<sp/>*<sp/>(<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>-<sp/>jointFrictionDentStart<sp/>-<sp/>halfTime<sp/>)<sp/>/<sp/>halfTime;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jointFrictionDentScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactFrictionDentStart<sp/>&lt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>&amp;&amp;<sp/>contactFrictionDentEnd<sp/>&gt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>halfTime<sp/>=<sp/>(<sp/>contactFrictionDentEnd<sp/>-<sp/>contactFrictionDentStart<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactFrictionDentStart<sp/>+<sp/>halfTime<sp/>&gt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactFrictionDentScale<sp/>=<sp/>1.0f<sp/>-<sp/>(<sp/>1.0f<sp/>-<sp/>contactFrictionDent<sp/>)<sp/>*<sp/>(<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>-<sp/>contactFrictionDentStart<sp/>)<sp/>/<sp/>halfTime;</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactFrictionDentScale<sp/>=<sp/>contactFrictionDent<sp/>+<sp/>(<sp/>1.0f<sp/>-<sp/>contactFrictionDent<sp/>)<sp/>*<sp/>(<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>-<sp/>contactFrictionDentStart<sp/>-<sp/>halfTime<sp/>)<sp/>/<sp/>halfTime;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactFrictionDentScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>invTimeStep<sp/>=<sp/>1.0f<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>primaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraints[i]-&gt;ApplyFriction(<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints[i]-&gt;ApplyFriction(<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>frameConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameConstraints[i]-&gt;ApplyFriction(<sp/>invTimeStep<sp/>);</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5014"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5015"><highlight class="comment">idPhysics_AF::PrimaryFactor</highlight></codeline>
<codeline lineno="5016"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5017"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::PrimaryFactor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trees.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees[i]-&gt;Factor();</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5027"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5028"><highlight class="comment">idPhysics_AF::PrimaryForces</highlight></codeline>
<codeline lineno="5029"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5030"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::PrimaryForces(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trees.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees[i]-&gt;CalculateForces(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5040"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5041"><highlight class="comment">idPhysics_AF::AuxiliaryForces</highlight></codeline>
<codeline lineno="5042"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5043"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AuxiliaryForces(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>n,<sp/>m,<sp/>s,<sp/>numAuxConstraints,<sp/>*index,<sp/>*boxIndex;</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr,<sp/>*j1,<sp/>*j2,<sp/>*dstPtr,<sp/>*forcePtr;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invStep,<sp/>u;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>jmk;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>rhs,<sp/>w,<sp/>lm,<sp/>lo,<sp/>hi;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>number<sp/>of<sp/>one<sp/>dimensional<sp/>auxiliary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>numAuxConstraints<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAuxConstraints<sp/>+=<sp/>auxiliaryConstraints[i]-&gt;J1.GetNumRows();</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numAuxConstraints<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>to<sp/>store<sp/>the<sp/>body<sp/>response<sp/>to<sp/>auxiliary<sp/>constraint<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/>forcePtr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>bodies.Num()<sp/>*<sp/>numAuxConstraints<sp/>*<sp/>8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>bodies.Num()<sp/>*<sp/>numAuxConstraints<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>int<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;response<sp/>=<sp/>forcePtr;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;responseIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;numResponses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;maxAuxiliaryIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forcePtr<sp/>+=<sp/>numAuxConstraints<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>numAuxConstraints;</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>on<sp/>each<sp/>body<sp/>the<sp/>largest<sp/>index<sp/>of<sp/>an<sp/>auxiliary<sp/>constraint<sp/>constraining<sp/>the<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useSymmetry.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraint-&gt;J1.GetNumRows();<sp/>j++,<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>&gt;<sp/>constraint-&gt;body1-&gt;maxAuxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body1-&gt;maxAuxiliaryIndex<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>&amp;&amp;<sp/>k<sp/>&gt;<sp/>constraint-&gt;body2-&gt;maxAuxiliaryIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body2-&gt;maxAuxiliaryIndex<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trees.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees[i]-&gt;SetMaxSubTreeAuxiliaryIndex();</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>forces<sp/>of<sp/>primary<sp/>constraints<sp/>in<sp/>response<sp/>to<sp/>the<sp/>auxiliary<sp/>constraint<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraint-&gt;J1.GetNumRows();<sp/>j++,<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>body<sp/>forces<sp/>in<sp/>the<sp/>tree<sp/>in<sp/>response<sp/>to<sp/>the<sp/>constraint<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body1-&gt;tree-&gt;Response(<sp/>constraint,<sp/>j,<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>a<sp/>second<sp/>body<sp/>which<sp/>is<sp/>part<sp/>of<sp/>a<sp/>different<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>&amp;&amp;<sp/>constraint-&gt;body2-&gt;tree<sp/>!=<sp/>constraint-&gt;body1-&gt;tree<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>body<sp/>forces<sp/>in<sp/>the<sp/>second<sp/>tree<sp/>in<sp/>response<sp/>to<sp/>the<sp/>constraint<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body2-&gt;tree-&gt;Response(<sp/>constraint,<sp/>j,<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>rows<sp/>are<sp/>16<sp/>byte<sp/>padded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/>jmk.SetData(<sp/>numAuxConstraints,<sp/>((numAuxConstraints+3)&amp;~3),<sp/>MATX_ALLOCA(<sp/>numAuxConstraints<sp/>*<sp/>((numAuxConstraints+3)&amp;~3)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.SetData(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>constraint<sp/>matrix<sp/>for<sp/>auxiliary<sp/>constraints<sp/>using<sp/>a<sp/>mass<sp/>matrix<sp/>adjusted<sp/>for<sp/>the<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraint-&gt;J1.GetNumRows();<sp/>j++,<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body1-&gt;InverseWorldSpatialInertiaMultiply(<sp/>tmp,<sp/>constraint-&gt;J1[j]<sp/>);</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>tmp.ToFloatPtr();</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body1-&gt;response;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>constraint-&gt;body1-&gt;responseIndex;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr<sp/>=<sp/>jmk[k];</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>af_useSymmetry.GetBool()<sp/>?<sp/>k<sp/>+<sp/>1<sp/>:<sp/>numAuxConstraints;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>=<sp/>n<sp/>=<sp/>0,<sp/>m<sp/>=<sp/>index[n];<sp/>n<sp/>&lt;<sp/>constraint-&gt;body1-&gt;numResponses<sp/>&amp;&amp;<sp/>m<sp/>&lt;<sp/>s;<sp/>n++,<sp/>m<sp/>=<sp/>index[n]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>l<sp/>&lt;<sp/>m<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[l++]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[l++]<sp/>=<sp/>j1[0]<sp/>*<sp/>ptr[0]<sp/>+<sp/>j1[1]<sp/>*<sp/>ptr[1]<sp/>+<sp/>j1[2]<sp/>*<sp/>ptr[2]<sp/>+</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1[3]<sp/>*<sp/>ptr[3]<sp/>+<sp/>j1[4]<sp/>*<sp/>ptr[4]<sp/>+<sp/>j1[5]<sp/>*<sp/>ptr[5];</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>l<sp/>&lt;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[l++]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;body2-&gt;InverseWorldSpatialInertiaMultiply(<sp/>tmp,<sp/>constraint-&gt;J2[j]<sp/>);</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>tmp.ToFloatPtr();</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body2-&gt;response;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>constraint-&gt;body2-&gt;responseIndex;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>=<sp/>0,<sp/>m<sp/>=<sp/>index[n];<sp/>n<sp/>&lt;<sp/>constraint-&gt;body2-&gt;numResponses<sp/>&amp;&amp;<sp/>m<sp/>&lt;<sp/>s;<sp/>n++,<sp/>m<sp/>=<sp/>index[n]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr[m]<sp/>+=<sp/>j2[0]<sp/>*<sp/>ptr[0]<sp/>+<sp/>j2[1]<sp/>*<sp/>ptr[1]<sp/>+<sp/>j2[2]<sp/>*<sp/>ptr[2]<sp/>+</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2[3]<sp/>*<sp/>ptr[3]<sp/>+<sp/>j2[4]<sp/>*<sp/>ptr[4]<sp/>+<sp/>j2[5]<sp/>*<sp/>ptr[5];</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useSymmetry.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>jmk.GetNumColumns();</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numAuxConstraints;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>jmk.ToFloatPtr()<sp/>+<sp/>(<sp/>i<sp/>+<sp/>1<sp/>)<sp/>*<sp/>n<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPtr<sp/>=<sp/>jmk.ToFloatPtr()<sp/>+<sp/>i<sp/>*<sp/>n<sp/>+<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numAuxConstraints;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dstPtr++<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>invStep<sp/>=<sp/>1.0f<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>body<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>body-&gt;acceleration,<sp/>body-&gt;totalForce.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;acceleration.SubVec6(0)<sp/>+=<sp/>body-&gt;current-&gt;spatialVelocity<sp/>*<sp/>invStep;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.SetData(<sp/>numAuxConstraints,<sp/>VECX_ALLOCA(<sp/>numAuxConstraints<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/>lo.SetData(<sp/>numAuxConstraints,<sp/>VECX_ALLOCA(<sp/>numAuxConstraints<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>hi.SetData(<sp/>numAuxConstraints,<sp/>VECX_ALLOCA(<sp/>numAuxConstraints<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/>lm.SetData(<sp/>numAuxConstraints,<sp/>VECX_ALLOCA(<sp/>numAuxConstraints<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>boxIndex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numAuxConstraints<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>first<sp/>index<sp/>for<sp/>special<sp/>box<sp/>constrained<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints[i]-&gt;firstIndex<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>auxiliaryConstraints[i]-&gt;J1.GetNumRows();</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>right<sp/>hand<sp/>side<sp/>and<sp/>low<sp/>and<sp/>high<sp/>bounds<sp/>for<sp/>auxiliary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraint-&gt;J1.GetNumRows();<sp/>j++,<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>constraint-&gt;J1[j];</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body1-&gt;acceleration.ToFloatPtr();</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs[k]<sp/>=<sp/>j1[0]<sp/>*<sp/>ptr[0]<sp/>+<sp/>j1[1]<sp/>*<sp/>ptr[1]<sp/>+<sp/>j1[2]<sp/>*<sp/>ptr[2]<sp/>+<sp/>j1[3]<sp/>*<sp/>ptr[3]<sp/>+<sp/>j1[4]<sp/>*<sp/>ptr[4]<sp/>+<sp/>j1[5]<sp/>*<sp/>ptr[5];</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs[k]<sp/>+=<sp/>constraint-&gt;c1[j]<sp/>*<sp/>invStep;</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>constraint-&gt;J2[j];</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body2-&gt;acceleration.ToFloatPtr();</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs[k]<sp/>+=<sp/>j2[0]<sp/>*<sp/>ptr[0]<sp/>+<sp/>j2[1]<sp/>*<sp/>ptr[1]<sp/>+<sp/>j2[2]<sp/>*<sp/>ptr[2]<sp/>+<sp/>j2[3]<sp/>*<sp/>ptr[3]<sp/>+<sp/>j2[4]<sp/>*<sp/>ptr[4]<sp/>+<sp/>j2[5]<sp/>*<sp/>ptr[5];</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs[k]<sp/>+=<sp/>constraint-&gt;c2[j]<sp/>*<sp/>invStep;</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs[k]<sp/>=<sp/>-rhs[k];</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo[k]<sp/>=<sp/>constraint-&gt;lo[j];</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi[k]<sp/>=<sp/>constraint-&gt;hi[j];</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;boxIndex[j]<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;boxConstraint-&gt;fl.isPrimary<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>reference<sp/>primary<sp/>constraints<sp/>for<sp/>the<sp/>box<sp/>index&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[k]<sp/>=<sp/>constraint-&gt;boxConstraint-&gt;firstIndex<sp/>+<sp/>constraint-&gt;boxIndex[j];</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boxIndex[k]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jmk[k][k]<sp/>+=<sp/>constraint-&gt;e[j]<sp/>*<sp/>invStep;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="5222"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_lcp.Start();</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5224"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>lagrange<sp/>multipliers<sp/>for<sp/>auxiliary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lcp-&gt;Solve(<sp/>jmk,<sp/>lm,<sp/>rhs,<sp/>lo,<sp/>hi,<sp/>boxIndex<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bad<sp/>monkey!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="5231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_lcp.Stop();</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5233"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>auxiliary<sp/>constraint<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraint-&gt;J1.GetNumRows();<sp/>j++,<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;lm[j]<sp/>=<sp/>u<sp/>=<sp/>lm[k];</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>constraint-&gt;J1[j];</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body1-&gt;auxForce.ToFloatPtr();</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[0]<sp/>+=<sp/>j1[0]<sp/>*<sp/>u;<sp/>ptr[1]<sp/>+=<sp/>j1[1]<sp/>*<sp/>u;<sp/>ptr[2]<sp/>+=<sp/>j1[2]<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[3]<sp/>+=<sp/>j1[3]<sp/>*<sp/>u;<sp/>ptr[4]<sp/>+=<sp/>j1[4]<sp/>*<sp/>u;<sp/>ptr[5]<sp/>+=<sp/>j1[5]<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>constraint-&gt;J2[j];</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>constraint-&gt;body2-&gt;auxForce.ToFloatPtr();</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[0]<sp/>+=<sp/>j2[0]<sp/>*<sp/>u;<sp/>ptr[1]<sp/>+=<sp/>j2[1]<sp/>*<sp/>u;<sp/>ptr[2]<sp/>+=<sp/>j2[2]<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[3]<sp/>+=<sp/>j2[3]<sp/>*<sp/>u;<sp/>ptr[4]<sp/>+=<sp/>j2[4]<sp/>*<sp/>u;<sp/>ptr[5]<sp/>+=<sp/>j2[5]<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recalculate<sp/>primary<sp/>constraint<sp/>forces<sp/>in<sp/>response<sp/>to<sp/>auxiliary<sp/>constraint<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/>PrimaryForces(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>pointers<sp/>pointing<sp/>to<sp/>stack<sp/>space<sp/>so<sp/>tools<sp/>don&apos;t<sp/>get<sp/>confused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;response<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;responseIndex<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5268"><highlight class="comment">idPhysics_AF::VerifyContactConstraints</highlight></codeline>
<codeline lineno="5269"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5270"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::VerifyContactConstraints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="5273"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>impulseNumerator,<sp/>impulseDenominator;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r,<sp/>velocity,<sp/>normalVelocity,<sp/>normal,<sp/>impulse;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>contactConstraints[i]-&gt;body1;</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcontact_info__t" kindref="compound">contactInfo_t</ref><sp/>&amp;contact<sp/>=<sp/>contactConstraints[i]-&gt;GetContact();</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>contact.point<sp/>-<sp/>body-&gt;GetCenterOfMass();</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>velocity<sp/>at<sp/>contact<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>body-&gt;GetLinearVelocity()<sp/>+<sp/>body-&gt;GetAngularVelocity().Cross(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"></highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>along<sp/>normal<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalVelocity<sp/>=<sp/>(<sp/>velocity<sp/>*<sp/>contact.normal<sp/>)<sp/>*<sp/>contact.normal;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>moving<sp/>towards<sp/>the<sp/>surface<sp/>at<sp/>the<sp/>contact<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>normalVelocity<sp/>*<sp/>contact.normal<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>-normalVelocity;</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseDenominator<sp/>=<sp/>body-&gt;GetInverseMass()<sp/>+<sp/>(<sp/>(<sp/>body-&gt;GetInverseWorldInertia()<sp/>*<sp/>r.Cross(<sp/>normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>(impulseNumerator<sp/>/<sp/>impulseDenominator)<sp/>*<sp/>normal<sp/>*<sp/>1.0001f;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;SetLinearVelocity(<sp/>body-&gt;GetLinearVelocity()<sp/>+<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;SetAngularVelocity(<sp/>body-&gt;GetAngularVelocity()<sp/>+<sp/>r.Cross(<sp/>impulse<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5304"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>normal;</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>contactConstraints[i]-&gt;body1;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>contactConstraints[i]-&gt;GetContact().normal;</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>normal<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>-=<sp/>1.0001f<sp/>*<sp/>(normal<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0))<sp/>*<sp/>normal;</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>contactConstraints[i]-&gt;body2;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>-normal;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>normal<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>-=<sp/>1.0001f<sp/>*<sp/>(normal<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0))<sp/>*<sp/>normal;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5324"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5327"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5328"><highlight class="comment">idPhysics_AF::Evolve</highlight></codeline>
<codeline lineno="5329"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5330"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Evolve(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vec;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>force;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vSqr,<sp/>maxLinearVelocity,<sp/>maxAngularVelocity;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/>maxLinearVelocity<sp/>=<sp/>af_maxLinearVelocity.GetFloat()<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/>maxAngularVelocity<sp/>=<sp/>af_maxAngularVelocity.GetFloat()<sp/>/<sp/>timeStep;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>spatial<sp/>velocity<sp/>for<sp/>the<sp/>next<sp/>physics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>body-&gt;acceleration,<sp/>body-&gt;totalForce.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity<sp/>=<sp/>body-&gt;current-&gt;spatialVelocity<sp/>+<sp/>timeStep<sp/>*<sp/>body-&gt;acceleration.SubVec6(0);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxLinearVelocity<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cap<sp/>the<sp/>linear<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vSqr<sp/>=<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0).LengthSqr();</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vSqr<sp/>&gt;<sp/>Square(<sp/>maxLinearVelocity<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>*=<sp/>idMath::InvSqrt(<sp/>vSqr<sp/>)<sp/>*<sp/>maxLinearVelocity;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxAngularVelocity<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cap<sp/>the<sp/>angular<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vSqr<sp/>=<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(1).LengthSqr();</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vSqr<sp/>&gt;<sp/>Square(<sp/>maxAngularVelocity<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(1)<sp/>*=<sp/>idMath::InvSqrt(<sp/>vSqr<sp/>)<sp/>*<sp/>maxAngularVelocity;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>absolutely<sp/>sure<sp/>all<sp/>contact<sp/>constraints<sp/>are<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyContactConstraints();</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>position<sp/>of<sp/>the<sp/>bodies<sp/>for<sp/>the<sp/>next<sp/>physics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>world<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldOrigin<sp/>=<sp/>body-&gt;current-&gt;worldOrigin<sp/>+<sp/>timeStep<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>angular<sp/>velocity<sp/>to<sp/>a<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/>=<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>-timeStep<sp/>*<sp/>(float)<sp/>RAD2DEG(<sp/>vec.Normalize()<sp/>);</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref>(<sp/>vec3_origin,<sp/>vec,<sp/>angle<sp/>);</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation.Normalize180();</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>world<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldAxis<sp/>=<sp/>body-&gt;current-&gt;worldAxis<sp/>*<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldAxis.OrthoNormalizeSelf();</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear<sp/>and<sp/>angular<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0)<sp/>-=<sp/>body-&gt;linearFriction<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(0);</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(1)<sp/>-=<sp/>body-&gt;angularFriction<sp/>*<sp/>body-&gt;next-&gt;spatialVelocity.SubVec3(1);</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5394"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5395"><highlight class="comment">idPhysics_AF::CollisionImpulse</highlight></codeline>
<codeline lineno="5396"><highlight class="comment"></highlight></codeline>
<codeline lineno="5397"><highlight class="comment"><sp/><sp/>apply<sp/>impulse<sp/>to<sp/>the<sp/>colliding<sp/>bodies</highlight></codeline>
<codeline lineno="5398"><highlight class="comment"><sp/><sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>body<sp/>should<sp/>be<sp/>set<sp/>to<sp/>the<sp/>moment<sp/>of<sp/>impact</highlight></codeline>
<codeline lineno="5399"><highlight class="comment"><sp/><sp/>this<sp/>is<sp/>silly<sp/>as<sp/>it<sp/>doesn&apos;t<sp/>take<sp/>the<sp/>AF<sp/>structure<sp/>into<sp/>account</highlight></codeline>
<codeline lineno="5400"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5401"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::CollisionImpulse(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep,<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r,<sp/>velocity,<sp/>impulse;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>impulseNumerator,<sp/>impulseDenominator;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structimpact_info__s" kindref="compound">impactInfo_t</ref><sp/>info;</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.entities[collision.c.entityNum];</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>info<sp/>from<sp/>other<sp/>entity<sp/>involved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;GetImpactInfo(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>collision.c.id,<sp/>collision.c.point,<sp/>&amp;info<sp/>);</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collision<sp/>point<sp/>relative<sp/>to<sp/>the<sp/>body<sp/>center<sp/>of<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>collision.c.point<sp/>-<sp/>(body-&gt;current-&gt;worldOrigin<sp/>+<sp/>body-&gt;centerOfMass<sp/>*<sp/>body-&gt;current-&gt;worldAxis);</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>velocity<sp/>at<sp/>the<sp/>collision<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>body-&gt;current-&gt;spatialVelocity.SubVec3(0)<sp/>+<sp/>body-&gt;current-&gt;spatialVelocity.SubVec3(1).Cross(r);</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>velocity<sp/>of<sp/>other<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>-=<sp/>info.velocity;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>stick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>velocity<sp/>*<sp/>collision.c.normal<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>collision.c.normal;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>body-&gt;current-&gt;worldAxis.Transpose()<sp/>*<sp/>body-&gt;inverseInertiaTensor<sp/>*<sp/>body-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>-(<sp/>1.0f<sp/>+<sp/>body-&gt;bouncyness<sp/>)<sp/>*<sp/>(<sp/>velocity<sp/>*<sp/>collision.c.normal<sp/>);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/>impulseDenominator<sp/>=<sp/>body-&gt;invMass<sp/>+<sp/>(<sp/>(<sp/>inverseWorldInertiaTensor<sp/>*<sp/>r.Cross(<sp/>collision.c.normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>collision.c.normal<sp/>);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>info.invMass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseDenominator<sp/>+=<sp/>info.invMass<sp/>+<sp/>(<sp/>(<sp/>info.invInertiaTensor<sp/>*<sp/>info.position.Cross(<sp/>collision.c.normal<sp/>)<sp/>).Cross(<sp/>info.position<sp/>)<sp/>*<sp/>collision.c.normal<sp/>);</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>(impulseNumerator<sp/>/<sp/>impulseDenominator)<sp/>*<sp/>collision.c.normal;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>impact<sp/>to<sp/>other<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;ApplyImpulse(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>collision.c.id,<sp/>collision.c.point,<sp/>-impulse<sp/>);</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>to<sp/>self<sp/>to<sp/>let<sp/>the<sp/>entity<sp/>know<sp/>about<sp/>the<sp/>impact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;Collide(<sp/>collision,<sp/>velocity<sp/>);</highlight></codeline>
<codeline lineno="5439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5442"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5443"><highlight class="comment">idPhysics_AF::ApplyCollisions</highlight></codeline>
<codeline lineno="5444"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5445"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::ApplyCollisions(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>collisions.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>CollisionImpulse(<sp/>timeStep,<sp/>collisions[i].body,<sp/>collisions[i].trace<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5458"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5459"><highlight class="comment">idPhysics_AF::SetupCollisionForBody</highlight></codeline>
<codeline lineno="5460"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5461"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idPhysics_AF::SetupCollisionForBody(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b;</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*passEntity;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/>passEntity<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!selfCollision<sp/>||<sp/>!body-&gt;fl.selfCollision<sp/>||<sp/>af_skipSelfCollision.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>all<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>collide<sp/>with<sp/>world<sp/>collision<sp/>model<sp/>if<sp/>attached<sp/>to<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;constraints[i]-&gt;fl.noCollision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>constraint<sp/>attaches<sp/>the<sp/>body<sp/>to<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;constraints[i]-&gt;body2<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>collide<sp/>with<sp/>the<sp/>world<sp/>collision<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passEntity<sp/>=<sp/>gameLocal.world;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>all<sp/>bodies<sp/>that<sp/>have<sp/>self<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodies[i]-&gt;fl.selfCollision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Enable();</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>let<sp/>the<sp/>body<sp/>collide<sp/>with<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"></highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>any<sp/>bodies<sp/>attached<sp/>with<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>body-&gt;constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;constraints[i]-&gt;fl.noCollision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>constraint<sp/>attaches<sp/>the<sp/>body<sp/>to<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;constraints[i]-&gt;body2<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>collide<sp/>with<sp/>the<sp/>world<sp/>collision<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passEntity<sp/>=<sp/>gameLocal.world;</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;constraints[i]-&gt;body1<sp/>==<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>body-&gt;constraints[i]-&gt;body2;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;constraints[i]-&gt;body2<sp/>==<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>body-&gt;constraints[i]-&gt;body1;</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>collide<sp/>with<sp/>this<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passEntity;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"></highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5529"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5530"><highlight class="comment">idPhysics_AF::CheckForCollisions</highlight></codeline>
<codeline lineno="5531"><highlight class="comment"></highlight></codeline>
<codeline lineno="5532"><highlight class="comment"><sp/><sp/>check<sp/>for<sp/>collisions<sp/>between<sp/>the<sp/>current<sp/>and<sp/>next<sp/>state</highlight></codeline>
<codeline lineno="5533"><highlight class="comment"><sp/><sp/>if<sp/>there<sp/>is<sp/>a<sp/>collision<sp/>the<sp/>next<sp/>state<sp/>is<sp/>set<sp/>to<sp/>the<sp/>state<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>impact</highlight></codeline>
<codeline lineno="5534"><highlight class="comment"><sp/><sp/>assumes<sp/>all<sp/>bodies<sp/>are<sp/>linked<sp/>for<sp/>collision<sp/>detection<sp/>and<sp/>relinks<sp/>all<sp/>bodies<sp/>after<sp/>moving<sp/>them</highlight></codeline>
<codeline lineno="5535"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5536"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::CheckForCollisions(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>#define<sp/>TEST_COLLISION_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>collision;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*passEntity;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>list<sp/>with<sp/>collisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>collisions.SetNum(<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!enableCollision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;clipMask<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passEntity<sp/>=<sp/>SetupCollisionForBody(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TEST_COLLISION_DETECTION</highlight></codeline>
<codeline lineno="5561"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsolid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Contents(<sp/>body-&gt;current-&gt;worldOrigin,<sp/>body-&gt;clipModel,</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/>passEntity<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startsolid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5567"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransposeMultiply(<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;next-&gt;worldAxis,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>axis.ToRotation();</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation.SetOrigin(<sp/>body-&gt;current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Motion(<sp/>collision,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>body-&gt;next-&gt;worldOrigin,<sp/>rotation,</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/>passEntity<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>next<sp/>state<sp/>to<sp/>the<sp/>state<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>impact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldOrigin<sp/>=<sp/>collision.endpos;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldAxis<sp/>=<sp/>collision.endAxis;</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>collision<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>collisions.Num();</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisions.SetNum(<sp/>index<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisions[index].trace<sp/>=<sp/>collision;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisions[index].body<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TEST_COLLISION_DETECTION</highlight></codeline>
<codeline lineno="5588"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Contents(<sp/>body-&gt;next-&gt;worldOrigin,<sp/>body-&gt;clipModel,</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/>passEntity<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!startsolid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bah<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5595"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>body-&gt;clipModel-&gt;GetId(),<sp/>body-&gt;next-&gt;worldOrigin,<sp/>body-&gt;next-&gt;worldAxis<sp/>);</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight></codeline>
<codeline lineno="5601"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5602"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5603"><highlight class="comment">idPhysics_AF::EvaluateContacts</highlight></codeline>
<codeline lineno="5604"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5605"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::EvaluateContacts(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>numContacts,<sp/>numBodyContacts;</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcontact_info__t" kindref="compound">contactInfo_t</ref><sp/>contactInfo[10];</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*passEntity;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>dir(<sp/>6,<sp/>VECX_ALLOCA(<sp/>6<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/>EvaluateBodies(<sp/>current.lastTimeStep<sp/>);</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>existing<sp/>contacts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearContacts();</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/>contactBodies.SetNum(<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!enableCollision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"></highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>all<sp/>the<sp/>contacts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;clipMask<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passEntity<sp/>=<sp/>SetupCollisionForBody(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"></highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;InverseWorldSpatialInertiaMultiply(<sp/>dir,<sp/>body-&gt;current-&gt;externalForce.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.SubVec6(0)<sp/>=<sp/>body-&gt;current-&gt;spatialVelocity<sp/>+<sp/>current.lastTimeStep<sp/>*<sp/>dir.SubVec6(0);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.SubVec3(0).Normalize();</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.SubVec3(1).Normalize();</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numContacts<sp/>=<sp/>gameLocal.clip.Contacts(<sp/>contactInfo,<sp/>10,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>dir.SubVec6(0),<sp/>2.0f,<sp/></highlight><highlight class="comment">//CONTACT_EPSILON,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/>passEntity<sp/>);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="5644"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>nearby<sp/>contacts<sp/>between<sp/>the<sp/>same<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>assure<sp/>there<sp/>are<sp/>at<sp/>most<sp/>three<sp/>planar<sp/>contacts<sp/>between<sp/>any<sp/>pair<sp/>of<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numContacts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numBodyContacts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>contacts.Num();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contacts[k].entityNum<sp/>==<sp/>contactInfo[j].entityNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>contacts[k].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>i<sp/>&amp;&amp;<sp/>contactInfo[j].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>contactBodies[k]<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>contactBodies[k]<sp/>==<sp/>i<sp/>&amp;&amp;<sp/>contacts[k].id<sp/>==<sp/>contactInfo[j].id<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>contacts[k].point<sp/>-<sp/>contactInfo[j].point<sp/>).LengthSqr()<sp/>&lt;<sp/>Square(<sp/>2.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>contacts[k].normal<sp/>*<sp/>contactInfo[j].normal<sp/>)<sp/>&gt;<sp/>0.9f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numBodyContacts++;</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>&gt;=<sp/>contacts.Num()<sp/>&amp;&amp;<sp/>numBodyContacts<sp/>&lt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contacts.Append(<sp/>contactInfo[j]<sp/>);</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactBodies.Append(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"></highlight></codeline>
<codeline lineno="5670"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5671"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numContacts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contacts.Append(<sp/>contactInfo[j]<sp/>);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactBodies.Append(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5677"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/>AddContactEntitiesForContacts();</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>contacts.Num()<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="5683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5686"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5687"><highlight class="comment">idPhysics_AF::SetupContactConstraints</highlight></codeline>
<codeline lineno="5688"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5689"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetupContactConstraints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"></highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>enough<sp/>contact<sp/>constraints<sp/>are<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>contactConstraints.AssureSizeAlloc(<sp/>contacts.Num(),<sp/>idListNewElement&lt;idAFConstraint_Contact&gt;<sp/>);</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/>contactConstraints.SetNum(<sp/>contacts.Num(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"></highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>contact<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contacts.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>contact<sp/>constraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactConstraints[i]-&gt;physics<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contacts[i].entityNum<sp/>==<sp/>self-&gt;entityNumber<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactConstraints[i]-&gt;Setup(<sp/>bodies[contactBodies[i]],<sp/>bodies[<sp/>contacts[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>],<sp/>contacts[i]<sp/>);</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactConstraints[i]-&gt;Setup(<sp/>bodies[contactBodies[i]],<sp/>NULL,<sp/>contacts[i]<sp/>);</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5711"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5712"><highlight class="comment">idPhysics_AF::ApplyContactForces</highlight></codeline>
<codeline lineno="5713"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5714"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ApplyContactForces(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="5717"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>force;</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactConstraints[i]-&gt;body2<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcontact_info__t" kindref="compound">contactInfo_t</ref><sp/>&amp;contact<sp/>=<sp/>contactConstraints[i]-&gt;GetContact();</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.entities[contact.entityNum];</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.Zero();</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;AddForce(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>contact.id,<sp/>contact.point,<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5734"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5737"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5738"><highlight class="comment">idPhysics_AF::ClearExternalForce</highlight></codeline>
<codeline lineno="5739"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5740"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ClearExternalForce(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"></highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>external<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;externalForce.Zero();</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next-&gt;externalForce.Zero();</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5755"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5756"><highlight class="comment">idPhysics_AF::AddGravity</highlight></codeline>
<codeline lineno="5757"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5758"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddGravity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>gravitational<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;externalForce.SubVec3(<sp/>0<sp/>)<sp/>+=<sp/>body-&gt;mass<sp/>*<sp/>gravityVector;</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"></highlight></codeline>
<codeline lineno="5770"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5771"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5772"><highlight class="comment">idPhysics_AF::SwapStates</highlight></codeline>
<codeline lineno="5773"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5774"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SwapStates(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_f_body_p_state__s" kindref="compound">AFBodyPState_t</ref><sp/>*swap;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"></highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>current<sp/>and<sp/>next<sp/>state<sp/>for<sp/>next<sp/>simulation<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap<sp/>=<sp/>body-&gt;current;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current<sp/>=<sp/>body-&gt;next;</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;next<sp/>=<sp/>swap;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"></highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5792"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5793"><highlight class="comment">idPhysics_AF::UpdateClipModels</highlight></codeline>
<codeline lineno="5794"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::UpdateClipModels(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>body-&gt;clipModel-&gt;GetId(),<sp/>body-&gt;current-&gt;worldOrigin,<sp/>body-&gt;current-&gt;worldAxis<sp/>);</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5807"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5808"><highlight class="comment">idPhysics_AF::SetSuspendSpeed</highlight></codeline>
<codeline lineno="5809"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5810"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetSuspendSpeed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref><sp/>&amp;velocity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref><sp/>&amp;acceleration<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;suspendVelocity<sp/>=<sp/>velocity;</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;suspendAcceleration<sp/>=<sp/>acceleration;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5818"><highlight class="comment">idPhysics_AF::SetSuspendTime</highlight></codeline>
<codeline lineno="5819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5820"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetSuspendTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minTime,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;minMoveTime<sp/>=<sp/>minTime;</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;maxMoveTime<sp/>=<sp/>maxTime;</highlight></codeline>
<codeline lineno="5824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"></highlight></codeline>
<codeline lineno="5826"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5827"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5828"><highlight class="comment">idPhysics_AF::SetSuspendTolerance</highlight></codeline>
<codeline lineno="5829"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5830"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetSuspendTolerance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>noMoveTime,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>noMoveTranslation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>noMoveRotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;noMoveTime<sp/>=<sp/>noMoveTime;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;noMoveTranslation<sp/>=<sp/>noMoveTranslation;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;noMoveRotation<sp/>=<sp/>noMoveRotation;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5838"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5839"><highlight class="comment">idPhysics_AF::SetTimeScaleRamp</highlight></codeline>
<codeline lineno="5840"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5841"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetTimeScaleRamp(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/>timeScaleRampStart<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/>timeScaleRampEnd<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"></highlight></codeline>
<codeline lineno="5847"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5848"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5849"><highlight class="comment">idPhysics_AF::SetJointFrictionDent</highlight></codeline>
<codeline lineno="5850"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5851"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetJointFrictionDent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDent<sp/>=<sp/>dent;</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDentStart<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDentEnd<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="5856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"></highlight></codeline>
<codeline lineno="5858"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5859"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5860"><highlight class="comment">idPhysics_AF::GetJointFrictionScale</highlight></codeline>
<codeline lineno="5861"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5862"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idPhysics_AF::GetJointFrictionScale(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointFrictionDentScale<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jointFrictionDentScale;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointFrictionScale<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jointFrictionScale;</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_jointFrictionScale.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>af_jointFrictionScale.GetFloat();</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0f;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5875"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5876"><highlight class="comment">idPhysics_AF::SetContactFrictionDent</highlight></codeline>
<codeline lineno="5877"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5878"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetContactFrictionDent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDent<sp/>=<sp/>dent;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDentStart<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDentEnd<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="5883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"></highlight></codeline>
<codeline lineno="5885"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5886"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5887"><highlight class="comment">idPhysics_AF::GetContactFrictionScale</highlight></codeline>
<codeline lineno="5888"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5889"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idPhysics_AF::GetContactFrictionScale(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactFrictionDentScale<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contactFrictionDentScale;</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactFrictionScale<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contactFrictionScale;</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_contactFrictionScale.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>af_contactFrictionScale.GetFloat();</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0f;</highlight></codeline>
<codeline lineno="5899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5902"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5903"><highlight class="comment">idPhysics_AF::TestIfAtRest</highlight></codeline>
<codeline lineno="5904"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5905"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::TestIfAtRest(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>translationSqr,<sp/>maxTranslationSqr,<sp/>rotation,<sp/>maxRotation;</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"></highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/>current.activateTime<sp/>+=<sp/>timeStep;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"></highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>simulation<sp/>should<sp/>never<sp/>be<sp/>suspended<sp/>before<sp/>a<sp/>certaint<sp/>amount<sp/>of<sp/>time<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>minMoveTime<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>current.activateTime<sp/>&lt;<sp/>minMoveTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"></highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>simulation<sp/>should<sp/>always<sp/>be<sp/>suspended<sp/>after<sp/>a<sp/>certain<sp/>amount<sp/>time<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxMoveTime<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>current.activateTime<sp/>&gt;<sp/>maxMoveTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>all<sp/>bodies<sp/>hardly<sp/>moved<sp/>over<sp/>a<sp/>period<sp/>of<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.noMoveTime<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;atRestOrigin<sp/>=<sp/>body-&gt;current-&gt;worldOrigin;</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;atRestAxis<sp/>=<sp/>body-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.noMoveTime<sp/>+=<sp/>timeStep;</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.noMoveTime<sp/>&gt;<sp/>noMoveTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.noMoveTime<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxTranslationSqr<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxRotation<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>translationSqr<sp/>=<sp/>(<sp/>body-&gt;current-&gt;worldOrigin<sp/>-<sp/>body-&gt;atRestOrigin<sp/>).LengthSqr();</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>translationSqr<sp/>&gt;<sp/>maxTranslationSqr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxTranslationSqr<sp/>=<sp/>translationSqr;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>(<sp/>body-&gt;atRestAxis.Transpose()<sp/>*<sp/>body-&gt;current-&gt;worldAxis<sp/>).ToRotation().GetAngle();</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rotation<sp/>&gt;<sp/>maxRotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxRotation<sp/>=<sp/>rotation;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"></highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxTranslationSqr<sp/>&lt;<sp/>Square(<sp/>noMoveTranslation<sp/>)<sp/>&amp;&amp;<sp/>maxRotation<sp/>&lt;<sp/>noMoveRotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardly<sp/>moved<sp/>over<sp/>a<sp/>period<sp/>of<sp/>time<sp/>so<sp/>the<sp/>articulated<sp/>figure<sp/>may<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.noMoveTime<sp/>+=<sp/>timeStep;</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"></highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>the<sp/>velocity<sp/>or<sp/>acceleration<sp/>of<sp/>any<sp/>body<sp/>is<sp/>still<sp/>too<sp/>large<sp/>to<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"></highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;current-&gt;spatialVelocity.SubVec3(0).LengthSqr()<sp/>&gt;<sp/>Square(<sp/>suspendVelocity[0]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;current-&gt;spatialVelocity.SubVec3(1).LengthSqr()<sp/>&gt;<sp/>Square(<sp/>suspendVelocity[1]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;acceleration.SubVec3(0).LengthSqr()<sp/>&gt;<sp/>Square(<sp/>suspendAcceleration[0]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;acceleration.SubVec3(1).LengthSqr()<sp/>&gt;<sp/>Square(<sp/>suspendAcceleration[1]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>bodies<sp/>have<sp/>a<sp/>velocity<sp/>and<sp/>acceleration<sp/>small<sp/>enough<sp/>to<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5984"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5985"><highlight class="comment">idPhysics_AF::Rest</highlight></codeline>
<codeline lineno="5986"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5987"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Rest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;current-&gt;spatialVelocity.Zero();</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;current-&gt;externalForce.Zero();</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"></highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;BecomeInactive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="5999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"></highlight></codeline>
<codeline lineno="6001"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6002"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6003"><highlight class="comment">idPhysics_AF::Activate</highlight></codeline>
<codeline lineno="6004"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6005"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Activate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>articulated<sp/>figure<sp/>was<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normally<sp/>gravity<sp/>is<sp/>added<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>simulation<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>figure<sp/>was<sp/>at<sp/>rest<sp/>add<sp/>gravity<sp/>here<sp/>so<sp/>it<sp/>is<sp/>applied<sp/>this<sp/>simulation<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddGravity();</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>active<sp/>time<sp/>for<sp/>the<sp/>max<sp/>move<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.activateTime<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/>current.noMoveTime<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;BecomeActive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="6018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"></highlight></codeline>
<codeline lineno="6020"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6021"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6022"><highlight class="comment">idPhysics_AF::PutToRest</highlight></codeline>
<codeline lineno="6023"><highlight class="comment"></highlight></codeline>
<codeline lineno="6024"><highlight class="comment"><sp/><sp/>put<sp/>to<sp/>rest<sp/>untill<sp/>something<sp/>collides<sp/>with<sp/>this<sp/>physics<sp/>object</highlight></codeline>
<codeline lineno="6025"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6026"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6027"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::PutToRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="6029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"></highlight></codeline>
<codeline lineno="6031"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6032"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6033"><highlight class="comment">idPhysics_AF::EnableImpact</highlight></codeline>
<codeline lineno="6034"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6035"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::EnableImpact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6041"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6042"><highlight class="comment">idPhysics_AF::DisableImpact</highlight></codeline>
<codeline lineno="6043"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6044"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DisableImpact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6050"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6051"><highlight class="comment">idPhysics_AF::AddPushVelocity</highlight></codeline>
<codeline lineno="6052"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6053"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddPushVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>&amp;pushVelocity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pushVelocity<sp/>!=<sp/>vec6_origin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;current-&gt;spatialVelocity<sp/>+=<sp/>pushVelocity;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6065"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6066"><highlight class="comment">idPhysics_AF::SetClipModel</highlight></codeline>
<codeline lineno="6067"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6068"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetClipModel(<sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>density,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>freeOld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"></highlight></codeline>
<codeline lineno="6072"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6073"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6074"><highlight class="comment">idPhysics_AF::GetClipModel</highlight></codeline>
<codeline lineno="6075"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6076"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*idPhysics_AF::GetClipModel(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;GetClipModel();</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"></highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6086"><highlight class="comment">idPhysics_AF::GetNumClipModels</highlight></codeline>
<codeline lineno="6087"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6088"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6089"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetNumClipModels(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies.Num();</highlight></codeline>
<codeline lineno="6091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"></highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6094"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6095"><highlight class="comment">idPhysics_AF::SetMass</highlight></codeline>
<codeline lineno="6096"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6097"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetMass(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceTotalMass<sp/>=<sp/>mass;</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/>SetChanged();</highlight></codeline>
<codeline lineno="6105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6108"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6109"><highlight class="comment">idPhysics_AF::GetMass</highlight></codeline>
<codeline lineno="6110"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idPhysics_AF::GetMass(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;mass;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalMass;</highlight></codeline>
<codeline lineno="6117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6120"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6121"><highlight class="comment">idPhysics_AF::SetContents</highlight></codeline>
<codeline lineno="6122"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6123"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetContents(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"></highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[id]-&gt;GetClipModel()-&gt;SetContents(<sp/>contents<sp/>);</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;GetClipModel()-&gt;SetContents(<sp/>contents<sp/>);</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6138"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6139"><highlight class="comment">idPhysics_AF::GetContents</highlight></codeline>
<codeline lineno="6140"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetContents(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>contents;</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;GetClipModel()-&gt;GetContents();</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents<sp/>|=<sp/>bodies[i]-&gt;GetClipModel()-&gt;GetContents();</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contents;</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6158"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6159"><highlight class="comment">idPhysics_AF::GetBounds</highlight></codeline>
<codeline lineno="6160"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6161"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;idPhysics_AF::GetBounds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>relBounds;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;GetClipModel()-&gt;GetBounds();</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relBounds.Zero();</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>relBounds;</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relBounds<sp/>=<sp/>bodies[0]-&gt;GetClipModel()-&gt;GetBounds();</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin<sp/>=<sp/>(<sp/>bodies[i]-&gt;GetWorldOrigin()<sp/>-<sp/>bodies[0]-&gt;GetWorldOrigin()<sp/>)<sp/>*<sp/>bodies[0]-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis<sp/>=<sp/>bodies[i]-&gt;GetWorldAxis()<sp/>*<sp/>bodies[0]-&gt;GetWorldAxis().Transpose();</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.FromTransformedBounds(<sp/>bodies[i]-&gt;GetClipModel()-&gt;GetBounds(),<sp/>origin,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relBounds<sp/>+=<sp/>bounds;</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>relBounds;</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"></highlight></codeline>
<codeline lineno="6186"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6187"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6188"><highlight class="comment">idPhysics_AF::GetAbsBounds</highlight></codeline>
<codeline lineno="6189"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6190"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;idPhysics_AF::GetAbsBounds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>absBounds;</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;GetClipModel()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absBounds.Zero();</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absBounds;</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absBounds<sp/>=<sp/>bodies[0]-&gt;GetClipModel()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absBounds<sp/>+=<sp/>bodies[i]-&gt;GetClipModel()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absBounds;</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"></highlight></codeline>
<codeline lineno="6211"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6212"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6213"><highlight class="comment">idPhysics_AF::Evaluate</highlight></codeline>
<codeline lineno="6214"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6215"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::Evaluate(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeStepMSec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endTimeMSec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep;</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"></highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>timeScaleRampStart<sp/>&lt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>&amp;&amp;<sp/>timeScaleRampEnd<sp/>&gt;<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>MS2SEC(<sp/>timeStepMSec<sp/>)<sp/>*<sp/>(<sp/>MS2SEC(<sp/>endTimeMSec<sp/>)<sp/>-<sp/>timeScaleRampStart<sp/>)<sp/>/<sp/>(<sp/>timeScaleRampEnd<sp/>-<sp/>timeScaleRampStart<sp/>);</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_timeScale.GetFloat()<sp/>!=<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>MS2SEC(<sp/>timeStepMSec<sp/>)<sp/>*<sp/>af_timeScale.GetFloat();</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>MS2SEC(<sp/>timeStepMSec<sp/>)<sp/>*<sp/>timeScale;</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/>current.lastTimeStep<sp/>=<sp/>timeStep;</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"></highlight></codeline>
<codeline lineno="6228"><highlight class="normal"></highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>articulated<sp/>figure<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>changedAF<sp/>||<sp/>(<sp/>linearTime<sp/>!=<sp/>af_useLinearTime.GetBool()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BuildTrees();</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearTime<sp/>=<sp/>af_useLinearTime.GetBool();</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"></highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>new<sp/>master<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(<sp/>masterBody-&gt;current-&gt;worldOrigin<sp/>!=<sp/>masterOrigin<sp/>||<sp/>masterBody-&gt;current-&gt;worldAxis<sp/>!=<sp/>masterAxis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;current-&gt;worldOrigin<sp/>=<sp/>masterOrigin;</highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;current-&gt;worldAxis<sp/>=<sp/>masterAxis;</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"></highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>simulation<sp/>is<sp/>suspended<sp/>because<sp/>the<sp/>figure<sp/>is<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>||<sp/>timeStep<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugDraw();</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"></highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>af<sp/>velocity<sp/>into<sp/>the<sp/>frame<sp/>of<sp/>a<sp/>pusher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/>AddPushVelocity(<sp/>-current.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"></highlight></codeline>
<codeline lineno="6257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6258"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_total.Start();</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6260"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6262"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Start();</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6264"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>contacts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/>EvaluateContacts();</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"></highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>contact<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupContactConstraints();</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6272"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Stop();</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6274"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>constraint<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/>EvaluateConstraints(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"></highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplyFriction(<sp/>timeStep,<sp/>endTimeMSec<sp/>);</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"></highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>frame<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFrameConstraints();</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"></highlight></codeline>
<codeline lineno="6284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6285"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>numPrimary<sp/>=<sp/>0,<sp/>numAuxiliary<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>primaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPrimary<sp/>+=<sp/>primaryConstraints[i]-&gt;J1.GetNumRows();</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAuxiliary<sp/>+=<sp/>auxiliaryConstraints[i]-&gt;J1.GetNumRows();</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_pc.Start();</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6294"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>matrices<sp/>for<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/>PrimaryFactor();</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>forces<sp/>on<sp/>bodies<sp/>after<sp/>applying<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/>PrimaryForces(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"></highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6302"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_pc.Stop();</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_ac.Start();</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6305"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>and<sp/>apply<sp/>auxiliary<sp/>constraint<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/>AuxiliaryForces(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"></highlight></codeline>
<codeline lineno="6309"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6310"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_ac.Stop();</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6312"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evolve<sp/>current<sp/>state<sp/>to<sp/>next<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/>Evolve(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"></highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>graphics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugDraw();</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"></highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>external<sp/>forces<sp/>on<sp/>all<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearExternalForce();</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>contact<sp/>force<sp/>to<sp/>other<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplyContactForces();</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"></highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>frame<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveFrameConstraints();</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"></highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6329"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Start();</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6331"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>collisions<sp/>between<sp/>current<sp/>and<sp/>next<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckForCollisions(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"></highlight></codeline>
<codeline lineno="6335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6336"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Stop();</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6338"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>current<sp/>and<sp/>next<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/>SwapStates();</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>all<sp/>clip<sp/>models<sp/>are<sp/>disabled<sp/>in<sp/>case<sp/>they<sp/>were<sp/>enabled<sp/>for<sp/>self<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>selfCollision<sp/>&amp;&amp;<sp/>!af_skipSelfCollision.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DisableClip();</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>collision<sp/>impulses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ApplyCollisions(<sp/>timeStep<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comeToRest<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>the<sp/>simulation<sp/>can<sp/>be<sp/>suspended<sp/>because<sp/>the<sp/>whole<sp/>figure<sp/>is<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>comeToRest<sp/>&amp;&amp;<sp/>TestIfAtRest(<sp/>timeStep<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ActivateContactEntities();</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"></highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>gravitational<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/>AddGravity();</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>af<sp/>velocity<sp/>back<sp/>into<sp/>the<sp/>world<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/>AddPushVelocity(<sp/>current.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity.Zero();</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsOutsideWorld()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;articulated<sp/>figure<sp/>moved<sp/>outside<sp/>world<sp/>bounds<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;<sp/>at<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname,<sp/>bodies[0]-&gt;current-&gt;worldOrigin.ToString(0)<sp/>);</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"></highlight></codeline>
<codeline lineno="6373"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6374"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_total.Stop();</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showTimings.GetInteger()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%12s:<sp/>t<sp/>%1.4f<sp/>pc<sp/>%2d,<sp/>%1.4f<sp/>ac<sp/>%2d<sp/>%1.4f<sp/>lcp<sp/>%1.4f<sp/>cd<sp/>%1.4f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Milliseconds(),</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPrimary,<sp/>timer_pc.Milliseconds(),</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAuxiliary,<sp/>timer_ac.Milliseconds()<sp/>-<sp/>timer_lcp.Milliseconds(),</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_lcp.Milliseconds(),<sp/>timer_collision.Milliseconds()<sp/>);</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showTimings.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numArticulatedFigures++;</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>endTimeMSec<sp/>&gt;<sp/>lastTimerReset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;af<sp/>%d:<sp/>t<sp/>%1.4f<sp/>pc<sp/>%2d,<sp/>%1.4f<sp/>ac<sp/>%2d<sp/>%1.4f<sp/>lcp<sp/>%1.4f<sp/>cd<sp/>%1.4f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numArticulatedFigures,</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Milliseconds(),</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPrimary,<sp/>timer_pc.Milliseconds(),</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAuxiliary,<sp/>timer_ac.Milliseconds()<sp/>-<sp/>timer_lcp.Milliseconds(),</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_lcp.Milliseconds(),<sp/>timer_collision.Milliseconds()<sp/>);</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"></highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>endTimeMSec<sp/>&gt;<sp/>lastTimerReset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTimerReset<sp/>=<sp/>endTimeMSec;</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numArticulatedFigures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Clear();</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_pc.Clear();</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_ac.Clear();</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_collision.Clear();</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_lcp.Clear();</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6406"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"></highlight></codeline>
<codeline lineno="6410"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6411"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6412"><highlight class="comment">idPhysics_AF::UpdateTime</highlight></codeline>
<codeline lineno="6413"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6414"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::UpdateTime(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endTimeMSec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6419"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6420"><highlight class="comment">idPhysics_AF::GetTime</highlight></codeline>
<codeline lineno="6421"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6422"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="6425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6428"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6429"><highlight class="comment">DrawTraceModelSilhouette</highlight></codeline>
<codeline lineno="6430"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6431"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawTraceModelSilhouette(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;projectionOrigin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>numSilEdges;</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>silEdges[MAX_TRACEMODEL_EDGES];</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v1,<sp/>v2;</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_trace_model" kindref="compound">idTraceModel</ref><sp/>*trm<sp/>=<sp/>clipModel-&gt;GetTraceModel();</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin<sp/>=<sp/>clipModel-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>=<sp/>clipModel-&gt;GetAxis();</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"></highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/>numSilEdges<sp/>=<sp/>trm-&gt;GetProjectionSilhouetteEdges(<sp/>(<sp/>projectionOrigin<sp/>-<sp/>origin<sp/>)<sp/>*<sp/>axis.Transpose(),<sp/>silEdges<sp/>);</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numSilEdges;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>trm-&gt;verts[<sp/>trm-&gt;edges[<sp/>abs(silEdges[i])<sp/>].v[<sp/>INTSIGNBITSET(<sp/>silEdges[i]<sp/>)<sp/>]<sp/>];</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>trm-&gt;verts[<sp/>trm-&gt;edges[<sp/>abs(silEdges[i])<sp/>].v[<sp/>INTSIGNBITNOTSET(<sp/>silEdges[i]<sp/>)<sp/>]<sp/>];</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorRed,<sp/>origin<sp/>+<sp/>v1<sp/>*<sp/>axis,<sp/>origin<sp/>+<sp/>v2<sp/>*<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"></highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6449"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6450"><highlight class="comment">idPhysics_AF::DebugDraw</highlight></codeline>
<codeline lineno="6451"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6452"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/>*highlightBody<sp/>=<sp/>NULL,<sp/>*constrainedBody1<sp/>=<sp/>NULL,<sp/>*constrainedBody2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint;</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>center;</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_highlightConstraint.GetString()[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>GetConstraint(<sp/>af_highlightConstraint.GetString()<sp/>);</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;GetCenter(<sp/>center<sp/>);</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3();</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCone(<sp/>colorYellow,<sp/>center,<sp/>(axis[2]<sp/>-<sp/>axis[1])<sp/>*<sp/>4.0f,<sp/>0.0f,<sp/>1.0f,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"></highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showConstrainedBodies.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;cm_drawColor&quot;</highlight><highlight class="normal">,<sp/>colorCyan.ToString(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constrainedBody1<sp/>=<sp/>constraint-&gt;body1;</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constrainedBody1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>constrainedBody1-&gt;clipModel-&gt;Handle(),<sp/>constrainedBody1-&gt;clipModel-&gt;GetOrigin(),</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constrainedBody1-&gt;clipModel-&gt;GetAxis(),<sp/>vec3_origin,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;cm_drawColor&quot;</highlight><highlight class="normal">,<sp/>colorBlue.ToString(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constrainedBody2<sp/>=<sp/>constraint-&gt;body2;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constrainedBody2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>constrainedBody2-&gt;clipModel-&gt;Handle(),<sp/>constrainedBody2-&gt;clipModel-&gt;GetOrigin(),</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constrainedBody2-&gt;clipModel-&gt;GetAxis(),<sp/>vec3_origin,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;cm_drawColor&quot;</highlight><highlight class="normal">,<sp/>colorRed.ToString(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"></highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_highlightBody.GetString()[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highlightBody<sp/>=<sp/>GetBody(<sp/>af_highlightBody.GetString()<sp/>);</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>highlightBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;cm_drawColor&quot;</highlight><highlight class="normal">,<sp/>colorYellow.ToString(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>highlightBody-&gt;clipModel-&gt;Handle(),<sp/>highlightBody-&gt;clipModel-&gt;GetOrigin(),</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highlightBody-&gt;clipModel-&gt;GetAxis(),<sp/>vec3_origin,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;cm_drawColor&quot;</highlight><highlight class="normal">,<sp/>colorRed.ToString(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"></highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showBodies.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>==<sp/>constrainedBody1<sp/>||<sp/>body<sp/>==<sp/>constrainedBody2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>==<sp/>highlightBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>body-&gt;clipModel-&gt;Handle(),<sp/>body-&gt;clipModel-&gt;GetOrigin(),</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel-&gt;GetAxis(),<sp/>vec3_origin,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DrawTraceModelSilhouette(<sp/>gameLocal.GetLocalPlayer()-&gt;GetEyePosition(),<sp/>body-&gt;clipModel<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"></highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showBodyNames.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>body-&gt;GetName().c_str(),<sp/>body-&gt;GetWorldOrigin(),<sp/>0.08f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showMass.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;\n%1.2f&quot;</highlight><highlight class="normal">,<sp/>1.0f<sp/>/<sp/>body-&gt;GetInverseMass()<sp/>),<sp/>body-&gt;GetWorldOrigin(),<sp/>0.08f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showTotalMass.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3();</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;\n%1.2f&quot;</highlight><highlight class="normal">,<sp/>totalMass<sp/>),<sp/>bodies[0]-&gt;GetWorldOrigin()<sp/>+<sp/>axis[2]<sp/>*<sp/>8.0f,<sp/>0.15f,<sp/>colorCyan,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showInertia.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;I<sp/>=<sp/>body-&gt;inertiaTensor;</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[0].x,<sp/>I[0].y,<sp/>I[0].z,</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[1].x,<sp/>I[1].y,<sp/>I[1].z,</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[2].x,<sp/>I[2].y,<sp/>I[2].z<sp/>),</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetWorldOrigin(),<sp/>0.05f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showVelocity.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawVelocity(<sp/>bodies[i]-&gt;clipModel-&gt;GetId(),<sp/>0.1f,<sp/>4.0f<sp/>);</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"></highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showConstraints.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>primaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>primaryConstraints[i];</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!af_showPrimaryOnly.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;DebugDraw();</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"></highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showConstraintNames.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>primaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>primaryConstraints[i];</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;GetCenter(<sp/>center<sp/>);</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>constraint-&gt;GetName().c_str(),<sp/>center,<sp/>0.08f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!af_showPrimaryOnly.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>auxiliaryConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>=<sp/>auxiliaryConstraints[i];</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint-&gt;GetCenter(<sp/>center<sp/>);</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>constraint-&gt;GetName().c_str(),<sp/>center,<sp/>0.08f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"></highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_showTrees.GetBool()<sp/>||<sp/>(<sp/>af_showActive.GetBool()<sp/>&amp;&amp;<sp/>current.atRest<sp/>&lt;<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trees.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees[i]-&gt;DebugDraw(<sp/>idStr::ColorForIndex(<sp/>i+3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6583"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6584"><highlight class="comment">idPhysics_AF::idPhysics_AF</highlight></codeline>
<codeline lineno="6585"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6586"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal">idPhysics_AF::idPhysics_AF(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/><sp/>trees.Clear();</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies.Clear();</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/>constraints.Clear();</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryConstraints.Clear();</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/>auxiliaryConstraints.Clear();</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/>frameConstraints.Clear();</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/>contacts.Clear();</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/>collisions.Clear();</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/>masterBody<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/>lcp<sp/>=<sp/>idLCP::AllocSymmetric();</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"></highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;current,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>current<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/>current.lastTimeStep<sp/>=<sp/>USERCMD_MSEC;</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"></highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFriction<sp/>=<sp/>0.005f;</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/>angularFriction<sp/>=<sp/>0.005f;</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFriction<sp/>=<sp/>0.8f;</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/>bouncyness<sp/>=<sp/>0.4f;</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/>totalMass<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/>forceTotalMass<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"></highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/>suspendVelocity.Set(<sp/>SUSPEND_LINEAR_VELOCITY,<sp/>SUSPEND_ANGULAR_VELOCITY<sp/>);</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/>suspendAcceleration.Set(<sp/>SUSPEND_LINEAR_ACCELERATION,<sp/>SUSPEND_LINEAR_ACCELERATION<sp/>);</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/>noMoveTime<sp/>=<sp/>NO_MOVE_TIME;</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/>noMoveTranslation<sp/>=<sp/>NO_MOVE_TRANSLATION_TOLERANCE;</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/>noMoveRotation<sp/>=<sp/>NO_MOVE_ROTATION_TOLERANCE;</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/>minMoveTime<sp/>=<sp/>MIN_MOVE_TIME;</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/>maxMoveTime<sp/>=<sp/>MAX_MOVE_TIME;</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/>impulseThreshold<sp/>=<sp/>IMPULSE_THRESHOLD;</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"></highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/>timeScale<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/>timeScaleRampStart<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/>timeScaleRampEnd<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"></highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDent<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDentStart<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDentEnd<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/>jointFrictionDentScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"></highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDent<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDentStart<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDentEnd<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFrictionDentScale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"></highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/>enableCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/>selfCollision<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/>comeToRest<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/>linearTime<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/>worldConstraintsLocked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/>forcePushable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"></highlight></codeline>
<codeline lineno="6646"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AF_TIMINGS</highlight></codeline>
<codeline lineno="6647"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>lastTimerReset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6649"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"></highlight></codeline>
<codeline lineno="6651"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6652"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6653"><highlight class="comment">idPhysics_AF::~idPhysics_AF</highlight></codeline>
<codeline lineno="6654"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6655"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6656"><highlight class="normal">idPhysics_AF::~idPhysics_AF(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"></highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/>trees.DeleteContents(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bodies[i];</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"></highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>constraints[i];</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"></highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/>contactConstraints.SetNum(<sp/>contactConstraints.NumAllocated(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.NumAllocated();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>contactConstraints[i];</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>lcp;</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>masterBody;</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6682"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6683"><highlight class="comment">idPhysics_AF_SavePState</highlight></codeline>
<codeline lineno="6684"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6685"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF_SavePState(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_f_p_state__s" kindref="compound">AFPState_t</ref><sp/>&amp;state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteInt(<sp/>state.atRest<sp/>);</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>state.noMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>state.activateTime<sp/>);</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>state.lastTimeStep<sp/>);</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec6(<sp/>state.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="6692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6695"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6696"><highlight class="comment">idPhysics_AF_RestorePState</highlight></codeline>
<codeline lineno="6697"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6698"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF_RestorePState(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile,<sp/><ref refid="struct_a_f_p_state__s" kindref="compound">AFPState_t</ref><sp/>&amp;state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadInt(<sp/>state.atRest<sp/>);</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>state.noMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>state.activateTime<sp/>);</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>state.lastTimeStep<sp/>);</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec6(<sp/>state.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="6705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"></highlight></codeline>
<codeline lineno="6707"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6708"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6709"><highlight class="comment">idPhysics_AF::Save</highlight></codeline>
<codeline lineno="6710"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6711"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*saveFile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>articulated<sp/>figure<sp/>structure<sp/>is<sp/>handled<sp/>by<sp/>the<sp/>owner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_AF_SavePState(<sp/>saveFile,<sp/>current<sp/>);</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_AF_SavePState(<sp/>saveFile,<sp/>saved<sp/>);</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"></highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteInt(<sp/>bodies.Num()<sp/>);</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteInt(<sp/>constraints.Num()<sp/>);</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Save(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"></highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>changedAF<sp/>);</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>totalMass<sp/>);</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>forceTotalMass<sp/>);</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec2(<sp/>suspendVelocity<sp/>);</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteVec2(<sp/>suspendAcceleration<sp/>);</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>noMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>noMoveTranslation<sp/>);</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>noMoveRotation<sp/>);</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>minMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>maxMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>impulseThreshold<sp/>);</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>timeScale<sp/>);</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>timeScaleRampStart<sp/>);</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>timeScaleRampEnd<sp/>);</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"></highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>jointFrictionScale<sp/>);</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>jointFrictionDent<sp/>);</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>jointFrictionDentStart<sp/>);</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>jointFrictionDentEnd<sp/>);</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>jointFrictionDentScale<sp/>);</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"></highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFrictionScale<sp/>);</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFrictionDent<sp/>);</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFrictionDentStart<sp/>);</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFrictionDentEnd<sp/>);</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteFloat(<sp/>contactFrictionDentScale<sp/>);</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"></highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>enableCollision<sp/>);</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>selfCollision<sp/>);</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>comeToRest<sp/>);</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>linearTime<sp/>);</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>noImpact<sp/>);</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>worldConstraintsLocked<sp/>);</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;WriteBool(<sp/>forcePushable<sp/>);</highlight></codeline>
<codeline lineno="6777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6780"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6781"><highlight class="comment">idPhysics_AF::Restore</highlight></codeline>
<codeline lineno="6782"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6783"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*saveFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num;</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMaster;</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>articulated<sp/>figure<sp/>structure<sp/>should<sp/>have<sp/>already<sp/>been<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6789"><highlight class="normal"></highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_AF_RestorePState(<sp/>saveFile,<sp/>current<sp/>);</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_AF_RestorePState(<sp/>saveFile,<sp/>saved<sp/>);</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"></highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>num<sp/>==<sp/>bodies.Num()<sp/>);</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>hasMaster<sp/>);</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref>();</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"></highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>num<sp/>==<sp/>constraints.Num()<sp/>);</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Restore(<sp/>saveFile<sp/>);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>changedAF<sp/>);</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"></highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>totalMass<sp/>);</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>forceTotalMass<sp/>);</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"></highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec2(<sp/>suspendVelocity<sp/>);</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadVec2(<sp/>suspendAcceleration<sp/>);</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>noMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>noMoveTranslation<sp/>);</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>noMoveRotation<sp/>);</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>minMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>maxMoveTime<sp/>);</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>impulseThreshold<sp/>);</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"></highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>timeScale<sp/>);</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>timeScaleRampStart<sp/>);</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>timeScaleRampEnd<sp/>);</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"></highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>jointFrictionScale<sp/>);</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>jointFrictionDent<sp/>);</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>jointFrictionDentStart<sp/>);</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>jointFrictionDentEnd<sp/>);</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>jointFrictionDentScale<sp/>);</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"></highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFrictionScale<sp/>);</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFrictionDent<sp/>);</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFrictionDentStart<sp/>);</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFrictionDentEnd<sp/>);</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadFloat(<sp/>contactFrictionDentScale<sp/>);</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"></highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>enableCollision<sp/>);</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>selfCollision<sp/>);</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>comeToRest<sp/>);</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>linearTime<sp/>);</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>noImpact<sp/>);</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>worldConstraintsLocked<sp/>);</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/>saveFile-&gt;ReadBool(<sp/>forcePushable<sp/>);</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"></highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateClipModels();</highlight></codeline>
<codeline lineno="6855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight></codeline>
<codeline lineno="6857"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6858"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6859"><highlight class="comment">idPhysics_AF::IsClosedLoop</highlight></codeline>
<codeline lineno="6860"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6861"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6862"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::IsClosedLoop(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body2<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b1,<sp/>*b2;</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"></highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>b1<sp/>=<sp/>body1;<sp/>b1-&gt;parent;<sp/>b1<sp/>=<sp/>b1-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>b2<sp/>=<sp/>body2;<sp/>b2-&gt;parent;<sp/>b2<sp/>=<sp/>b2-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>b1<sp/>==<sp/>b2<sp/>);</highlight></codeline>
<codeline lineno="6870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"></highlight></codeline>
<codeline lineno="6872"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6873"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6874"><highlight class="comment">idPhysics_AF::BuildTrees</highlight></codeline>
<codeline lineno="6875"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6876"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::BuildTrees(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b;</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*c;</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_tree" kindref="compound">idAFTree</ref><sp/>*tree;</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryConstraints.Clear();</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/>auxiliaryConstraints.Clear();</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/>trees.DeleteContents(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"></highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/>totalMass<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;primaryConstraint<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;constraints.SetNum(<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;children.Clear();</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;tree<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalMass<sp/>+=<sp/>b-&gt;mass;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"></highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>forceTotalMass<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>forceTotalMass<sp/>/<sp/>totalMass;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;mass<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;invMass<sp/>=<sp/>1.0f<sp/>/<sp/>b-&gt;mass;</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;inertiaTensor<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;inverseInertiaTensor<sp/>=<sp/>b-&gt;inertiaTensor.Inverse();</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalMass<sp/>=<sp/>forceTotalMass;</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"></highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af_useLinearTime.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>constraints[i];</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"></highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body1-&gt;constraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body2-&gt;constraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"></highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>bilateral<sp/>constraints<sp/>between<sp/>two<sp/>non-world<sp/>bodies<sp/>that<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>loops<sp/>can<sp/>be<sp/>used<sp/>as<sp/>primary<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!c-&gt;body1-&gt;primaryConstraint<sp/>&amp;&amp;<sp/>c-&gt;fl.allowPrimary<sp/>&amp;&amp;<sp/>c-&gt;body2<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!IsClosedLoop(<sp/>c-&gt;body1,<sp/>c-&gt;body2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body1-&gt;primaryConstraint<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body1-&gt;parent<sp/>=<sp/>c-&gt;body2;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body2-&gt;children.Append(<sp/>c-&gt;body1<sp/>);</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fl.isPrimary<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;firstIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primaryConstraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fl.isPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"></highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>trees<sp/>for<sp/>all<sp/>parent<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies[i]-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_tree" kindref="compound">idAFTree</ref>();</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;sortedBodies.Clear();</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;sortedBodies.Append(<sp/>bodies[i]<sp/>);</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;tree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees.Append(<sp/>tree<sp/>);</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>each<sp/>child<sp/>body<sp/>to<sp/>the<sp/>appropriate<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodies[i]-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>=<sp/>bodies[i]-&gt;parent;<sp/>!b-&gt;tree;<sp/>b<sp/>=<sp/>b-&gt;parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;tree-&gt;sortedBodies.Append(<sp/>bodies[i]<sp/>);</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;tree<sp/>=<sp/>b-&gt;tree;</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trees.Num()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Articulated<sp/>figure<sp/>has<sp/>multiple<sp/>seperate<sp/>tree<sp/>structures<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>bodies<sp/>in<sp/>each<sp/>tree<sp/>to<sp/>make<sp/>sure<sp/>parents<sp/>come<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trees.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees[i]-&gt;SortBodies();</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"></highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>tree<sp/>for<sp/>each<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_tree" kindref="compound">idAFTree</ref>();</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;sortedBodies.Clear();</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;sortedBodies.Append(<sp/>bodies[i]<sp/>);</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;tree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees.Append(<sp/>tree<sp/>);</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"></highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>constraints[i];</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"></highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body1-&gt;constraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;body2-&gt;constraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"></highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fl.isPrimary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxiliaryConstraints.Append(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6993"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6994"><highlight class="comment">idPhysics_AF::AddBody</highlight></codeline>
<codeline lineno="6995"><highlight class="comment"></highlight></codeline>
<codeline lineno="6996"><highlight class="comment"><sp/><sp/>bodies<sp/>get<sp/>an<sp/>id<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>added<sp/>starting<sp/>at<sp/>zero</highlight></codeline>
<codeline lineno="6997"><highlight class="comment"><sp/><sp/>as<sp/>such<sp/>the<sp/>first<sp/>body<sp/>added<sp/>will<sp/>get<sp/>id<sp/>zero</highlight></codeline>
<codeline lineno="6998"><highlight class="comment">================</highlight></codeline>
<codeline lineno="6999"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::AddBody(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"></highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddBody:<sp/>body<sp/>&apos;%s&apos;<sp/>has<sp/>no<sp/>clip<sp/>model.&quot;</highlight><highlight class="normal">,<sp/>body-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodies.Find(<sp/>body<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddBody:<sp/>body<sp/>&apos;%s&apos;<sp/>added<sp/>twice.&quot;</highlight><highlight class="normal">,<sp/>body-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetBody(<sp/>body-&gt;name<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddBody:<sp/>a<sp/>body<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>already<sp/>exists.&quot;</highlight><highlight class="normal">,<sp/>body-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>bodies.Num();</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/>body-&gt;clipModel-&gt;SetId(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;linearFriction<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;linearFriction<sp/>=<sp/>linearFriction;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;angularFriction<sp/>=<sp/>angularFriction;</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;contactFriction<sp/>=<sp/>contactFriction;</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;bouncyness<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;bouncyness<sp/>=<sp/>bouncyness;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!body-&gt;fl.clipMaskSet<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipMask<sp/>=<sp/>clipMask;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"></highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies.Append(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"></highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"></highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"></highlight></codeline>
<codeline lineno="7036"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7037"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7038"><highlight class="comment">idPhysics_AF::AddConstraint</highlight></codeline>
<codeline lineno="7039"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7040"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddConstraint(<sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints.Find(<sp/>constraint<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>constraint<sp/>&apos;%s&apos;<sp/>added<sp/>twice.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetConstraint(<sp/>constraint-&gt;name<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>a<sp/>constraint<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>already<sp/>exists.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!constraint-&gt;body1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>body1<sp/>==<sp/>NULL<sp/>on<sp/>constraint<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies.Find(<sp/>constraint-&gt;body1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>body1<sp/>of<sp/>constraint<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body2<sp/>&amp;&amp;<sp/>!bodies.Find(<sp/>constraint-&gt;body2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>body2<sp/>of<sp/>constraint<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraint-&gt;body1<sp/>==<sp/>constraint-&gt;body2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_AF::AddConstraint:<sp/>body1<sp/>and<sp/>body2<sp/>of<sp/>constraint<sp/>&apos;%s&apos;<sp/>are<sp/>the<sp/>same.&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"></highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/>constraints.Append(<sp/>constraint<sp/>);</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;physics<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"></highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7069"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7070"><highlight class="comment">idPhysics_AF::AddFrameConstraint</highlight></codeline>
<codeline lineno="7071"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7072"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7073"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddFrameConstraint(<sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/>frameConstraints.Append(<sp/>constraint<sp/>);</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;physics<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7079"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7080"><highlight class="comment">idPhysics_AF::ForceBodyId</highlight></codeline>
<codeline lineno="7081"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7082"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ForceBodyId(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"></highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>bodies.FindIndex(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;ForceBodyId:<sp/>body<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.\n&quot;</highlight><highlight class="normal">,<sp/>body-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>newId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*b<sp/>=<sp/>bodies[newId];</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[newId]<sp/>=<sp/>bodies[id];</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[id]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"></highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7099"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7100"><highlight class="comment">idPhysics_AF::GetBodyId</highlight></codeline>
<codeline lineno="7101"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetBodyId(<sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"></highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>bodies.FindIndex(<sp/>body<sp/>);</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetBodyId:<sp/>body<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.\n&quot;</highlight><highlight class="normal">,<sp/>body-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7114"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7115"><highlight class="comment">idPhysics_AF::GetBodyId</highlight></codeline>
<codeline lineno="7116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetBodyId(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bodyName<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"></highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies[i]-&gt;name.Icmp(<sp/>bodyName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetBodyId:<sp/>no<sp/>body<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.\n&quot;</highlight><highlight class="normal">,<sp/>bodyName<sp/>);</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"></highlight></codeline>
<codeline lineno="7130"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7131"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7132"><highlight class="comment">idPhysics_AF::GetConstraintId</highlight></codeline>
<codeline lineno="7133"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7135"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetConstraintId(<sp/><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*constraint<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"></highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>constraints.FindIndex(<sp/>constraint<sp/>);</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>constraint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetConstraintId:<sp/>constraint<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.\n&quot;</highlight><highlight class="normal">,<sp/>constraint-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="7143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"></highlight></codeline>
<codeline lineno="7145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7146"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7147"><highlight class="comment">idPhysics_AF::GetConstraintId</highlight></codeline>
<codeline lineno="7148"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7149"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7150"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetConstraintId(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*constraintName<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"></highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints[i]-&gt;name.Icmp(<sp/>constraintName<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetConstraintId:<sp/>no<sp/>constraint<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>articulated<sp/>figure.\n&quot;</highlight><highlight class="normal">,<sp/>constraintName<sp/>);</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"></highlight></codeline>
<codeline lineno="7162"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7163"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7164"><highlight class="comment">idPhysics_AF::GetNumBodies</highlight></codeline>
<codeline lineno="7165"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7166"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7167"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetNumBodies(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies.Num();</highlight></codeline>
<codeline lineno="7169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"></highlight></codeline>
<codeline lineno="7171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7172"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7173"><highlight class="comment">idPhysics_AF::GetNumConstraints</highlight></codeline>
<codeline lineno="7174"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7175"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetNumConstraints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constraints.Num();</highlight></codeline>
<codeline lineno="7178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"></highlight></codeline>
<codeline lineno="7180"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7181"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7182"><highlight class="comment">idPhysics_AF::GetBody</highlight></codeline>
<codeline lineno="7183"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7184"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*idPhysics_AF::GetBody(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bodyName<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies[i]-&gt;name.Icmp(<sp/>bodyName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[i];</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"></highlight></codeline>
<codeline lineno="7197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7198"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7199"><highlight class="comment">idPhysics_AF::GetBody</highlight></codeline>
<codeline lineno="7200"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*idPhysics_AF::GetBody(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetBody:<sp/>no<sp/>body<sp/>with<sp/>id<sp/>%d<sp/>exists\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id];</highlight></codeline>
<codeline lineno="7208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"></highlight></codeline>
<codeline lineno="7210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7211"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7212"><highlight class="comment">idPhysics_AF::GetConstraint</highlight></codeline>
<codeline lineno="7213"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7214"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*idPhysics_AF::GetConstraint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*constraintName<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"></highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints[i]-&gt;name.Icmp(<sp/>constraintName<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constraints[i];</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"></highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"></highlight></codeline>
<codeline lineno="7227"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7228"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7229"><highlight class="comment">idPhysics_AF::GetConstraint</highlight></codeline>
<codeline lineno="7230"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7231"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><ref refid="classid_a_f_constraint" kindref="compound">idAFConstraint</ref><sp/>*idPhysics_AF::GetConstraint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>constraints.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;GetConstraint:<sp/>no<sp/>constraint<sp/>with<sp/>id<sp/>%d<sp/>exists\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constraints[id];</highlight></codeline>
<codeline lineno="7238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"></highlight></codeline>
<codeline lineno="7240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7241"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7242"><highlight class="comment">idPhysics_AF::DeleteBody</highlight></codeline>
<codeline lineno="7243"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7244"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DeleteBody(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bodyName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"></highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>body<sp/>with<sp/>the<sp/>given<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bodies[i]-&gt;name.Icmp(<sp/>bodyName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"></highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;DeleteBody:<sp/>no<sp/>body<sp/>found<sp/>in<sp/>the<sp/>articulated<sp/>figure<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodyName,<sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"></highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/>DeleteBody(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="7262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"></highlight></codeline>
<codeline lineno="7264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7266"><highlight class="comment">idPhysics_AF::DeleteBody</highlight></codeline>
<codeline lineno="7267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DeleteBody(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"></highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;DeleteBody:<sp/>no<sp/>body<sp/>with<sp/>id<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"></highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>any<sp/>constraints<sp/>attached<sp/>to<sp/>this<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>constraints.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints[j]-&gt;body1<sp/>==<sp/>bodies[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>||<sp/>constraints[j]-&gt;body2<sp/>==<sp/>bodies[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>constraints[j];</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints.RemoveIndex(<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bodies[id];</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies.RemoveIndex(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"></highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>body<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>bodies.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[j]-&gt;clipModel-&gt;SetId(<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"></highlight></codeline>
<codeline lineno="7298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7299"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7300"><highlight class="comment">idPhysics_AF::DeleteConstraint</highlight></codeline>
<codeline lineno="7301"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7302"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DeleteConstraint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*constraintName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>constraint<sp/>with<sp/>the<sp/>given<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!constraints[i]-&gt;name.Icmp(<sp/>constraintName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"></highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>constraints.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;DeleteConstraint:<sp/>no<sp/>constriant<sp/>found<sp/>in<sp/>the<sp/>articulated<sp/>figure<sp/>with<sp/>the<sp/>name<sp/>&apos;%s&apos;<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintName,<sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"></highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/>DeleteConstraint(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="7320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"></highlight></codeline>
<codeline lineno="7322"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7323"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7324"><highlight class="comment">idPhysics_AF::DeleteConstraint</highlight></codeline>
<codeline lineno="7325"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7326"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DeleteConstraint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"></highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>constraints.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;DeleteConstraint:<sp/>no<sp/>constraint<sp/>with<sp/>id<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"></highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>constraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>constraints[id];</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/>constraints.RemoveIndex(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"></highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/>changedAF<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"></highlight></codeline>
<codeline lineno="7341"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7342"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7343"><highlight class="comment">idPhysics_AF::GetBodyContactConstraints</highlight></codeline>
<codeline lineno="7344"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7345"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7346"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetBodyContactConstraints(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classid_a_f_constraint___contact" kindref="compound">idAFConstraint_Contact</ref><sp/>*contacts[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxContacts<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>numContacts;</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_constraint___contact" kindref="compound">idAFConstraint_Contact</ref><sp/>*contact;</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"></highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>||<sp/>maxContacts<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/>numContacts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[id];</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contactConstraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact<sp/>=<sp/>contactConstraints[i];</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contact-&gt;body1<sp/>==<sp/>body<sp/>||<sp/>contact-&gt;body2<sp/>==<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contacts[numContacts++]<sp/>=<sp/>contact;</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numContacts<sp/>&gt;=<sp/>maxContacts<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numContacts;</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numContacts;</highlight></codeline>
<codeline lineno="7367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"></highlight></codeline>
<codeline lineno="7369"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7370"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7371"><highlight class="comment">idPhysics_AF::SetDefaultFriction</highlight></codeline>
<codeline lineno="7372"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7373"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetDefaultFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>linear,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angular,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>contact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>linear<sp/>&lt;<sp/>0.0f<sp/>||<sp/>linear<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>&lt;<sp/>0.0f<sp/>||<sp/>angular<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact<sp/>&lt;<sp/>0.0f<sp/>||<sp/>contact<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFriction<sp/>=<sp/>linear;</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/>angularFriction<sp/>=<sp/>angular;</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFriction<sp/>=<sp/>contact;</highlight></codeline>
<codeline lineno="7383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"></highlight></codeline>
<codeline lineno="7385"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7386"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7387"><highlight class="comment">idPhysics_AF::GetImpactInfo</highlight></codeline>
<codeline lineno="7388"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7389"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::GetImpactInfo(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/><ref refid="structimpact_info__s" kindref="compound">impactInfo_t</ref><sp/>*info<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>info,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*info<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;invMass<sp/>=<sp/>1.0f<sp/>/<sp/>bodies[id]-&gt;mass;</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;invInertiaTensor<sp/>=<sp/>bodies[id]-&gt;current-&gt;worldAxis.Transpose()<sp/>*<sp/>bodies[id]-&gt;inverseInertiaTensor<sp/>*<sp/>bodies[id]-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;position<sp/>=<sp/>point<sp/>-<sp/>bodies[id]-&gt;current-&gt;worldOrigin;</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;velocity<sp/>=<sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(0)<sp/>+<sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(1).Cross(<sp/>info-&gt;position<sp/>);</highlight></codeline>
<codeline lineno="7399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"></highlight></codeline>
<codeline lineno="7401"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7402"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7403"><highlight class="comment">idPhysics_AF::ApplyImpulse</highlight></codeline>
<codeline lineno="7404"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7405"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ApplyImpulse(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;impulse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noImpact<sp/>||<sp/>impulse.LengthSqr()<sp/>&lt;<sp/>Square(<sp/>impulseThreshold<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>invWorldInertiaTensor<sp/>=<sp/>bodies[id]-&gt;current-&gt;worldAxis.Transpose()<sp/>*<sp/>bodies[id]-&gt;inverseInertiaTensor<sp/>*<sp/>bodies[id]-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(0)<sp/>+=<sp/>bodies[id]-&gt;invMass<sp/>*<sp/>impulse;</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(1)<sp/>+=<sp/>invWorldInertiaTensor<sp/>*<sp/>(point<sp/>-<sp/>bodies[id]-&gt;current-&gt;worldOrigin).Cross(<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7420"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7421"><highlight class="comment">idPhysics_AF::AddForce</highlight></codeline>
<codeline lineno="7422"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7423"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::AddForce(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noImpact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;externalForce.SubVec3(<sp/>0<sp/>)<sp/>+=<sp/>force;</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;externalForce.SubVec3(<sp/>1<sp/>)<sp/>+=<sp/>(point<sp/>-<sp/>bodies[id]-&gt;current-&gt;worldOrigin).Cross(<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"></highlight></codeline>
<codeline lineno="7436"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7437"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7438"><highlight class="comment">idPhysics_AF::IsAtRest</highlight></codeline>
<codeline lineno="7439"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7440"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::IsAtRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.atRest<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="7443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"></highlight></codeline>
<codeline lineno="7445"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7446"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7447"><highlight class="comment">idPhysics_AF::GetRestStartTime</highlight></codeline>
<codeline lineno="7448"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7449"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7450"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::GetRestStartTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.atRest;</highlight></codeline>
<codeline lineno="7452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"></highlight></codeline>
<codeline lineno="7454"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7455"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7456"><highlight class="comment">idPhysics_AF::IsPushable</highlight></codeline>
<codeline lineno="7457"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7458"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7459"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_AF::IsPushable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>!noImpact<sp/>&amp;&amp;<sp/>(<sp/>masterBody<sp/>==<sp/>NULL<sp/>||<sp/>forcePushable<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7464"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7465"><highlight class="comment">idPhysics_AF::SaveState</highlight></codeline>
<codeline lineno="7466"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7467"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SaveState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"></highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>&amp;bodies[i]-&gt;saved,<sp/>bodies[i]-&gt;current,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_a_f_body_p_state__s" kindref="compound">AFBodyPState_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"></highlight></codeline>
<codeline lineno="7478"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7479"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7480"><highlight class="comment">idPhysics_AF::RestoreState</highlight></codeline>
<codeline lineno="7481"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7482"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::RestoreState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"></highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>saved;</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"></highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(bodies[i]-&gt;current)<sp/>=<sp/>bodies[i]-&gt;saved;</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"></highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/>EvaluateContacts();</highlight></codeline>
<codeline lineno="7493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"></highlight></codeline>
<codeline lineno="7495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7496"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7497"><highlight class="comment">idPhysics_AF::SetOrigin</highlight></codeline>
<codeline lineno="7498"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetOrigin(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Translate(<sp/>masterBody-&gt;current-&gt;worldOrigin<sp/>+<sp/>masterBody-&gt;current-&gt;worldAxis<sp/>*<sp/>newOrigin<sp/>-<sp/>bodies[0]-&gt;current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Translate(<sp/>newOrigin<sp/>-<sp/>bodies[0]-&gt;current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"></highlight></codeline>
<codeline lineno="7508"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7509"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7510"><highlight class="comment">idPhysics_AF::SetAxis</highlight></codeline>
<codeline lineno="7511"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7512"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetAxis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;newAxis,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"></highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldAxis.Transpose()<sp/>*<sp/>(<sp/>newAxis<sp/>*<sp/>masterBody-&gt;current-&gt;worldAxis<sp/>);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldAxis.Transpose()<sp/>*<sp/>newAxis;</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>axis.ToRotation();</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetOrigin(<sp/>bodies[0]-&gt;current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"></highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/><sp/>Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="7526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"></highlight></codeline>
<codeline lineno="7528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7529"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7530"><highlight class="comment">idPhysics_AF::Translate</highlight></codeline>
<codeline lineno="7531"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7532"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"></highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!worldConstraintsLocked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>constraints<sp/>attached<sp/>to<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Translate(<sp/>translation<sp/>);</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"></highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>all<sp/>the<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"></highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;worldOrigin<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"></highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"></highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateClipModels();</highlight></codeline>
<codeline lineno="7554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"></highlight></codeline>
<codeline lineno="7556"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7557"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7558"><highlight class="comment">idPhysics_AF::Rotate</highlight></codeline>
<codeline lineno="7559"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7560"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"></highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!worldConstraintsLocked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>constraints<sp/>attached<sp/>to<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"></highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>all<sp/>the<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"></highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;worldOrigin<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;current-&gt;worldAxis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"></highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"></highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateClipModels();</highlight></codeline>
<codeline lineno="7583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"></highlight></codeline>
<codeline lineno="7585"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7586"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7587"><highlight class="comment">idPhysics_AF::GetOrigin</highlight></codeline>
<codeline lineno="7588"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7589"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7590"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_AF::GetOrigin(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec3_origin;</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;current-&gt;worldOrigin;</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"></highlight></codeline>
<codeline lineno="7599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7600"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7601"><highlight class="comment">idPhysics_AF::GetAxis</highlight></codeline>
<codeline lineno="7602"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7603"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7604"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;idPhysics_AF::GetAxis(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat3_identity;</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"></highlight></codeline>
<codeline lineno="7613"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7614"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7615"><highlight class="comment">idPhysics_AF::SetLinearVelocity</highlight></codeline>
<codeline lineno="7616"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7617"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7618"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetLinearVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newLinearVelocity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(<sp/>0<sp/>)<sp/>=<sp/>newLinearVelocity;</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"></highlight></codeline>
<codeline lineno="7626"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7627"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7628"><highlight class="comment">idPhysics_AF::SetAngularVelocity</highlight></codeline>
<codeline lineno="7629"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7630"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7631"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetAngularVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newAngularVelocity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(<sp/>1<sp/>)<sp/>=<sp/>newAngularVelocity;</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"></highlight></codeline>
<codeline lineno="7639"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7640"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7641"><highlight class="comment">idPhysics_AF::GetLinearVelocity</highlight></codeline>
<codeline lineno="7642"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7643"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_AF::GetLinearVelocity(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec3_origin;</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"></highlight></codeline>
<codeline lineno="7653"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7654"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7655"><highlight class="comment">idPhysics_AF::GetAngularVelocity</highlight></codeline>
<codeline lineno="7656"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7657"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7658"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_AF::GetAngularVelocity(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>id<sp/>&lt;<sp/>0<sp/>||<sp/>id<sp/>&gt;=<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec3_origin;</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bodies[id]-&gt;current-&gt;spatialVelocity.SubVec3(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"></highlight></codeline>
<codeline lineno="7667"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7668"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7669"><highlight class="comment">idPhysics_AF::ClipTranslation</highlight></codeline>
<codeline lineno="7670"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7671"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ClipTranslation(<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;results,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>bodyResults;</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"></highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/>results.fraction<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;clipModel-&gt;IsTraceModel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.TranslationModel(<sp/>bodyResults,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>body-&gt;current-&gt;worldOrigin<sp/>+<sp/>translation,</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.Translation(<sp/>bodyResults,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>body-&gt;current-&gt;worldOrigin<sp/>+<sp/>translation,</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodyResults.fraction<sp/>&lt;<sp/>results.fraction<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>bodyResults;</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"></highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/>results.endpos<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldOrigin<sp/>+<sp/>results.fraction<sp/>*<sp/>translation;</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/><sp/><sp/>results.endAxis<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldAxis;</highlight></codeline>
<codeline lineno="7700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7703"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7704"><highlight class="comment">idPhysics_AF::ClipRotation</highlight></codeline>
<codeline lineno="7705"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7706"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ClipRotation(<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;results,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>bodyResults;</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>partialRotation;</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"></highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/>results.fraction<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"></highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;clipModel-&gt;IsTraceModel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.RotationModel(<sp/>bodyResults,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>rotation,</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.Rotation(<sp/>bodyResults,<sp/>body-&gt;current-&gt;worldOrigin,<sp/>rotation,</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>body-&gt;clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodyResults.fraction<sp/>&lt;<sp/>results.fraction<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>bodyResults;</highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"></highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/>partialRotation<sp/>=<sp/>rotation<sp/>*<sp/>results.fraction;</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/>results.endpos<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldOrigin<sp/>*<sp/>partialRotation;</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/>results.endAxis<sp/>=<sp/>bodies[0]-&gt;current-&gt;worldAxis<sp/>*<sp/>partialRotation.ToMat3();</highlight></codeline>
<codeline lineno="7737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"></highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7740"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7741"><highlight class="comment">idPhysics_AF::ClipContents</highlight></codeline>
<codeline lineno="7742"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7743"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7744"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_AF::ClipContents(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>contents;</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"></highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/>contents<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"></highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[i];</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"></highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body-&gt;clipModel-&gt;IsTraceModel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents<sp/>|=<sp/>gameLocal.clip.ContentsModel(<sp/>body-&gt;current-&gt;worldOrigin,</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>-1,</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents<sp/>|=<sp/>gameLocal.clip.Contents(<sp/>body-&gt;current-&gt;worldOrigin,</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;clipModel,<sp/>body-&gt;current-&gt;worldAxis,<sp/>-1,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"></highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contents;</highlight></codeline>
<codeline lineno="7767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"></highlight></codeline>
<codeline lineno="7769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7770"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7771"><highlight class="comment">idPhysics_AF::DisableClip</highlight></codeline>
<codeline lineno="7772"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::DisableClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"></highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7781"><highlight class="normal"></highlight></codeline>
<codeline lineno="7782"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7783"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7784"><highlight class="comment">idPhysics_AF::EnableClip</highlight></codeline>
<codeline lineno="7785"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7786"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::EnableClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7789"><highlight class="normal"></highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Enable();</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"></highlight></codeline>
<codeline lineno="7795"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7796"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7797"><highlight class="comment">idPhysics_AF::UnlinkClip</highlight></codeline>
<codeline lineno="7798"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7799"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::UnlinkClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"></highlight></codeline>
<codeline lineno="7803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bodies[i]-&gt;clipModel-&gt;Unlink();</highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"></highlight></codeline>
<codeline lineno="7808"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7809"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7810"><highlight class="comment">idPhysics_AF::LinkClip</highlight></codeline>
<codeline lineno="7811"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7812"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7813"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::LinkClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateClipModels();</highlight></codeline>
<codeline lineno="7815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7816"><highlight class="normal"></highlight></codeline>
<codeline lineno="7817"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7818"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7819"><highlight class="comment">idPhysics_AF::SetPushed</highlight></codeline>
<codeline lineno="7820"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7821"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7822"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetPushed(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltaTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body;</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="7825"><highlight class="normal"></highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodies.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>bodies[0];</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>(<sp/>body-&gt;saved.worldAxis.Transpose()<sp/>*<sp/>body-&gt;current-&gt;worldAxis<sp/>).ToRotation();</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"></highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>with<sp/>which<sp/>the<sp/>af<sp/>is<sp/>pushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.pushVelocity.SubVec3(0)<sp/>+=<sp/>(<sp/>body-&gt;current-&gt;worldOrigin<sp/>-<sp/>body-&gt;saved.worldOrigin<sp/>)<sp/>/<sp/>(<sp/>deltaTime<sp/>*<sp/>idMath::M_MS2SEC<sp/>);</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.pushVelocity.SubVec3(1)<sp/>+=<sp/>rotation.GetVec()<sp/>*<sp/>-DEG2RAD(<sp/>rotation.GetAngle()<sp/>)<sp/>/<sp/>(<sp/>deltaTime<sp/>*<sp/>idMath::M_MS2SEC<sp/>);</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"></highlight></codeline>
<codeline lineno="7836"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7837"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7838"><highlight class="comment">idPhysics_AF::GetPushedLinearVelocity</highlight></codeline>
<codeline lineno="7839"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7840"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7841"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_AF::GetPushedLinearVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.pushVelocity.SubVec3(0);</highlight></codeline>
<codeline lineno="7843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"></highlight></codeline>
<codeline lineno="7845"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7846"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7847"><highlight class="comment">idPhysics_AF::GetPushedAngularVelocity</highlight></codeline>
<codeline lineno="7848"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7849"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_AF::GetPushedAngularVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.pushVelocity.SubVec3(1);</highlight></codeline>
<codeline lineno="7852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7853"><highlight class="normal"></highlight></codeline>
<codeline lineno="7854"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7855"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7856"><highlight class="comment">idPhysics_AF::SetMaster</highlight></codeline>
<codeline lineno="7857"><highlight class="comment"></highlight></codeline>
<codeline lineno="7858"><highlight class="comment"><sp/><sp/><sp/>the<sp/>binding<sp/>is<sp/>orientated<sp/>based<sp/>on<sp/>the<sp/>constraints<sp/>being<sp/>used</highlight></codeline>
<codeline lineno="7859"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7860"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::SetMaster(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="7865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"></highlight></codeline>
<codeline lineno="7867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref>();</highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>and<sp/>rotate<sp/>all<sp/>the<sp/>constraints<sp/>with<sp/>body2<sp/>==<sp/>NULL<sp/>from<sp/>world<sp/>space<sp/>to<sp/>master<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>masterAxis.Transpose().ToRotation();</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints[i]-&gt;GetBody2()<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Translate(<sp/>-masterOrigin<sp/>);</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;current-&gt;worldOrigin<sp/>=<sp/>masterOrigin;</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody-&gt;current-&gt;worldAxis<sp/>=<sp/>masterAxis;</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masterBody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translate<sp/>and<sp/>rotate<sp/>all<sp/>the<sp/>constraints<sp/>with<sp/>body2<sp/>==<sp/>NULL<sp/>from<sp/>master<sp/>space<sp/>to<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>masterBody-&gt;current-&gt;worldAxis.ToRotation();</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>constraints.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constraints[i]-&gt;GetBody2()<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Rotate(<sp/>rotation<sp/>);</highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints[i]-&gt;Translate(<sp/>masterBody-&gt;current-&gt;worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>masterBody;</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterBody<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"></highlight></codeline>
<codeline lineno="7901"><highlight class="normal"></highlight></codeline>
<codeline lineno="7902"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AF_VELOCITY_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16000;</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_VELOCITY_TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_VELOCITY_EXPONENT_BITS<sp/><sp/><sp/>=<sp/>idMath::BitsForInteger(<sp/>idMath::BitsForFloat(<sp/>AF_VELOCITY_MAX<sp/>)<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_VELOCITY_MANTISSA_BITS<sp/><sp/><sp/>=<sp/>AF_VELOCITY_TOTAL_BITS<sp/>-<sp/>1<sp/>-<sp/>AF_VELOCITY_EXPONENT_BITS;</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AF_FORCE_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e20f;</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_FORCE_TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_FORCE_EXPONENT_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>idMath::BitsForInteger(<sp/>idMath::BitsForFloat(<sp/>AF_FORCE_MAX<sp/>)<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>AF_FORCE_MANTISSA_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AF_FORCE_TOTAL_BITS<sp/>-<sp/>1<sp/>-<sp/>AF_FORCE_EXPONENT_BITS;</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"></highlight></codeline>
<codeline lineno="7911"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7912"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7913"><highlight class="comment">idPhysics_AF::WriteToSnapshot</highlight></codeline>
<codeline lineno="7914"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7915"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7916"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::WriteToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref><sp/>quat;</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"></highlight></codeline>
<codeline lineno="7920"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>current.atRest<sp/>);</highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.noMoveTime<sp/>);</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.activateTime<sp/>);</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[0],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7924"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[1],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[2],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7926"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[3],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7927"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[4],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7928"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[5],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7929"><highlight class="normal"></highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>bodies.Num()<sp/>);</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"></highlight></codeline>
<codeline lineno="7932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_f_body_p_state__s" kindref="compound">AFBodyPState_t</ref><sp/>*state<sp/>=<sp/>bodies[i]-&gt;current;</highlight></codeline>
<codeline lineno="7934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat<sp/>=<sp/>state-&gt;worldAxis.ToCQuat();</highlight></codeline>
<codeline lineno="7935"><highlight class="normal"></highlight></codeline>
<codeline lineno="7936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>state-&gt;worldOrigin[0]<sp/>);</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>state-&gt;worldOrigin[1]<sp/>);</highlight></codeline>
<codeline lineno="7938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>state-&gt;worldOrigin[2]<sp/>);</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.x<sp/>);</highlight></codeline>
<codeline lineno="7940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.y<sp/>);</highlight></codeline>
<codeline lineno="7941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.z<sp/>);</highlight></codeline>
<codeline lineno="7942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[0],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[1],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[2],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[3],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[4],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;spatialVelocity[5],<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[0],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[1],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[2],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[3],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[4],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>state-&gt;externalForce[5],<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7954"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"></highlight></codeline>
<codeline lineno="7958"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7959"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7960"><highlight class="comment">idPhysics_AF::ReadFromSnapshot</highlight></codeline>
<codeline lineno="7961"><highlight class="comment">================</highlight></codeline>
<codeline lineno="7962"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7963"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_AF::ReadFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num;</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref><sp/>quat;</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"></highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/><sp/><sp/>current.noMoveTime<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"><sp/><sp/><sp/><sp/>current.activateTime<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[3]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[4]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[5]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"></highlight></codeline>
<codeline lineno="7977"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>msg.ReadByte();</highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>num<sp/>==<sp/>bodies.Num()<sp/>);</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"></highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bodies.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_f_body_p_state__s" kindref="compound">AFBodyPState_t</ref><sp/>*state<sp/>=<sp/>bodies[i]-&gt;current;</highlight></codeline>
<codeline lineno="7982"><highlight class="normal"></highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;worldOrigin[0]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;worldOrigin[1]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;worldOrigin[2]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat.x<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat.y<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat.z<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="7989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[3]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[4]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;spatialVelocity[5]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_VELOCITY_EXPONENT_BITS,<sp/>AF_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[3]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="7999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[4]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="8000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;externalForce[5]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>AF_FORCE_EXPONENT_BITS,<sp/>AF_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="8001"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;worldAxis<sp/>=<sp/>quat.ToMat3();</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"></highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateClipModels();</highlight></codeline>
<codeline lineno="8006"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/game/physics/Physics_AF.cpp"/>
  </compounddef>
</doxygen>
