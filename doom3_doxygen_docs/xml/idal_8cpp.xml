<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="idal_8cpp" kind="file">
    <compoundname>idal.cpp</compoundname>
    <includedby refid="win__snd_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/sys/win32/win_snd.cpp</includedby>
      <sectiondef kind="var">
      <memberdef kind="variable" id="idal_8cpp_1a8f7de74715ee4253fac81b12880a0be2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ALuint ALenum</definition>
        <argsstring></argsstring>
        <name>ALenum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="9" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="idal_8cpp_1a3f5167e59d0465d6c707c542077c6d48" prot="public" static="no" mutable="no">
        <type>ALvoid</type>
        <definition>ALsizei</definition>
        <argsstring></argsstring>
        <name>ALsizei</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="16" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="idal_8cpp_1a46942fcd62d4e4690e47819a7409b193" prot="public" static="no" mutable="no">
        <type>ALfloat ALuint</type>
        <definition>ALfloat ALuint ALint</definition>
        <argsstring></argsstring>
        <name>ALint</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="26" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="idal_8cpp_1a02ee23f81cf5fc1941140261340feeb4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ALuint ALfloat</definition>
        <argsstring></argsstring>
        <name>ALfloat</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="27" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="idal_8cpp_1a8e7ac5b521686da5580b178af078213f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ALenum</definition>
        <argsstring>(ALAPIENTRY *idalGetError)(ALvoid)</argsstring>
        <name>ALenum</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalGetError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="5" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1af5468d91b9ad8e8618eb20e299e8a1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ALvoid</definition>
        <argsstring>(ALAPIENTRY *idalGenBuffers)(ALsizei</argsstring>
        <name>ALvoid</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalGenBuffers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="6" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a011ea36c1219d12f98f946e5663fb59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALuint *</type>
        <definition>ALuint* ALboolean</definition>
        <argsstring>(ALAPIENTRY *idalIsSource)(ALuint)</argsstring>
        <name>ALboolean</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalIsSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="7" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a54be97aa79734b9be6f01a6996452efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALint *</type>
        <definition>ALint* ALint</definition>
        <argsstring>(ALAPIENTRY *idalGetInteger)(ALenum)</argsstring>
        <name>ALint</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalGetInteger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="10" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a0a57dea28d690e41f4c288ef58052a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ALCvoid</definition>
        <argsstring>(ALAPIENTRY *idalcSuspendContext)(ALCcontext *)</argsstring>
        <name>ALCvoid</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalcSuspendContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a6e01e0f68f384e9432212b2ed26c1969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ALCboolean</definition>
        <argsstring>(ALAPIENTRY *idalcMakeContextCurrent)(ALCcontext *)</argsstring>
        <name>ALCboolean</name>
        <param>
          <type>ALAPIENTRY *</type>
          <declname>idalcMakeContextCurrent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a81fbacddaa302a2029afa106251baad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCubyte *ALAPIENTRY *</type>
        <definition>ALCubyte* ALAPIENTRY* idalcGetString</definition>
        <argsstring>(ALCdevice *, ALCenum)</argsstring>
        <name>idalcGetString</name>
        <param>
          <type>ALCdevice *</type>
        </param>
        <param>
          <type>ALCenum</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a7d676c7cdde29f9849cd8545a4530b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALvoid *ALAPIENTRY *</type>
        <definition>ALvoid* ALAPIENTRY* idalGetProcAddress</definition>
        <argsstring>(ALubyte *)</argsstring>
        <name>idalGetProcAddress</name>
        <param>
          <type>ALubyte *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1a8101d21dc7df78e5ca475213481c245d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCcontext *ALAPIENTRY *</type>
        <definition>ALCcontext* ALAPIENTRY* idalcCreateContext</definition>
        <argsstring>(ALCdevice *, ALCint *)</argsstring>
        <name>idalcCreateContext</name>
        <param>
          <type>ALCdevice *</type>
        </param>
        <param>
          <type>ALCint *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1afbae1fade24d65e05584114f900a5c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCdevice *ALAPIENTRY *</type>
        <definition>ALCdevice* ALAPIENTRY* idalcOpenDevice</definition>
        <argsstring>(ALubyte *)</argsstring>
        <name>idalcOpenDevice</name>
        <param>
          <type>ALubyte *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="idal_8cpp_1ad92d66ad2a7e616ff0eb7be889cb4190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* InitializeIDAL</definition>
        <argsstring>(HMODULE h)</argsstring>
        <name>InitializeIDAL</name>
        <param>
          <type>HMODULE</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp" bodystart="36" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>generated<sp/>header.<sp/>do<sp/>not<sp/>edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C:\Python23\Lib\idlelib\idle.pyw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mon<sp/>Mar<sp/>28<sp/>12:31:26<sp/>2005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">ALenum<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGetError<sp/>)(<sp/>ALvoid<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGenBuffers<sp/>)(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalIsSource<sp/>)(<sp/>ALuint<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourceStop<sp/>)(<sp/>ALuint<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGetSourcei<sp/>)(<sp/>ALuint,<sp/>ALenum,<sp/>ALint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">ALint<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGetInteger<sp/>)(<sp/>ALenum<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcSuspendContext<sp/>)(<sp/>ALCcontext<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">ALCboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcMakeContextCurrent<sp/>)(<sp/>ALCcontext<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcProcessContext<sp/>)(<sp/>ALCcontext<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcDestroyContext<sp/>)(<sp/>ALCcontext<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">ALCubyte<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcGetString<sp/>)(<sp/>ALCdevice<sp/>*,<sp/>ALCenum<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalBufferData<sp/>)(<sp/>ALuint,<sp/>ALenum,<sp/>ALvoid<sp/>*,<sp/>ALsizei,<sp/>ALsizei<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalDeleteBuffers<sp/>)(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalIsExtensionPresent<sp/>)(<sp/>ALubyte<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalDeleteSources<sp/>)(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">ALenum<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGetEnumValue<sp/>)(<sp/>ALubyte<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">ALvoid<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGetProcAddress<sp/>)(<sp/>ALubyte<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">ALCcontext<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcCreateContext<sp/>)(<sp/>ALCdevice<sp/>*,<sp/>ALCint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">ALCdevice<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcOpenDevice<sp/>)(<sp/>ALubyte<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalListenerfv<sp/>)(<sp/>ALenum,<sp/>ALfloat*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourceQueueBuffers<sp/>)(<sp/>ALuint,<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourcei<sp/>)(<sp/>ALuint,<sp/>ALenum,<sp/>ALint<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalListenerf<sp/>)(<sp/>ALenum,<sp/>ALfloat<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalcCloseDevice<sp/>)(<sp/>ALCdevice<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalIsBuffer<sp/>)(<sp/>ALuint<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSource3f<sp/>)(<sp/>ALuint,<sp/>ALenum,<sp/>ALfloat,<sp/>ALfloat,<sp/>ALfloat<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalGenSources<sp/>)(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourcef<sp/>)(<sp/>ALuint,<sp/>ALenum,<sp/>ALfloat<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourceUnqueueBuffers<sp/>)(<sp/>ALuint,<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>idalSourcePlay<sp/>)(<sp/>ALuint<sp/>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>InitializeIDAL(<sp/>HMODULE<sp/>h<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal">idalGetError<sp/>=<sp/>(<sp/>ALenum<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALvoid<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGetError&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGetError)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGetError&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">idalGenBuffers<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGenBuffers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGenBuffers)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGenBuffers&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">idalIsSource<sp/>=<sp/>(<sp/>ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alIsSource&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalIsSource)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alIsSource&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">idalSourceStop<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourceStop&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourceStop)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourceStop&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">idalGetSourcei<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALenum,<sp/>ALint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGetSourcei&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGetSourcei)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGetSourcei&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">idalGetInteger<sp/>=<sp/>(<sp/>ALint<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALenum<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGetInteger&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGetInteger)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGetInteger&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">idalcSuspendContext<sp/>=<sp/>(<sp/>ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCcontext<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcSuspendContext&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcSuspendContext)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcSuspendContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">idalcMakeContextCurrent<sp/>=<sp/>(<sp/>ALCboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCcontext<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcMakeContextCurrent&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcMakeContextCurrent)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcMakeContextCurrent&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">idalcProcessContext<sp/>=<sp/>(<sp/>ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCcontext<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcProcessContext&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcProcessContext)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcProcessContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">idalcDestroyContext<sp/>=<sp/>(<sp/>ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCcontext<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcDestroyContext&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcDestroyContext)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcDestroyContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">idalcGetString<sp/>=<sp/>(<sp/>ALCubyte<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCdevice<sp/>*,<sp/>ALCenum<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcGetString&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcGetString)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcGetString&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">idalBufferData<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALenum,<sp/>ALvoid<sp/>*,<sp/>ALsizei,<sp/>ALsizei<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alBufferData&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalBufferData)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alBufferData&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">idalDeleteBuffers<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alDeleteBuffers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalDeleteBuffers)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alDeleteBuffers&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">idalIsExtensionPresent<sp/>=<sp/>(<sp/>ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALubyte<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alIsExtensionPresent&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalIsExtensionPresent)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alIsExtensionPresent&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">idalDeleteSources<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alDeleteSources&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalDeleteSources)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alDeleteSources&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">idalGetEnumValue<sp/>=<sp/>(<sp/>ALenum<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALubyte<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGetEnumValue&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGetEnumValue)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGetEnumValue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">idalGetProcAddress<sp/>=<sp/>(<sp/>ALvoid<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALubyte<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGetProcAddress&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGetProcAddress)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGetProcAddress&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">idalcCreateContext<sp/>=<sp/>(<sp/>ALCcontext<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCdevice<sp/>*,<sp/>ALCint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcCreateContext&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcCreateContext)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcCreateContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">idalcOpenDevice<sp/>=<sp/>(<sp/>ALCdevice<sp/>*<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALubyte<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcOpenDevice&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcOpenDevice)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcOpenDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">idalListenerfv<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALenum,<sp/>ALfloat*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alListenerfv&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalListenerfv)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alListenerfv&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">idalSourceQueueBuffers<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourceQueueBuffers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourceQueueBuffers)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourceQueueBuffers&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">idalSourcei<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALenum,<sp/>ALint<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourcei&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourcei)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourcei&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal">idalListenerf<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALenum,<sp/>ALfloat<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alListenerf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalListenerf)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alListenerf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">idalcCloseDevice<sp/>=<sp/>(<sp/>ALCvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALCdevice<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alcCloseDevice&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalcCloseDevice)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alcCloseDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">idalIsBuffer<sp/>=<sp/>(<sp/>ALboolean<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alIsBuffer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalIsBuffer)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alIsBuffer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">idalSource3f<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALenum,<sp/>ALfloat,<sp/>ALfloat,<sp/>ALfloat<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSource3f&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSource3f)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSource3f&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">idalGenSources<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alGenSources&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalGenSources)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alGenSources&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">idalSourcef<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALenum,<sp/>ALfloat<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourcef&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourcef)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourcef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">idalSourceUnqueueBuffers<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint,<sp/>ALsizei,<sp/>ALuint<sp/>*<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourceUnqueueBuffers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourceUnqueueBuffers)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourceUnqueueBuffers&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">idalSourcePlay<sp/>=<sp/>(<sp/>ALvoid<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>ALuint<sp/>)<sp/>)GetProcAddress(<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;alSourcePlay&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idalSourcePlay)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alSourcePlay&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.cpp"/>
  </compounddef>
</doxygen>
