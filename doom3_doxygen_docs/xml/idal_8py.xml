<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="idal_8py" kind="file">
    <compoundname>idal.py</compoundname>
    <innernamespace refid="namespaceidal">idal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>create<sp/>win32<sp/>source<sp/>for<sp/>OpenAL<sp/>on-demand<sp/>loading<sp/>from<sp/>AL<sp/>API<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>a<sp/>set<sp/>of<sp/>defines<sp/>al*<sp/>-&gt;<sp/>idal*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>typedefs<sp/>and<sp/>code<sp/>pointer<sp/>functions<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>1:<sp/>get<sp/>linking<sp/>with<sp/>no<sp/>OpenAL<sp/>DLL<sp/>link<sp/>in<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>i.e.<sp/>have<sp/>the<sp/>defines<sp/>and<sp/>the<sp/>code<sp/>pointer<sp/>working</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>2:<sp/>do<sp/>the<sp/>load<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">funcs<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGetError&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGenBuffers&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALboolean&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alIsSource&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourceStop&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGetSourcei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGetInteger&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcSuspendContext&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCcontext<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCboolean&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcMakeContextCurrent&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCcontext<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcProcessContext&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCcontext<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcDestroyContext&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCcontext<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCubyte<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcGetString&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCdevice<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCenum&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alBufferData&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALvoid<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alDeleteBuffers&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALboolean&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alIsExtensionPresent&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALubyte<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alDeleteSources&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGetEnumValue&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALubyte<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGetProcAddress&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALubyte<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCcontext<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcCreateContext&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCdevice<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCdevice<sp/>*&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcOpenDevice&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALubyte<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alListenerfv&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourceQueueBuffers&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourcei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALint&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alListenerf&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALCvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alcCloseDevice&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALCdevice<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALboolean&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alIsBuffer&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSource3f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alGenSources&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourcef&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALenum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALfloat&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourceUnqueueBuffers&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALsizei&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint<sp/>*&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/></highlight><highlight class="stringliteral">&apos;ALvoid&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;alSourcePlay&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ALuint&apos;</highlight><highlight class="normal"><sp/>],</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">warningHeader(<sp/>f<sp/>):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>generated<sp/>header.<sp/>do<sp/>not<sp/>edit\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>__file__<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>time.asctime()<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">genIDALFunc(<sp/>f,<sp/>declare<sp/>):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>declare<sp/>):</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;extern<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>funcs:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/>extern<sp/>+<sp/>func[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>id&apos;</highlight><highlight class="normal"><sp/>+<sp/>func[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>)(<sp/>&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>len(<sp/>func<sp/>)<sp/>):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>2<sp/>):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/>func[i]<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>declare<sp/>):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>);\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>)<sp/>=<sp/>NULL;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">genDefineMapping(<sp/>f<sp/>):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>funcs:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/>=<sp/>func[1]</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;#define<sp/>%s<sp/>id%s\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(<sp/>fname,<sp/>fname<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">genIDALInit(<sp/>f<sp/>):</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>funcs:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>annoying<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>=<sp/>func[0]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(<sp/>ALAPIENTRY<sp/>*<sp/>)<sp/>(<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>len(<sp/>func<sp/>)<sp/>):</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>2<sp/>):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>+=<sp/>func[i]</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal"><sp/>+<sp/>func[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>=<sp/>(<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>cast<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>)GetProcAddress(<sp/>h,<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>func[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;<sp/>);\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(<sp/>!id&apos;</highlight><highlight class="normal"><sp/>+<sp/>func[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;)<sp/>{\n<sp/><sp/>return<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>func[1]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;;\n}\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(<sp/></highlight><highlight class="stringliteral">&apos;idal.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>warningHeader(<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>genIDALFunc(<sp/>f,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>genDefineMapping(<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(<sp/></highlight><highlight class="stringliteral">&apos;idal.cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>warningHeader(<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>genIDALFunc(<sp/>f,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;const<sp/>char*<sp/>InitializeIDAL(<sp/>HMODULE<sp/>h<sp/>)<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>genIDALInit(<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>NULL;\n&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(<sp/></highlight><highlight class="stringliteral">&apos;};\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/openal/idal.py"/>
  </compounddef>
</doxygen>
