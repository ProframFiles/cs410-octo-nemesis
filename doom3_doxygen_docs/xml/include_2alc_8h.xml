<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="include_2alc_8h" kind="file">
    <compoundname>alc.h</compoundname>
    <includes refid="include_2altypes_8h" local="yes">altypes.h</includes>
    <includes refid="include_2alctypes_8h" local="yes">alctypes.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="include_2alc_8h_1acdc6b5a97ec35175a3ca690480894339" prot="public" static="no">
        <name>ALCAPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="28" column="13" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2alc_8h_1a57137309701f1ec4a967da4080f44fba" prot="public" static="no">
        <name>ALCAPIENTRY</name>
        <initializer>__cdecl</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="29" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="include_2alc_8h_1a795a2fb73acdbba1cc9fd7078cffee05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCubyte *__cdecl</type>
        <definition>ALCubyte* __cdecl alcGetString</definition>
        <argsstring>(ALCdevice *device, ALCenum param)</argsstring>
        <name>alcGetString</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCenum</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1ab1f7d56bba6ce58b55066b930830c797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid __cdecl</type>
        <definition>ALCvoid __cdecl alcGetIntegerv</definition>
        <argsstring>(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *data)</argsstring>
        <name>alcGetIntegerv</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCenum</type>
          <declname>param</declname>
        </param>
        <param>
          <type>ALCsizei</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ALCint *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a126c66a86de99f513874cb7fd9476927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCdevice *__cdecl</type>
        <definition>ALCdevice* __cdecl alcOpenDevice</definition>
        <argsstring>(ALCubyte *deviceName)</argsstring>
        <name>alcOpenDevice</name>
        <param>
          <type>ALCubyte *</type>
          <declname>deviceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a4c956a4ac6b962f4134bc3d3248fb80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid __cdecl</type>
        <definition>ALCvoid __cdecl alcCloseDevice</definition>
        <argsstring>(ALCdevice *device)</argsstring>
        <name>alcCloseDevice</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a4b810d6c2e4ffa516a9e5ffff4f1b098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCcontext *__cdecl</type>
        <definition>ALCcontext* __cdecl alcCreateContext</definition>
        <argsstring>(ALCdevice *device, ALCint *attrList)</argsstring>
        <name>alcCreateContext</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCint *</type>
          <declname>attrList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1ac477c020344858c4b75d4dcbdc3905b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCboolean __cdecl</type>
        <definition>ALCboolean __cdecl alcMakeContextCurrent</definition>
        <argsstring>(ALCcontext *context)</argsstring>
        <name>alcMakeContextCurrent</name>
        <param>
          <type>ALCcontext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a53947b85cbcea94847ae0a1be80f94c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid __cdecl</type>
        <definition>ALCvoid __cdecl alcProcessContext</definition>
        <argsstring>(ALCcontext *context)</argsstring>
        <name>alcProcessContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a5e6eae56bbfad90bc8784da45e780def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCcontext *__cdecl</type>
        <definition>ALCcontext* __cdecl alcGetCurrentContext</definition>
        <argsstring>(ALCvoid)</argsstring>
        <name>alcGetCurrentContext</name>
        <param>
          <type>ALCvoid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a27c9883b73c1241656bd13658e746194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCdevice *__cdecl</type>
        <definition>ALCdevice* __cdecl alcGetContextsDevice</definition>
        <argsstring>(ALCcontext *context)</argsstring>
        <name>alcGetContextsDevice</name>
        <param>
          <type>ALCcontext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a01a870910a729c7d8380a8ad12352532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid __cdecl</type>
        <definition>ALCvoid __cdecl alcSuspendContext</definition>
        <argsstring>(ALCcontext *context)</argsstring>
        <name>alcSuspendContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a15a3f3e64b270e5d36331898ced146ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid __cdecl</type>
        <definition>ALCvoid __cdecl alcDestroyContext</definition>
        <argsstring>(ALCcontext *context)</argsstring>
        <name>alcDestroyContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a560c3c60a494a4fde49f20e66ae7f233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCenum __cdecl</type>
        <definition>ALCenum __cdecl alcGetError</definition>
        <argsstring>(ALCdevice *device)</argsstring>
        <name>alcGetError</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a309fd3d89a23131f13038ad85bdd2833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCboolean __cdecl</type>
        <definition>ALCboolean __cdecl alcIsExtensionPresent</definition>
        <argsstring>(ALCdevice *device, ALCubyte *extName)</argsstring>
        <name>alcIsExtensionPresent</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCubyte *</type>
          <declname>extName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a49e0aeaf8765d40c38bef43851350fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCvoid *__cdecl</type>
        <definition>ALCvoid* __cdecl alcGetProcAddress</definition>
        <argsstring>(ALCdevice *device, ALCubyte *funcName)</argsstring>
        <name>alcGetProcAddress</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCubyte *</type>
          <declname>funcName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="include_2alc_8h_1a3683d7efbf649d21ba83d9c727552536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALCenum __cdecl</type>
        <definition>ALCenum __cdecl alcGetEnumValue</definition>
        <argsstring>(ALCdevice *device, ALCubyte *enumName)</argsstring>
        <name>alcGetEnumValue</name>
        <param>
          <type>ALCdevice *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ALCubyte *</type>
          <declname>enumName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h" line="54" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_ALC_H_</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ALC_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;altypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;alctypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#ifdef<sp/>_OPENAL32LIB</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>ALCAPI<sp/>__declspec(dllexport)</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#else</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>ALCAPI<sp/>__declspec(dllimport)</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#endif</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ALCdevice_struct<sp/>ALCdevice;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ALCcontext_struct<sp/>ALCcontext;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>ALCAPIENTRY<sp/>__cdecl</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#ifdef<sp/>TARGET_OS_MAC</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>TARGET_OS_MAC</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#pragma<sp/>export<sp/>on</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#endif</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#define<sp/>ALCAPI</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#define<sp/>ALCAPIENTRY<sp/>__cdecl</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ALC_NO_PROTOTYPES</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">ALCAPI<sp/>ALCubyte*<sp/><sp/>ALCAPIENTRY<sp/>alcGetString(ALCdevice<sp/>*device,ALCenum<sp/>param);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcGetIntegerv(ALCdevice<sp/>*device,ALCenum<sp/>param,ALCsizei<sp/>size,ALCint<sp/>*data);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">ALCAPI<sp/>ALCdevice*<sp/>ALCAPIENTRY<sp/>alcOpenDevice(ALCubyte<sp/>*deviceName);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcCloseDevice(ALCdevice<sp/>*device);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">ALCAPI<sp/>ALCcontext*ALCAPIENTRY<sp/>alcCreateContext(ALCdevice<sp/>*device,ALCint<sp/>*attrList);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">ALCAPI<sp/>ALCboolean<sp/>ALCAPIENTRY<sp/>alcMakeContextCurrent(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcProcessContext(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">ALCAPI<sp/>ALCcontext*ALCAPIENTRY<sp/>alcGetCurrentContext(ALCvoid);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">ALCAPI<sp/>ALCdevice*<sp/>ALCAPIENTRY<sp/>alcGetContextsDevice(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcSuspendContext(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcDestroyContext(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">ALCAPI<sp/>ALCenum<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcGetError(ALCdevice<sp/>*device);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">ALCAPI<sp/>ALCboolean<sp/>ALCAPIENTRY<sp/>alcIsExtensionPresent(ALCdevice<sp/>*device,ALCubyte<sp/>*extName);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/>*<sp/><sp/>ALCAPIENTRY<sp/>alcGetProcAddress(ALCdevice<sp/>*device,ALCubyte<sp/>*funcName);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">ALCAPI<sp/>ALCenum<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>alcGetEnumValue(ALCdevice<sp/>*device,ALCubyte<sp/>*enumName);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>ALC_NO_PROTOTYPES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">ALCAPI<sp/>ALCubyte*<sp/><sp/>ALCAPIENTRY<sp/>(*alcGetString)(ALCdevice<sp/>*device,ALCenum<sp/>param);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcGetIntegerv)(ALCdevice<sp/>*<sp/>device,ALCenum<sp/>param,ALCsizei<sp/>size,ALCint<sp/>*data);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">ALCAPI<sp/>ALCdevice*<sp/>ALCAPIENTRY<sp/>(*alcOpenDevice)(ALubyte<sp/>*deviceName);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcCloseDevice)(ALCdevice<sp/>*device);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ALCAPI<sp/>ALCcontext*ALCAPIENTRY<sp/>(*alcCreateContext)(ALCdevice<sp/>*device,ALCint<sp/>*attrList);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">ALCAPI<sp/>ALCboolean<sp/>ALCAPIENTRY<sp/>(*alcMakeContextCurrent)(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcProcessContext)(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">ALCAPI<sp/>ALCcontext*ALCAPIENTRY<sp/>(*alcGetCurrentContext)(ALCvoid);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">ALCAPI<sp/>ALCdevice*<sp/>ALCAPIENTRY<sp/>(*alcGetContextsDevice)(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcSuspendContext)(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcDestroyContext)(ALCcontext<sp/>*context);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">ALCAPI<sp/>ALCenum<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcGetError)(ALCdevice<sp/>*device);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">ALCAPI<sp/>ALCboolean<sp/>ALCAPIENTRY<sp/>(*alcIsExtensionPresent)(ALCdevice<sp/>*device,ALCubyte<sp/>*extName);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">ALCAPI<sp/>ALCvoid<sp/>*<sp/><sp/>ALCAPIENTRY<sp/>(*alcGetProcAddress)(ALCdevice<sp/>*device,ALCubyte<sp/>*funcName);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">ALCAPI<sp/>ALCenum<sp/><sp/><sp/><sp/>ALCAPIENTRY<sp/>(*alcGetEnumValue)(ALCdevice<sp/>*device,ALCubyte<sp/>*enumName);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AL_NO_PROTOTYPES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TARGET_OS_MAC</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#if<sp/>TARGET_OS_MAC</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>export<sp/>off</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#endif</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/openal/include/alc.h"/>
  </compounddef>
</doxygen>
