<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jchuff_8c" kind="file">
    <compoundname>jchuff.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jchuff_8h" local="yes">jchuff.h</includes>
    <innerclass refid="structsavable__state" prot="public">savable_state</innerclass>
    <innerclass refid="structhuff__entropy__encoder" prot="public">huff_entropy_encoder</innerclass>
    <innerclass refid="structworking__state" prot="public">working_state</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jchuff_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="17" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jchuff_8c_1a0aa59fa38553f2f947f0880637cf0865" prot="public" static="no">
        <name>ASSIGN_STATE</name>
        <param><defname>dest</defname></param>
        <param><defname>src</defname></param>
        <initializer>((dest) = (src))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="41" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jchuff_8c_1abb7d8d00694e31aa9fb8b6a222acd34b" prot="public" static="no">
        <name>emit_byte</name>
        <param><defname>state</defname></param>
        <param><defname>val</defname></param>
        <param><defname>action</defname></param>
        <initializer>{ *(state)-&gt;next_output_byte++ = (JOCTET) (val);  \
	  if (--(state)-&gt;free_in_buffer == 0)  \
	    if (! dump_buffer(state))  \
	      { action; } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="239" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jchuff_8c_1a82509103366dba59196d5c326a495766" prot="public" static="no">
        <name>MAX_CLEN</name>
        <initializer>32		/* assumed maximum initial code length */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="644" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jchuff_8c_1affce96a1cce448f0bd2b830395f68cca" prot="public" static="no">
        <type><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_encoder</ref> *</type>
        <definition>typedef huff_entropy_encoder* huff_entropy_ptr</definition>
        <argsstring></argsstring>
        <name>huff_entropy_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jchuff_8c_1aace05445dc896fccd93819d859697c5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_huff</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_huff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="437" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a219f795048ce3cb78d6c5e4978a5507e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void finish_pass_huff</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>finish_pass_huff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="494" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1af18f6d666d871d64e9e21355ad1d06f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_gather</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_gather</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="605" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a6335f5647b88aa3a24d59ceeb3d7b0bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void finish_pass_gather</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>finish_pass_gather</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="783" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a3d6bd7f5eadb782d31f6ee5dbbc2c0a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_pass_huff</definition>
        <argsstring>(j_compress_ptr cinfo, boolean gather_statistics)</argsstring>
        <name>start_pass_huff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>gather_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="106" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="106" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a5c222c9a8cb18ea7eaeffbef5f13e25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_make_c_derived_tbl</definition>
        <argsstring>(j_compress_ptr cinfo, JHUFF_TBL *htbl, c_derived_tbl **pdtbl)</argsstring>
        <name>jpeg_make_c_derived_tbl</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref> *</type>
          <declname>htbl</declname>
        </param>
        <param>
          <type><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref> **</type>
          <declname>pdtbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="179" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="179" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a66badfba7c400699c316d5c8b723e7bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean dump_buffer</definition>
        <argsstring>(working_state *state)</argsstring>
        <name>dump_buffer</name>
        <param>
          <type><ref refid="structworking__state" kindref="compound">working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="247" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="247" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a8b09554a3dfd97812fdd86b0524bea1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean emit_bits</definition>
        <argsstring>(working_state *state, unsigned int code, int size)</argsstring>
        <name>emit_bits</name>
        <param>
          <type><ref refid="structworking__state" kindref="compound">working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="271" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="271" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a05ab7edde180490a89c174cbbf82e62a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean flush_bits</definition>
        <argsstring>(working_state *state)</argsstring>
        <name>flush_bits</name>
        <param>
          <type><ref refid="structworking__state" kindref="compound">working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="309" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a22966439a482469980b7fb8fe8d31131" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_one_block</definition>
        <argsstring>(working_state *state, JCOEFPTR block, int last_dc_val, c_derived_tbl *dctbl, c_derived_tbl *actbl)</argsstring>
        <name>encode_one_block</name>
        <param>
          <type><ref refid="structworking__state" kindref="compound">working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>JCOEFPTR</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>last_dc_val</declname>
        </param>
        <param>
          <type><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref> *</type>
          <declname>dctbl</declname>
        </param>
        <param>
          <type><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref> *</type>
          <declname>actbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="322" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="322" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a65a59e30f4d696f00ff4682edc1dd18a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean emit_restart</definition>
        <argsstring>(working_state *state, int restart_num)</argsstring>
        <name>emit_restart</name>
        <param>
          <type><ref refid="structworking__state" kindref="compound">working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>restart_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="412" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="412" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a47600ccff8df315fbd5048efc208ff68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void htest_one_block</definition>
        <argsstring>(JCOEFPTR block, int last_dc_val, long dc_counts[], long ac_counts[])</argsstring>
        <name>htest_one_block</name>
        <param>
          <type>JCOEFPTR</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>last_dc_val</declname>
        </param>
        <param>
          <type>long</type>
          <declname>dc_counts</declname>
          <array>[]</array>
        </param>
        <param>
          <type>long</type>
          <declname>ac_counts</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="540" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="540" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1aef9fc94faa2a93d19776dc2cb37baa56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_gen_optimal_table</definition>
        <argsstring>(j_compress_ptr cinfo, JHUFF_TBL *htbl, long freq[])</argsstring>
        <name>jpeg_gen_optimal_table</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref> *</type>
          <declname>htbl</declname>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="642" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="642" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="jchuff_8c_1a14152b9774d5348adbbaf89209b113ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jinit_huff_encoder</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>jinit_huff_encoder</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" line="828" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c" bodystart="828" bodyend="846"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jchuff.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1991-1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>Huffman<sp/>entropy<sp/>encoding<sp/>routines.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Much<sp/>of<sp/>the<sp/>complexity<sp/>here<sp/>has<sp/>to<sp/>do<sp/>with<sp/>supporting<sp/>output<sp/>suspension.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>data<sp/>destination<sp/>module<sp/>demands<sp/>suspension,<sp/>we<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>back<sp/>up<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>MCU.<sp/><sp/>To<sp/>do<sp/>this,<sp/>we<sp/>copy<sp/>state</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>variables<sp/>into<sp/>local<sp/>working<sp/>storage,<sp/>and<sp/>update<sp/>them<sp/>back<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>permanent<sp/>JPEG<sp/>objects<sp/>only<sp/>upon<sp/>successful<sp/>completion<sp/>of<sp/>an<sp/>MCU.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jchuff.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declarations<sp/>shared<sp/>with<sp/>jcphuff.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Expanded<sp/>entropy<sp/>encoder<sp/>object<sp/>for<sp/>Huffman<sp/>encoding.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>The<sp/>savable_state<sp/>subrecord<sp/>contains<sp/>fields<sp/>that<sp/>change<sp/>within<sp/>an<sp/>MCU,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>but<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>permanently<sp/>until<sp/>we<sp/>complete<sp/>the<sp/>MCU.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structsavable__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>INT32<sp/>put_buffer;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>bit-accumulation<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>put_bits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>bits<sp/>now<sp/>in<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val[MAX_COMPS_IN_SCAN];<sp/></highlight><highlight class="comment">/*<sp/>last<sp/>DC<sp/>coef<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>macro<sp/>is<sp/>to<sp/>work<sp/>around<sp/>compilers<sp/>with<sp/>missing<sp/>or<sp/>broken</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>structure<sp/>assignment.<sp/><sp/>You&apos;ll<sp/>need<sp/>to<sp/>fix<sp/>this<sp/>code<sp/>if<sp/>you<sp/>have</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>such<sp/>a<sp/>compiler<sp/>and<sp/>you<sp/>change<sp/>MAX_COMPS_IN_SCAN.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_STRUCT_ASSIGN</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>((dest)<sp/>=<sp/>(src))</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>MAX_COMPS_IN_SCAN<sp/>==<sp/>4</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((dest).put_buffer<sp/>=<sp/>(src).put_buffer,<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).put_bits<sp/>=<sp/>(src).put_bits,<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[0]<sp/>=<sp/>(src).last_dc_val[0],<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[1]<sp/>=<sp/>(src).last_dc_val[1],<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[2]<sp/>=<sp/>(src).last_dc_val[2],<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[3]<sp/>=<sp/>(src).last_dc_val[3])</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structhuff__entropy__encoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__encoder" kindref="compound">jpeg_entropy_encoder</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>saved;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>buffer<sp/>&amp;<sp/>DC<sp/>state<sp/>at<sp/>start<sp/>of<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>NOT<sp/>loaded<sp/>into<sp/>local<sp/>working<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restarts_to_go;<sp/><sp/></highlight><highlight class="comment">/*<sp/>MCUs<sp/>left<sp/>in<sp/>this<sp/>restart<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_restart_num;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>restart<sp/>number<sp/>to<sp/>write<sp/>(0-7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointers<sp/>to<sp/>derived<sp/>tables<sp/>(these<sp/>workspaces<sp/>have<sp/>image<sp/>lifespan)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*<sp/>dc_derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*<sp/>ac_derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Statistics<sp/>tables<sp/>for<sp/>optimization<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>dc_count_ptrs[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>ac_count_ptrs[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_encoder</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_encoder</ref><sp/>*<sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Working<sp/>state<sp/>while<sp/>writing<sp/>an<sp/>MCU.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>This<sp/>struct<sp/>contains<sp/>all<sp/>the<sp/>fields<sp/>that<sp/>are<sp/>needed<sp/>by<sp/>subroutines.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structworking__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>JOCTET<sp/>*<sp/>next_output_byte;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>next<sp/>byte<sp/>to<sp/>write<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>free_in_buffer;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>byte<sp/>spaces<sp/>remaining<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>cur;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>bit<sp/>buffer<sp/>&amp;<sp/>DC<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dump_buffer<sp/>needs<sp/>access<sp/>to<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="structworking__state" kindref="compound">working_state</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_huff<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish_pass_huff<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_gather<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="95"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish_pass_gather<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>for<sp/>a<sp/>Huffman-compressed<sp/>scan.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>If<sp/>gather_statistics<sp/>is<sp/>TRUE,<sp/>we<sp/>do<sp/>not<sp/>output<sp/>anything<sp/>during<sp/>the<sp/>scan,</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>just<sp/>count<sp/>the<sp/>Huffman<sp/>symbols<sp/>used<sp/>and<sp/>generate<sp/>Huffman<sp/>code<sp/>tables.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">start_pass_huff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>gather_statistics)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>dctbl,<sp/>actbl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>if<sp/>(gather_statistics)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_gather;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.finish_pass<sp/>=<sp/>finish_pass_gather;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_NOT_COMPILED);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_huff;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.finish_pass<sp/>=<sp/>finish_pass_huff;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>dctbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>actbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>requested<sp/>tables<sp/>are<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(In<sp/>gather<sp/>mode,<sp/>tables<sp/>need<sp/>not<sp/>be<sp/>allocated<sp/>yet)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dctbl<sp/>&lt;<sp/>0<sp/>||<sp/>dctbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>(cinfo-&gt;dc_huff_tbl_ptrs[dctbl]<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>!gather_statistics))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>dctbl);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actbl<sp/>&lt;<sp/>0<sp/>||<sp/>actbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>(cinfo-&gt;ac_huff_tbl_ptrs[actbl]<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>!gather_statistics))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>actbl);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gather_statistics)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>and<sp/>zero<sp/>the<sp/>statistics<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>jpeg_gen_optimal_table<sp/>expects<sp/>257<sp/>entries<sp/>in<sp/>each<sp/>table!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;dc_count_ptrs[dctbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;dc_count_ptrs[dctbl]<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MEMZERO(entropy-&gt;dc_count_ptrs[dctbl],<sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;ac_count_ptrs[actbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;ac_count_ptrs[actbl]<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MEMZERO(entropy-&gt;ac_count_ptrs[actbl],<sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>derived<sp/>values<sp/>for<sp/>Huffman<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>may<sp/>do<sp/>this<sp/>more<sp/>than<sp/>once<sp/>for<sp/>a<sp/>table,<sp/>but<sp/>it&apos;s<sp/>not<sp/>expensive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_make_c_derived_tbl(cinfo,<sp/>cinfo-&gt;dc_huff_tbl_ptrs[dctbl],</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;dc_derived_tbls[dctbl]);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_make_c_derived_tbl(cinfo,<sp/>cinfo-&gt;ac_huff_tbl_ptrs[actbl],</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;ac_derived_tbls[actbl]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>bit<sp/>buffer<sp/>to<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.put_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.put_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>restart<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>entropy-&gt;next_restart_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>derived<sp/>values<sp/>for<sp/>a<sp/>Huffman<sp/>table.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>Note<sp/>this<sp/>is<sp/>also<sp/>used<sp/>by<sp/>jcphuff.c.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">jpeg_make_c_derived_tbl<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref><sp/>*<sp/>htbl,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>**<sp/>pdtbl)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*dtbl;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/>i,<sp/>l,<sp/>lastp,<sp/>si;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>huffsize[257];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huffcode[257];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>workspace<sp/>if<sp/>we<sp/>haven&apos;t<sp/>already<sp/>done<sp/>so.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pdtbl<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>*pdtbl<sp/>=<sp/>(<ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref>));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>dtbl<sp/>=<sp/>*pdtbl;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>C.1:<sp/>make<sp/>table<sp/>of<sp/>Huffman<sp/>code<sp/>length<sp/>for<sp/>each<sp/>symbol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>in<sp/>code-length<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>1;<sp/>l<sp/>&lt;=<sp/>16;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(int)<sp/>htbl-&gt;bits[l];<sp/>i++)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>huffsize[p++]<sp/>=<sp/>(char)<sp/>l;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>huffsize[p]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>lastp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>C.2:<sp/>generate<sp/>the<sp/>codes<sp/>themselves<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>in<sp/>code-length<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>si<sp/>=<sp/>huffsize[0];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(huffsize[p])<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>huffsize[p])<sp/>==<sp/>si)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>huffcode[p++]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code++;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>si++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>C.3:<sp/>generate<sp/>encoding<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>code<sp/>and<sp/>size<sp/>indexed<sp/>by<sp/>symbol<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>any<sp/>codeless<sp/>symbols<sp/>to<sp/>have<sp/>code<sp/>length<sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>allows<sp/>emit_bits<sp/>to<sp/>detect<sp/>any<sp/>attempt<sp/>to<sp/>emit<sp/>such<sp/>symbols.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>MEMZERO(dtbl-&gt;ehufsi,<sp/>SIZEOF(dtbl-&gt;ehufsi));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>lastp;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>dtbl-&gt;ehufco[htbl-&gt;huffval[p]]<sp/>=<sp/>huffcode[p];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>dtbl-&gt;ehufsi[htbl-&gt;huffval[p]]<sp/>=<sp/>huffsize[p];</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outputting<sp/>bytes<sp/>to<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emit<sp/>a<sp/>byte,<sp/>taking<sp/>&apos;action&apos;<sp/>if<sp/>must<sp/>suspend.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>emit_byte(state,val,action)<sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>*(state)-&gt;next_output_byte++<sp/>=<sp/>(JOCTET)<sp/>(val);<sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(--(state)-&gt;free_in_buffer<sp/>==<sp/>0)<sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>dump_buffer(state))<sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>action;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">dump_buffer<sp/>(<ref refid="structworking__state" kindref="compound">working_state</ref><sp/>*<sp/>state)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Empty<sp/>the<sp/>output<sp/>buffer;<sp/>return<sp/>TRUE<sp/>if<sp/>successful,<sp/>FALSE<sp/>if<sp/>must<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__destination__mgr" kindref="compound">jpeg_destination_mgr</ref><sp/>*<sp/>dest<sp/>=<sp/>state-&gt;cinfo-&gt;dest;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(*dest-&gt;empty_output_buffer)<sp/>(state-&gt;cinfo))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>After<sp/>a<sp/>successful<sp/>buffer<sp/>dump,<sp/>must<sp/>reset<sp/>buffer<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>state-&gt;next_output_byte<sp/>=<sp/>dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>state-&gt;free_in_buffer<sp/>=<sp/>dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outputting<sp/>bits<sp/>to<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Only<sp/>the<sp/>right<sp/>24<sp/>bits<sp/>of<sp/>put_buffer<sp/>are<sp/>used;<sp/>the<sp/>valid<sp/>bits<sp/>are</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>left-justified<sp/>in<sp/>this<sp/>part.<sp/><sp/>At<sp/>most<sp/>16<sp/>bits<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>emit_bits</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>in<sp/>one<sp/>call,<sp/>and<sp/>we<sp/>never<sp/>retain<sp/>more<sp/>than<sp/>7<sp/>bits<sp/>in<sp/>put_buffer</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>between<sp/>calls,<sp/>so<sp/>24<sp/>bits<sp/>are<sp/>sufficient.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">INLINE</highlight></codeline>
<codeline lineno="270"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">emit_bits<sp/>(<ref refid="structworking__state" kindref="compound">working_state</ref><sp/>*<sp/>state,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emit<sp/>some<sp/>bits;<sp/>return<sp/>TRUE<sp/>if<sp/>successful,<sp/>FALSE<sp/>if<sp/>must<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>routine<sp/>is<sp/>heavily<sp/>used,<sp/>so<sp/>it&apos;s<sp/>worth<sp/>coding<sp/>tightly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>INT32<sp/>put_buffer<sp/>=<sp/>(INT32)<sp/>code;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>put_bits<sp/>=<sp/>state-&gt;cur.put_bits;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>size<sp/>is<sp/>0,<sp/>caller<sp/>used<sp/>an<sp/>invalid<sp/>Huffman<sp/>table<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(state-&gt;cinfo,<sp/>JERR_HUFF_MISSING_CODE);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>put_buffer<sp/>&amp;=<sp/>(((INT32)<sp/>1)&lt;&lt;size)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>off<sp/>any<sp/>extra<sp/>bits<sp/>in<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>put_bits<sp/>+=<sp/>size;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>put_buffer<sp/>&lt;&lt;=<sp/>24<sp/>-<sp/>put_bits;<sp/></highlight><highlight class="comment">/*<sp/>align<sp/>incoming<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>put_buffer<sp/>|=<sp/>state-&gt;cur.put_buffer;<sp/></highlight><highlight class="comment">/*<sp/>and<sp/>merge<sp/>with<sp/>old<sp/>buffer<sp/>contents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(put_bits<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>(int)<sp/>((put_buffer<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_byte(state,<sp/>c,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xFF)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>to<sp/>stuff<sp/>a<sp/>zero<sp/>byte?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_byte(state,<sp/>0,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>put_buffer<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>put_bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>state-&gt;cur.put_buffer<sp/>=<sp/>put_buffer;<sp/></highlight><highlight class="comment">/*<sp/>update<sp/>state<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>state-&gt;cur.put_bits<sp/>=<sp/>put_bits;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">flush_bits<sp/>(<ref refid="structworking__state" kindref="compound">working_state</ref><sp/>*<sp/>state)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>0x7F,<sp/>7))<sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>any<sp/>partial<sp/>byte<sp/>with<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>state-&gt;cur.put_buffer<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>reset<sp/>bit-buffer<sp/>to<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>state-&gt;cur.put_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encode<sp/>a<sp/>single<sp/>block&apos;s<sp/>worth<sp/>of<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">encode_one_block<sp/>(<ref refid="structworking__state" kindref="compound">working_state</ref><sp/>*<sp/>state,<sp/>JCOEFPTR<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*dctbl,<sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*actbl)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp,<sp/>temp2;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>r,<sp/>i;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>DC<sp/>coefficient<sp/>difference<sp/>per<sp/>section<sp/>F.1.2.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>temp2<sp/>=<sp/>block[0]<sp/>-<sp/>last_dc_val;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>is<sp/>abs<sp/>value<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>a<sp/>negative<sp/>input,<sp/>want<sp/>temp2<sp/>=<sp/>bitwise<sp/>complement<sp/>of<sp/>abs(input)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>code<sp/>assumes<sp/>we<sp/>are<sp/>on<sp/>a<sp/>two&apos;s<sp/>complement<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>temp2--;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>nbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>the<sp/>Huffman-coded<sp/>symbol<sp/>for<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>dctbl-&gt;ehufco[nbits],<sp/>dctbl-&gt;ehufsi[nbits]))</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>that<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>the<sp/>value,<sp/>if<sp/>positive,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>or<sp/>the<sp/>complement<sp/>of<sp/>its<sp/>magnitude,<sp/>if<sp/>negative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>emit_bits<sp/>rejects<sp/>calls<sp/>with<sp/>size<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp2,<sp/>nbits))</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>AC<sp/>coefficients<sp/>per<sp/>section<sp/>F.1.2.2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>run<sp/>length<sp/>of<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>DCTSIZE2;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((temp<sp/>=<sp/>block[jpeg_natural_order[k]])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>run<sp/>length<sp/>&gt;<sp/>15,<sp/>must<sp/>emit<sp/>special<sp/>run-length-16<sp/>codes<sp/>(0xF0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>actbl-&gt;ehufco[0xF0],<sp/>actbl-&gt;ehufsi[0xF0]))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>is<sp/>abs<sp/>value<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>code<sp/>assumes<sp/>we<sp/>are<sp/>on<sp/>a<sp/>two&apos;s<sp/>complement<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>temp2--;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbits<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>must<sp/>be<sp/>at<sp/>least<sp/>one<sp/>1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((temp<sp/>&gt;&gt;=<sp/>1))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>Huffman<sp/>symbol<sp/>for<sp/>run<sp/>length<sp/>/<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(r<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>nbits;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>actbl-&gt;ehufco[i],<sp/>actbl-&gt;ehufsi[i]))</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>that<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>the<sp/>value,<sp/>if<sp/>positive,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>or<sp/>the<sp/>complement<sp/>of<sp/>its<sp/>magnitude,<sp/>if<sp/>negative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp2,<sp/>nbits))</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>last<sp/>coef(s)<sp/>were<sp/>zero,<sp/>emit<sp/>an<sp/>end-of-block<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_bits(state,<sp/>actbl-&gt;ehufco[0],<sp/>actbl-&gt;ehufsi[0]))</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>Emit<sp/>a<sp/>restart<sp/>marker<sp/>&amp;<sp/>resynchronize<sp/>predictions.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">emit_restart<sp/>(<ref refid="structworking__state" kindref="compound">working_state</ref><sp/>*<sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restart_num)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>flush_bits(state))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>emit_byte(state,<sp/>0xFF,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>emit_byte(state,<sp/>JPEG_RST0<sp/>+<sp/>restart_num,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>state-&gt;cinfo-&gt;comps_in_scan;<sp/>ci++)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;cur.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>restart<sp/>counter<sp/>is<sp/>not<sp/>updated<sp/>until<sp/>we<sp/>successfully<sp/>write<sp/>the<sp/>MCU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>Encode<sp/>and<sp/>output<sp/>one<sp/>MCU&apos;s<sp/>worth<sp/>of<sp/>Huffman-compressed<sp/>coefficients.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">encode_mcu_huff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="structworking__state" kindref="compound">working_state</ref><sp/>state;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn,<sp/>ci;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>state.next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>state.free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(state.cur,<sp/>entropy-&gt;saved);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>state.cinfo<sp/>=<sp/>cinfo;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>restart<sp/>marker<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>emit_restart(&amp;state,<sp/>entropy-&gt;next_restart_num))</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>MCU<sp/>data<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>cinfo-&gt;MCU_membership[blkn];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>encode_one_block(&amp;state,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MCU_data[blkn][0],<sp/>state.cur.last_dc_val[ci],</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;dc_derived_tbls[compptr-&gt;dc_tbl_no],</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;ac_derived_tbls[compptr-&gt;ac_tbl_no]))</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>last_dc_val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>state.cur.last_dc_val[ci]<sp/>=<sp/>MCU_data[blkn][0][0];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>state.next_output_byte;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>state.free_in_buffer;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(entropy-&gt;saved,<sp/>state.cur);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart-interval<sp/>state<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num++;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>Finish<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>Huffman-compressed<sp/>scan.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">finish_pass_huff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="structworking__state" kindref="compound">working_state</ref><sp/>state;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>...<sp/>flush_bits<sp/>needs<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>state.next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>state.free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(state.cur,<sp/>entropy-&gt;saved);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>state.cinfo<sp/>=<sp/>cinfo;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>out<sp/>the<sp/>last<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>flush_bits(&amp;state))</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_CANT_SUSPEND);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>state.next_output_byte;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>state.free_in_buffer;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(entropy-&gt;saved,<sp/>state.cur);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>Huffman<sp/>coding<sp/>optimization.</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>This<sp/>actually<sp/>is<sp/>optimization,<sp/>in<sp/>the<sp/>sense<sp/>that<sp/>we<sp/>find<sp/>the<sp/>best<sp/>possible</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>Huffman<sp/>table(s)<sp/>for<sp/>the<sp/>given<sp/>data.<sp/><sp/>We<sp/>first<sp/>scan<sp/>the<sp/>supplied<sp/>data<sp/>and</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>count<sp/>the<sp/>number<sp/>of<sp/>uses<sp/>of<sp/>each<sp/>symbol<sp/>that<sp/>is<sp/>to<sp/>be<sp/>Huffman-coded.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>(This<sp/>process<sp/>must<sp/>agree<sp/>with<sp/>the<sp/>code<sp/>above.)<sp/><sp/>Then<sp/>we<sp/>build<sp/>an</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>optimal<sp/>Huffman<sp/>coding<sp/>tree<sp/>for<sp/>the<sp/>observed<sp/>counts.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>The<sp/>JPEG<sp/>standard<sp/>requires<sp/>Huffman<sp/>codes<sp/>to<sp/>be<sp/>no<sp/>more<sp/>than<sp/>16<sp/>bits<sp/>long.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>If<sp/>some<sp/>symbols<sp/>have<sp/>a<sp/>very<sp/>small<sp/>but<sp/>nonzero<sp/>probability,<sp/>the<sp/>Huffman<sp/>tree</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>adjusted<sp/>to<sp/>meet<sp/>the<sp/>code<sp/>length<sp/>restriction.<sp/><sp/>We<sp/>currently<sp/>use</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>the<sp/>adjustment<sp/>method<sp/>suggested<sp/>in<sp/>the<sp/>JPEG<sp/>spec.<sp/><sp/>This<sp/>method<sp/>is<sp/>*not*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>optimal;<sp/>it<sp/>may<sp/>not<sp/>choose<sp/>the<sp/>best<sp/>possible<sp/>limited-length<sp/>code.<sp/><sp/>But</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>since<sp/>the<sp/>symbols<sp/>involved<sp/>are<sp/>infrequently<sp/>used,<sp/>it&apos;s<sp/>not<sp/>clear<sp/>that</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>going<sp/>to<sp/>extra<sp/>trouble<sp/>is<sp/>worthwhile.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Process<sp/>a<sp/>single<sp/>block&apos;s<sp/>worth<sp/>of<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">htest_one_block<sp/>(JCOEFPTR<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dc_counts[],<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ac_counts[])</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>r;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>DC<sp/>coefficient<sp/>difference<sp/>per<sp/>section<sp/>F.1.2.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>block[0]<sp/>-<sp/>last_dc_val;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>nbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>the<sp/>Huffman<sp/>symbol<sp/>for<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>dc_counts[nbits]++;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>AC<sp/>coefficients<sp/>per<sp/>section<sp/>F.1.2.2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>run<sp/>length<sp/>of<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>DCTSIZE2;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((temp<sp/>=<sp/>block[jpeg_natural_order[k]])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>run<sp/>length<sp/>&gt;<sp/>15,<sp/>must<sp/>emit<sp/>special<sp/>run-length-16<sp/>codes<sp/>(0xF0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>ac_counts[0xF0]++;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbits<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>must<sp/>be<sp/>at<sp/>least<sp/>one<sp/>1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((temp<sp/>&gt;&gt;=<sp/>1))</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>Huffman<sp/>symbol<sp/>for<sp/>run<sp/>length<sp/>/<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ac_counts[(r<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>nbits]++;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>last<sp/>coef(s)<sp/>were<sp/>zero,<sp/>emit<sp/>an<sp/>end-of-block<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>ac_counts[0]++;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>Trial-encode<sp/>one<sp/>MCU&apos;s<sp/>worth<sp/>of<sp/>Huffman-compressed<sp/>coefficients.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>No<sp/>data<sp/>is<sp/>actually<sp/>output,<sp/>so<sp/>no<sp/>suspension<sp/>return<sp/>is<sp/>possible.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">encode_mcu_gather<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn,<sp/>ci;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Take<sp/>care<sp/>of<sp/>restart<sp/>intervals<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>cinfo-&gt;MCU_membership[blkn];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>htest_one_block(MCU_data[blkn][0],<sp/>entropy-&gt;saved.last_dc_val[ci],</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;dc_count_ptrs[compptr-&gt;dc_tbl_no],</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;ac_count_ptrs[compptr-&gt;ac_tbl_no]);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>MCU_data[blkn][0][0];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>Generate<sp/>the<sp/>optimal<sp/>coding<sp/>for<sp/>the<sp/>given<sp/>counts,<sp/>fill<sp/>htbl.</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>Note<sp/>this<sp/>is<sp/>also<sp/>used<sp/>by<sp/>jcphuff.c.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">jpeg_gen_optimal_table<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref><sp/>*<sp/>htbl,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq[])</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_CLEN<sp/>32<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assumed<sp/>maximum<sp/>initial<sp/>code<sp/>length<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>UINT8<sp/>bits[MAX_CLEN+1];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits[k]<sp/>=<sp/>#<sp/>of<sp/>symbols<sp/>with<sp/>code<sp/>length<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codesize[257];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>codesize[k]<sp/>=<sp/>code<sp/>length<sp/>of<sp/>symbol<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>others[257];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>symbol<sp/>in<sp/>current<sp/>branch<sp/>of<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>algorithm<sp/>is<sp/>explained<sp/>in<sp/>section<sp/>K.2<sp/>of<sp/>the<sp/>JPEG<sp/>standard<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>MEMZERO(bits,<sp/>SIZEOF(bits));</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>MEMZERO(codesize,<sp/>SIZEOF(codesize));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>257;<sp/>i++)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>others[i]<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>links<sp/>to<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>freq[256]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>there<sp/>is<sp/>a<sp/>nonzero<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Including<sp/>the<sp/>pseudo-symbol<sp/>256<sp/>in<sp/>the<sp/>Huffman<sp/>procedure<sp/>guarantees</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/>*<sp/>that<sp/>no<sp/>real<sp/>symbol<sp/>is<sp/>given<sp/>code-value<sp/>of<sp/>all<sp/>ones,<sp/>because<sp/>256</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/>*<sp/>will<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>largest<sp/>codeword<sp/>category.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Huffman&apos;s<sp/>basic<sp/>algorithm<sp/>to<sp/>assign<sp/>optimal<sp/>code<sp/>lengths<sp/>to<sp/>symbols<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>smallest<sp/>nonzero<sp/>frequency,<sp/>set<sp/>c1<sp/>=<sp/>its<sp/>symbol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>ties,<sp/>take<sp/>the<sp/>larger<sp/>symbol<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>1000000000L;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freq[i]<sp/>&amp;&amp;<sp/>freq[i]<sp/>&lt;=<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>freq[i];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>next<sp/>smallest<sp/>nonzero<sp/>frequency,<sp/>set<sp/>c2<sp/>=<sp/>its<sp/>symbol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>ties,<sp/>take<sp/>the<sp/>larger<sp/>symbol<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>1000000000L;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freq[i]<sp/>&amp;&amp;<sp/>freq[i]<sp/>&lt;=<sp/>v<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>c1)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>freq[i];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Done<sp/>if<sp/>we&apos;ve<sp/>merged<sp/>everything<sp/>into<sp/>one<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Else<sp/>merge<sp/>the<sp/>two<sp/>counts/trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>freq[c1]<sp/>+=<sp/>freq[c2];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>freq[c2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>codesize<sp/>of<sp/>everything<sp/>in<sp/>c1&apos;s<sp/>tree<sp/>branch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>codesize[c1]++;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(others[c1]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>others[c1];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codesize[c1]++;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>others[c1]<sp/>=<sp/>c2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chain<sp/>c2<sp/>onto<sp/>c1&apos;s<sp/>tree<sp/>branch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>codesize<sp/>of<sp/>everything<sp/>in<sp/>c2&apos;s<sp/>tree<sp/>branch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>codesize[c2]++;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(others[c2]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>others[c2];</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codesize[c2]++;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>count<sp/>the<sp/>number<sp/>of<sp/>symbols<sp/>of<sp/>each<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codesize[i])<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>JPEG<sp/>standard<sp/>seems<sp/>to<sp/>think<sp/>that<sp/>this<sp/>can&apos;t<sp/>happen,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>but<sp/>I&apos;m<sp/>paranoid...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codesize[i]<sp/>&gt;<sp/>MAX_CLEN)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_HUFF_CLEN_OVERFLOW);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits[codesize[i]]++;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>JPEG<sp/>doesn&apos;t<sp/>allow<sp/>symbols<sp/>with<sp/>code<sp/>lengths<sp/>over<sp/>16<sp/>bits,<sp/>so<sp/>if<sp/>the<sp/>pure</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Huffman<sp/>procedure<sp/>assigned<sp/>any<sp/>such<sp/>lengths,<sp/>we<sp/>must<sp/>adjust<sp/>the<sp/>coding.</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Here<sp/>is<sp/>what<sp/>the<sp/>JPEG<sp/>spec<sp/>says<sp/>about<sp/>how<sp/>this<sp/>next<sp/>bit<sp/>works:</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Since<sp/>symbols<sp/>are<sp/>paired<sp/>for<sp/>the<sp/>longest<sp/>Huffman<sp/>code,<sp/>the<sp/>symbols<sp/>are</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/>*<sp/>removed<sp/>from<sp/>this<sp/>length<sp/>category<sp/>two<sp/>at<sp/>a<sp/>time.<sp/><sp/>The<sp/>prefix<sp/>for<sp/>the<sp/>pair</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(which<sp/>is<sp/>one<sp/>bit<sp/>shorter)<sp/>is<sp/>allocated<sp/>to<sp/>one<sp/>of<sp/>the<sp/>pair;<sp/>then,</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/>*<sp/>skipping<sp/>the<sp/>BITS<sp/>entry<sp/>for<sp/>that<sp/>prefix<sp/>length,<sp/>a<sp/>code<sp/>word<sp/>from<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/>*<sp/>shortest<sp/>nonzero<sp/>BITS<sp/>entry<sp/>is<sp/>converted<sp/>into<sp/>a<sp/>prefix<sp/>for<sp/>two<sp/>code<sp/>words</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/>*<sp/>one<sp/>bit<sp/>longer.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>MAX_CLEN;<sp/>i<sp/>&gt;<sp/>16;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i<sp/>-<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>length<sp/>of<sp/>new<sp/>prefix<sp/>to<sp/>be<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits[j]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits[i]<sp/>-=<sp/>2;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>two<sp/>symbols<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits[i-1]++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>goes<sp/>in<sp/>this<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits[j+1]<sp/>+=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>new<sp/>symbols<sp/>in<sp/>this<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits[j]--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>symbol<sp/>of<sp/>this<sp/>length<sp/>is<sp/>now<sp/>a<sp/>prefix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>count<sp/>for<sp/>the<sp/>pseudo-symbol<sp/>256<sp/>from<sp/>the<sp/>largest<sp/>codelength<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits[i]<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>largest<sp/>codelength<sp/>still<sp/>in<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>bits[i]--;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>final<sp/>symbol<sp/>counts<sp/>(only<sp/>for<sp/>lengths<sp/>0..16)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>MEMCOPY(htbl-&gt;bits,<sp/>bits,<sp/>SIZEOF(htbl-&gt;bits));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>list<sp/>of<sp/>the<sp/>symbols<sp/>sorted<sp/>by<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>not<sp/>real<sp/>clear<sp/>to<sp/>me<sp/>why<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>consider<sp/>the<sp/>codelength</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/>*<sp/>changes<sp/>made<sp/>above,<sp/>but<sp/>the<sp/>JPEG<sp/>spec<sp/>seems<sp/>to<sp/>think<sp/>this<sp/>works.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>MAX_CLEN;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>255;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codesize[j]<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>htbl-&gt;huffval[p]<sp/>=<sp/>(UINT8)<sp/>j;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>sent_table<sp/>FALSE<sp/>so<sp/>updated<sp/>table<sp/>will<sp/>be<sp/>written<sp/>to<sp/>JPEG<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>htbl-&gt;sent_table<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>Finish<sp/>up<sp/>a<sp/>statistics-gathering<sp/>pass<sp/>and<sp/>create<sp/>the<sp/>new<sp/>Huffman<sp/>tables.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">finish_pass_gather<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>dctbl,<sp/>actbl;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref><sp/>**htblptr;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>did_dc[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>did_ac[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>important<sp/>not<sp/>to<sp/>apply<sp/>jpeg_gen_optimal_table<sp/>more<sp/>than<sp/>once</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/>*<sp/>per<sp/>table,<sp/>because<sp/>it<sp/>clobbers<sp/>the<sp/>input<sp/>frequency<sp/>counts!</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>MEMZERO(did_dc,<sp/>SIZEOF(did_dc));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>MEMZERO(did_ac,<sp/>SIZEOF(did_ac));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>dctbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>actbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>did_dc[dctbl])<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htblptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;dc_huff_tbl_ptrs[dctbl];</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*htblptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>*htblptr<sp/>=<sp/>jpeg_alloc_huff_table((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_gen_optimal_table(cinfo,<sp/>*htblptr,<sp/>entropy-&gt;dc_count_ptrs[dctbl]);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>did_dc[dctbl]<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>did_ac[actbl])<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htblptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;ac_huff_tbl_ptrs[actbl];</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*htblptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>*htblptr<sp/>=<sp/>jpeg_alloc_huff_table((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_gen_optimal_table(cinfo,<sp/>*htblptr,<sp/>entropy-&gt;ac_count_ptrs[actbl]);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>did_ac[actbl]<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ENTROPY_OPT_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>Module<sp/>initialization<sp/>routine<sp/>for<sp/>Huffman<sp/>entropy<sp/>encoding.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal">jinit_huff_encoder<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_encoder</ref>));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>cinfo-&gt;entropy<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__encoder" kindref="compound">jpeg_entropy_encoder</ref><sp/>*)<sp/>entropy;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>entropy-&gt;pub.start_pass<sp/>=<sp/>start_pass_huff;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>tables<sp/>unallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_HUFF_TBLS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;dc_derived_tbls[i]<sp/>=<sp/>entropy-&gt;ac_derived_tbls[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENTROPY_OPT_SUPPORTED</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;dc_count_ptrs[i]<sp/>=<sp/>entropy-&gt;ac_count_ptrs[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jchuff.c"/>
  </compounddef>
</doxygen>
