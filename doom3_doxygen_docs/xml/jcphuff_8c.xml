<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jcphuff_8c" kind="file">
    <compoundname>jcphuff.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jchuff_8h" local="yes">jchuff.h</includes>
    <innerclass refid="structphuff__entropy__encoder" prot="public">phuff_entropy_encoder</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jcphuff_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="15" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jcphuff_8c_1ad1fe6569ffbe4b0fe1496d3b3f97136c" prot="public" static="no">
        <name>MAX_CORR_BITS</name>
        <initializer>1000	/* Max # of correction bits I can buffer */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="70" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jcphuff_8c_1a1782895810a7c6dd95d870de9366b948" prot="public" static="no">
        <name>ISHIFT_TEMPS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="84" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jcphuff_8c_1a7f291127ecba34f0b64be39e09411e8b" prot="public" static="no">
        <name>IRIGHT_SHIFT</name>
        <param><defname>x</defname></param>
        <param><defname>shft</defname></param>
        <initializer>((x) &gt;&gt; (shft))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="85" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jcphuff_8c_1a0b98ab18003c8c3749dd106884392d70" prot="public" static="no">
        <name>emit_byte</name>
        <param><defname>entropy</defname></param>
        <param><defname>val</defname></param>
        <initializer>{ *(entropy)-&gt;next_output_byte++ = (JOCTET) (val);  \
	  if (--(entropy)-&gt;free_in_buffer == 0)  \
	    dump_buffer(entropy); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="205" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jcphuff_8c_1a7e9448e2c297381f95f4aa5ac1f0f3b9" prot="public" static="no">
        <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_encoder</ref> *</type>
        <definition>typedef phuff_entropy_encoder* phuff_entropy_ptr</definition>
        <argsstring></argsstring>
        <name>phuff_entropy_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jcphuff_8c_1ad3bdb7d5af7d4134fdc5982a752c345c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_DC_first</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_DC_first</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="381" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1acc6b50f6303373067713baf8663fdcbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_AC_first</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_AC_first</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="463" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a377b6f8712c7df658a2a79ef5cc4b0fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_DC_refine</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_DC_refine</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="567" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a7374fb01116bc55c075c730aa5d6796b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean encode_mcu_AC_refine</definition>
        <argsstring>(j_compress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>encode_mcu_AC_refine</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="614" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a937e262c5c259623254ebdfc2cb49f53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void finish_pass_phuff</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>finish_pass_phuff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="97" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="742" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1ac90a1b6d9f16790b43398f12871c5042" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void finish_pass_gather_phuff</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>finish_pass_gather_phuff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="98" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="763" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1ab49e6aa830a4b6ce3ba667e771df6011" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_pass_phuff</definition>
        <argsstring>(j_compress_ptr cinfo, boolean gather_statistics)</argsstring>
        <name>start_pass_phuff</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>gather_statistics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="106" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="106" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a22ddc81c86db501237012772583f9a97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dump_buffer</definition>
        <argsstring>(phuff_entropy_ptr entropy)</argsstring>
        <name>dump_buffer</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="212" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a46269fdceddbd3107661c1851732ae94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void emit_bits</definition>
        <argsstring>(phuff_entropy_ptr entropy, unsigned int code, int size)</argsstring>
        <name>emit_bits</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="235" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="235" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a5b1c5894f814e678f3ceeb5b3ebf126e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flush_bits</definition>
        <argsstring>(phuff_entropy_ptr entropy)</argsstring>
        <name>flush_bits</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="274" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1aa86974f018c75f1de77ee4c9cf877f73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void emit_symbol</definition>
        <argsstring>(phuff_entropy_ptr entropy, int tbl_no, int symbol)</argsstring>
        <name>emit_symbol</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tbl_no</declname>
        </param>
        <param>
          <type>int</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="288" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="288" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a348ee5dec2288a909ca2a4ee7f38981d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void emit_buffered_bits</definition>
        <argsstring>(phuff_entropy_ptr entropy, char *bufstart, unsigned int nbits)</argsstring>
        <name>emit_buffered_bits</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>bufstart</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="304" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="304" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1a1050c4d89838f0508c3f027664379b38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void emit_eobrun</definition>
        <argsstring>(phuff_entropy_ptr entropy)</argsstring>
        <name>emit_eobrun</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="323" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="323" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1af7339167a4c9729c206ad3ad86b95d6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void emit_restart</definition>
        <argsstring>(phuff_entropy_ptr entropy, int restart_num)</argsstring>
        <name>emit_restart</name>
        <param>
          <type><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref></type>
          <declname>entropy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>restart_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="351" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="351" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="jcphuff_8c_1ab604f00dccb6cb30f3be269bbd1809b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jinit_phuff_encoder</definition>
        <argsstring>(j_compress_ptr cinfo)</argsstring>
        <name>jinit_phuff_encoder</name>
        <param>
          <type><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" line="810" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c" bodystart="810" bodyend="827"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jcphuff.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>Huffman<sp/>entropy<sp/>encoding<sp/>routines<sp/>for<sp/>progressive<sp/>JPEG.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>We<sp/>do<sp/>not<sp/>support<sp/>output<sp/>suspension<sp/>in<sp/>this<sp/>module,<sp/>since<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>currently<sp/>does<sp/>not<sp/>allow<sp/>multiple-scan<sp/>files<sp/>to<sp/>be<sp/>written<sp/>with<sp/>output</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>suspension.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jchuff.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declarations<sp/>shared<sp/>with<sp/>jchuff.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>C_PROGRESSIVE_SUPPORTED</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Expanded<sp/>entropy<sp/>encoder<sp/>object<sp/>for<sp/>progressive<sp/>Huffman<sp/>encoding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structphuff__entropy__encoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__encoder" kindref="compound">jpeg_entropy_encoder</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mode<sp/>flag:<sp/>TRUE<sp/>for<sp/>optimization,<sp/>FALSE<sp/>for<sp/>actual<sp/>data<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>gather_statistics;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit-level<sp/>coding<sp/>status.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>*<sp/>next_output_byte/free_in_buffer<sp/>are<sp/>local<sp/>copies<sp/>of<sp/>cinfo-&gt;dest<sp/>fields.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>JOCTET<sp/>*<sp/>next_output_byte;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>next<sp/>byte<sp/>to<sp/>write<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>free_in_buffer;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>byte<sp/>spaces<sp/>remaining<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>INT32<sp/>put_buffer;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>bit-accumulation<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>put_bits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>bits<sp/>now<sp/>in<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>link<sp/>to<sp/>cinfo<sp/>(needed<sp/>for<sp/>dump_buffer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Coding<sp/>status<sp/>for<sp/>DC<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val[MAX_COMPS_IN_SCAN];<sp/></highlight><highlight class="comment">/*<sp/>last<sp/>DC<sp/>coef<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Coding<sp/>status<sp/>for<sp/>AC<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ac_tbl_no;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>table<sp/>number<sp/>of<sp/>the<sp/>single<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EOBRUN;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>run<sp/>length<sp/>of<sp/>EOBs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BE;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>buffered<sp/>correction<sp/>bits<sp/>before<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>bit_buffer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>for<sp/>correction<sp/>bits<sp/>(1<sp/>per<sp/>char)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>packing<sp/>correction<sp/>bits<sp/>tightly<sp/>would<sp/>save<sp/>some<sp/>space<sp/>but<sp/>cost<sp/>time...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restarts_to_go;<sp/><sp/></highlight><highlight class="comment">/*<sp/>MCUs<sp/>left<sp/>in<sp/>this<sp/>restart<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_restart_num;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>restart<sp/>number<sp/>to<sp/>write<sp/>(0-7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointers<sp/>to<sp/>derived<sp/>tables<sp/>(these<sp/>workspaces<sp/>have<sp/>image<sp/>lifespan).</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Since<sp/>any<sp/>one<sp/>scan<sp/>codes<sp/>only<sp/>DC<sp/>or<sp/>only<sp/>AC,<sp/>we<sp/>only<sp/>need<sp/>one<sp/>set</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/>of<sp/>tables,<sp/>not<sp/>one<sp/>for<sp/>DC<sp/>and<sp/>one<sp/>for<sp/>AC.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*<sp/>derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Statistics<sp/>tables<sp/>for<sp/>optimization;<sp/>again,<sp/>one<sp/>set<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>count_ptrs[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_encoder</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_encoder</ref><sp/>*<sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MAX_CORR_BITS<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>the<sp/>AC<sp/>refinement<sp/>correction-bit</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>buffer<sp/>can<sp/>hold.<sp/><sp/>Larger<sp/>sizes<sp/>may<sp/>slightly<sp/>improve<sp/>compression,<sp/>but</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>1000<sp/>is<sp/>already<sp/>well<sp/>into<sp/>the<sp/>realm<sp/>of<sp/>overkill.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>The<sp/>minimum<sp/>safe<sp/>size<sp/>is<sp/>64<sp/>bits.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_CORR_BITS<sp/><sp/>1000<sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>#<sp/>of<sp/>correction<sp/>bits<sp/>I<sp/>can<sp/>buffer<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IRIGHT_SHIFT<sp/>is<sp/>like<sp/>RIGHT_SHIFT,<sp/>but<sp/>works<sp/>on<sp/>int<sp/>rather<sp/>than<sp/>INT32.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>We<sp/>assume<sp/>that<sp/>int<sp/>right<sp/>shift<sp/>is<sp/>unsigned<sp/>if<sp/>INT32<sp/>right<sp/>shift<sp/>is,</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>which<sp/>should<sp/>be<sp/>safe.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RIGHT_SHIFT_IS_UNSIGNED</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ISHIFT_TEMPS<sp/><sp/><sp/><sp/>int<sp/>ishift_temp;</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IRIGHT_SHIFT(x,shft)<sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((ishift_temp<sp/>=<sp/>(x))<sp/>&lt;<sp/>0<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ishift_temp<sp/>&gt;&gt;<sp/>(shft))<sp/>|<sp/>((~0)<sp/>&lt;&lt;<sp/>(16-(shft)))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ishift_temp<sp/>&gt;&gt;<sp/>(shft)))</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ISHIFT_TEMPS</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IRIGHT_SHIFT(x,shft)<sp/><sp/><sp/><sp/>((x)<sp/>&gt;&gt;<sp/>(shft))</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_DC_first<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_AC_first<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_DC_refine<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="95"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>encode_mcu_AC_refine<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish_pass_phuff<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo));</highlight></codeline>
<codeline lineno="98"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish_pass_gather_phuff<sp/>JPP((<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>for<sp/>a<sp/>Huffman-compressed<sp/>scan<sp/>using<sp/>progressive<sp/>JPEG.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">start_pass_phuff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>gather_statistics)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_DC_band;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>tbl;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>entropy-&gt;cinfo<sp/>=<sp/>cinfo;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>entropy-&gt;gather_statistics<sp/>=<sp/>gather_statistics;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>is_DC_band<sp/>=<sp/>(cinfo-&gt;Ss<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>assume<sp/>jcmaster.c<sp/>already<sp/>validated<sp/>the<sp/>scan<sp/>parameters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>execution<sp/>routines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_DC_first;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_AC_first;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_DC_refine;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.encode_mcu<sp/>=<sp/>encode_mcu_AC_refine;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>refinement<sp/>needs<sp/>a<sp/>correction<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;bit_buffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;bit_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_CORR_BITS<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gather_statistics)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.finish_pass<sp/>=<sp/>finish_pass_gather_phuff;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;pub.finish_pass<sp/>=<sp/>finish_pass_phuff;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>DC<sp/>coefficients<sp/>may<sp/>be<sp/>interleaved,<sp/>so<sp/>cinfo-&gt;comps_in_scan<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>for<sp/>AC<sp/>coefficients.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>requested<sp/>tables<sp/>are<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(In<sp/>gather<sp/>mode,<sp/>tables<sp/>need<sp/>not<sp/>be<sp/>allocated<sp/>yet)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>!=<sp/>0)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DC<sp/>refinement<sp/>needs<sp/>no<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbl<sp/>&lt;<sp/>0<sp/>||<sp/>tbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(cinfo-&gt;dc_huff_tbl_ptrs[tbl]<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>!gather_statistics))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,JERR_NO_HUFF_TABLE,<sp/>tbl);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;ac_tbl_no<sp/>=<sp/>tbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbl<sp/>&lt;<sp/>0<sp/>||<sp/>tbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cinfo-&gt;ac_huff_tbl_ptrs[tbl]<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>!gather_statistics))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,JERR_NO_HUFF_TABLE,<sp/>tbl);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gather_statistics)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>and<sp/>zero<sp/>the<sp/>statistics<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>jpeg_gen_optimal_table<sp/>expects<sp/>257<sp/>entries<sp/>in<sp/>each<sp/>table!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;count_ptrs[tbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;count_ptrs[tbl]<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MEMZERO(entropy-&gt;count_ptrs[tbl],<sp/>257<sp/>*<sp/>SIZEOF(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>derived<sp/>values<sp/>for<sp/>Huffman<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>may<sp/>do<sp/>this<sp/>more<sp/>than<sp/>once<sp/>for<sp/>a<sp/>table,<sp/>but<sp/>it&apos;s<sp/>not<sp/>expensive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_make_c_derived_tbl(cinfo,<sp/>cinfo-&gt;dc_huff_tbl_ptrs[tbl],</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;derived_tbls[tbl]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_make_c_derived_tbl(cinfo,<sp/>cinfo-&gt;ac_huff_tbl_ptrs[tbl],</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;derived_tbls[tbl]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>AC<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>entropy-&gt;EOBRUN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>entropy-&gt;BE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>bit<sp/>buffer<sp/>to<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>entropy-&gt;put_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>entropy-&gt;put_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>restart<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>entropy-&gt;next_restart_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outputting<sp/>bytes<sp/>to<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>NB:<sp/>these<sp/>must<sp/>be<sp/>called<sp/>only<sp/>when<sp/>actually<sp/>outputting,</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>that<sp/>is,<sp/>entropy-&gt;gather_statistics<sp/>==<sp/>FALSE.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emit<sp/>a<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>emit_byte(entropy,val)<sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>*(entropy)-&gt;next_output_byte++<sp/>=<sp/>(JOCTET)<sp/>(val);<sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(--(entropy)-&gt;free_in_buffer<sp/>==<sp/>0)<sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_buffer(entropy);<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">dump_buffer<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Empty<sp/>the<sp/>output<sp/>buffer;<sp/>we<sp/>do<sp/>not<sp/>support<sp/>suspension<sp/>in<sp/>this<sp/>module.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__destination__mgr" kindref="compound">jpeg_destination_mgr</ref><sp/>*<sp/>dest<sp/>=<sp/>entropy-&gt;cinfo-&gt;dest;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(*dest-&gt;empty_output_buffer)<sp/>(entropy-&gt;cinfo))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(entropy-&gt;cinfo,<sp/>JERR_CANT_SUSPEND);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>After<sp/>a<sp/>successful<sp/>buffer<sp/>dump,<sp/>must<sp/>reset<sp/>buffer<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outputting<sp/>bits<sp/>to<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Only<sp/>the<sp/>right<sp/>24<sp/>bits<sp/>of<sp/>put_buffer<sp/>are<sp/>used;<sp/>the<sp/>valid<sp/>bits<sp/>are</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>left-justified<sp/>in<sp/>this<sp/>part.<sp/><sp/>At<sp/>most<sp/>16<sp/>bits<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>emit_bits</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>in<sp/>one<sp/>call,<sp/>and<sp/>we<sp/>never<sp/>retain<sp/>more<sp/>than<sp/>7<sp/>bits<sp/>in<sp/>put_buffer</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>between<sp/>calls,<sp/>so<sp/>24<sp/>bits<sp/>are<sp/>sufficient.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">INLINE</highlight></codeline>
<codeline lineno="234"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">emit_bits<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emit<sp/>some<sp/>bits,<sp/>unless<sp/>we<sp/>are<sp/>in<sp/>gather<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>routine<sp/>is<sp/>heavily<sp/>used,<sp/>so<sp/>it&apos;s<sp/>worth<sp/>coding<sp/>tightly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>INT32<sp/>put_buffer<sp/>=<sp/>(INT32)<sp/>code;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>put_bits<sp/>=<sp/>entropy-&gt;put_bits;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>size<sp/>is<sp/>0,<sp/>caller<sp/>used<sp/>an<sp/>invalid<sp/>Huffman<sp/>table<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(entropy-&gt;cinfo,<sp/>JERR_HUFF_MISSING_CODE);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;gather_statistics)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing<sp/>if<sp/>we&apos;re<sp/>only<sp/>getting<sp/>stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>put_buffer<sp/>&amp;=<sp/>(((INT32)<sp/>1)&lt;&lt;size)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>off<sp/>any<sp/>extra<sp/>bits<sp/>in<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>put_bits<sp/>+=<sp/>size;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>put_buffer<sp/>&lt;&lt;=<sp/>24<sp/>-<sp/>put_bits;<sp/></highlight><highlight class="comment">/*<sp/>align<sp/>incoming<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>put_buffer<sp/>|=<sp/>entropy-&gt;put_buffer;<sp/></highlight><highlight class="comment">/*<sp/>and<sp/>merge<sp/>with<sp/>old<sp/>buffer<sp/>contents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(put_bits<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>(int)<sp/>((put_buffer<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_byte(entropy,<sp/>c);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xFF)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>to<sp/>stuff<sp/>a<sp/>zero<sp/>byte?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_byte(entropy,<sp/>0);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>put_buffer<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>put_bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>entropy-&gt;put_buffer<sp/>=<sp/>put_buffer;<sp/></highlight><highlight class="comment">/*<sp/>update<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>entropy-&gt;put_bits<sp/>=<sp/>put_bits;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">flush_bits<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>emit_bits(entropy,<sp/>0x7F,<sp/>7);<sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>any<sp/>partial<sp/>byte<sp/>with<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>entropy-&gt;put_buffer<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>reset<sp/>bit-buffer<sp/>to<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>entropy-&gt;put_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>Emit<sp/>(or<sp/>just<sp/>count)<sp/>a<sp/>Huffman<sp/>symbol.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">INLINE</highlight></codeline>
<codeline lineno="287"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">emit_symbol<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tbl_no,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symbol)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;gather_statistics)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;count_ptrs[tbl_no][symbol]++;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structc__derived__tbl" kindref="compound">c_derived_tbl</ref><sp/>*<sp/>tbl<sp/>=<sp/>entropy-&gt;derived_tbls[tbl_no];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>tbl-&gt;ehufco[symbol],<sp/>tbl-&gt;ehufsi[symbol]);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>Emit<sp/>bits<sp/>from<sp/>a<sp/>correction<sp/>bit<sp/>buffer.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">emit_buffered_bits<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>bufstart,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;gather_statistics)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>real<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nbits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(*bufstart),<sp/>1);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>bufstart++;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits--;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>Emit<sp/>any<sp/>pending<sp/>EOBRUN<sp/>symbol.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">emit_eobrun<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp,<sp/>nbits;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;EOBRUN<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>there<sp/>is<sp/>any<sp/>pending<sp/>EOBRUN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>entropy-&gt;EOBRUN;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((temp<sp/>&gt;&gt;=<sp/>1))</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>entropy-&gt;ac_tbl_no,<sp/>nbits<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>entropy-&gt;EOBRUN,<sp/>nbits);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;EOBRUN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>any<sp/>buffered<sp/>correction<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_buffered_bits(entropy,<sp/>entropy-&gt;bit_buffer,<sp/>entropy-&gt;BE);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;BE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>Emit<sp/>a<sp/>restart<sp/>marker<sp/>&amp;<sp/>resynchronize<sp/>predictions.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">emit_restart<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restart_num)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>entropy-&gt;gather_statistics)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>flush_bits(entropy);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_byte(entropy,<sp/>0xFF);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_byte(entropy,<sp/>JPEG_RST0<sp/>+<sp/>restart_num);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;cinfo-&gt;Ss<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>entropy-&gt;cinfo-&gt;comps_in_scan;<sp/>ci++)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>all<sp/>AC-related<sp/>fields<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;EOBRUN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;BE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>MCU<sp/>encoding<sp/>for<sp/>DC<sp/>initial<sp/>scan<sp/>(either<sp/>spectral<sp/>selection,</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>or<sp/>first<sp/>pass<sp/>of<sp/>successive<sp/>approximation).</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">encode_mcu_DC_first<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp,<sp/>temp2;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn,<sp/>ci;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>ISHIFT_TEMPS</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>restart<sp/>marker<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_restart(entropy,<sp/>entropy-&gt;next_restart_num);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>MCU<sp/>data<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[blkn];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>cinfo-&gt;MCU_membership[blkn];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>DC<sp/>value<sp/>after<sp/>the<sp/>required<sp/>point<sp/>transform<sp/>by<sp/>Al.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>simply<sp/>an<sp/>arithmetic<sp/>right<sp/>shift.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>IRIGHT_SHIFT((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((*block)[0]),<sp/>Al);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DC<sp/>differences<sp/>are<sp/>figured<sp/>on<sp/>the<sp/>point-transformed<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>temp2<sp/>-<sp/>entropy-&gt;last_dc_val[ci];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;last_dc_val[ci]<sp/>=<sp/>temp2;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>DC<sp/>coefficient<sp/>difference<sp/>per<sp/>section<sp/>G.1.2.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>is<sp/>abs<sp/>value<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>a<sp/>negative<sp/>input,<sp/>want<sp/>temp2<sp/>=<sp/>bitwise<sp/>complement<sp/>of<sp/>abs(input)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>code<sp/>assumes<sp/>we<sp/>are<sp/>on<sp/>a<sp/>two&apos;s<sp/>complement<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp2--;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count/emit<sp/>the<sp/>Huffman-coded<sp/>symbol<sp/>for<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>compptr-&gt;dc_tbl_no,<sp/>nbits);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>that<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>the<sp/>value,<sp/>if<sp/>positive,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>or<sp/>the<sp/>complement<sp/>of<sp/>its<sp/>magnitude,<sp/>if<sp/>negative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>emit_bits<sp/>rejects<sp/>calls<sp/>with<sp/>size<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp2,<sp/>nbits);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>entropy-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>entropy-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart-interval<sp/>state<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num++;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>MCU<sp/>encoding<sp/>for<sp/>AC<sp/>initial<sp/>scan<sp/>(either<sp/>spectral<sp/>selection,</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>or<sp/>first<sp/>pass<sp/>of<sp/>successive<sp/>approximation).</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">encode_mcu_AC_first<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp,<sp/>temp2;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>k;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Se<sp/>=<sp/>cinfo-&gt;Se;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>restart<sp/>marker<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_restart(entropy,<sp/>entropy-&gt;next_restart_num);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>MCU<sp/>data<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>block<sp/>=<sp/>MCU_data[0];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>AC<sp/>coefficients<sp/>per<sp/>section<sp/>G.1.2.2,<sp/>fig.<sp/>G.3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>run<sp/>length<sp/>of<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>cinfo-&gt;Ss;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((temp<sp/>=<sp/>(*block)[jpeg_natural_order[k]])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>must<sp/>apply<sp/>the<sp/>point<sp/>transform<sp/>by<sp/>Al.<sp/><sp/>For<sp/>AC<sp/>coefficients<sp/>this</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>an<sp/>integer<sp/>division<sp/>with<sp/>rounding<sp/>towards<sp/>0.<sp/><sp/>To<sp/>do<sp/>this<sp/>portably</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>C,<sp/>we<sp/>shift<sp/>after<sp/>obtaining<sp/>the<sp/>absolute<sp/>value;<sp/>so<sp/>the<sp/>code<sp/>is</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>interwoven<sp/>with<sp/>finding<sp/>the<sp/>abs<sp/>value<sp/>(temp)<sp/>and<sp/>output<sp/>bits<sp/>(temp2).</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>is<sp/>abs<sp/>value<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>Al;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply<sp/>the<sp/>point<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>a<sp/>negative<sp/>coef,<sp/>want<sp/>temp2<sp/>=<sp/>bitwise<sp/>complement<sp/>of<sp/>abs(coef)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>~temp;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>Al;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply<sp/>the<sp/>point<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Watch<sp/>out<sp/>for<sp/>case<sp/>that<sp/>nonzero<sp/>coef<sp/>is<sp/>zero<sp/>after<sp/>point<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>any<sp/>pending<sp/>EOBRUN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;EOBRUN<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>run<sp/>length<sp/>&gt;<sp/>15,<sp/>must<sp/>emit<sp/>special<sp/>run-length-16<sp/>codes<sp/>(0xF0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>entropy-&gt;ac_tbl_no,<sp/>0xF0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>for<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>nbits<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>must<sp/>be<sp/>at<sp/>least<sp/>one<sp/>1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((temp<sp/>&gt;&gt;=<sp/>1))</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbits++;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count/emit<sp/>Huffman<sp/>symbol<sp/>for<sp/>run<sp/>length<sp/>/<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>entropy-&gt;ac_tbl_no,<sp/>(r<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>nbits);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>that<sp/>number<sp/>of<sp/>bits<sp/>of<sp/>the<sp/>value,<sp/>if<sp/>positive,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>or<sp/>the<sp/>complement<sp/>of<sp/>its<sp/>magnitude,<sp/>if<sp/>negative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp2,<sp/>nbits);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>zero<sp/>run<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>are<sp/>trailing<sp/>zeroes,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;EOBRUN++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>an<sp/>EOB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;EOBRUN<sp/>==<sp/>0x7FFF)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_eobrun(entropy);<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>it<sp/>out<sp/>to<sp/>avoid<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>entropy-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>entropy-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart-interval<sp/>state<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num++;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>MCU<sp/>encoding<sp/>for<sp/>DC<sp/>successive<sp/>approximation<sp/>refinement<sp/>scan.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>Note:<sp/>we<sp/>assume<sp/>such<sp/>scans<sp/>can<sp/>be<sp/>multi-component,<sp/>although<sp/>the<sp/>spec</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>is<sp/>not<sp/>very<sp/>clear<sp/>on<sp/>the<sp/>point.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">encode_mcu_DC_refine<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>restart<sp/>marker<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_restart(entropy,<sp/>entropy-&gt;next_restart_num);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>MCU<sp/>data<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[blkn];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>simply<sp/>emit<sp/>the<sp/>Al&apos;th<sp/>bit<sp/>of<sp/>the<sp/>DC<sp/>coefficient<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(*block)[0];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(temp<sp/>&gt;&gt;<sp/>Al),<sp/>1);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>entropy-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>entropy-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart-interval<sp/>state<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num++;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>MCU<sp/>encoding<sp/>for<sp/>AC<sp/>successive<sp/>approximation<sp/>refinement<sp/>scan.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">encode_mcu_AC_refine<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>k;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EOB;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*BR_buffer;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BR;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Se<sp/>=<sp/>cinfo-&gt;Se;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>absvalues[DCTSIZE2];</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>restart<sp/>marker<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_restart(entropy,<sp/>entropy-&gt;next_restart_num);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>MCU<sp/>data<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>block<sp/>=<sp/>MCU_data[0];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>convenient<sp/>to<sp/>make<sp/>a<sp/>pre-pass<sp/>to<sp/>determine<sp/>the<sp/>transformed</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/>*<sp/>coefficients&apos;<sp/>absolute<sp/>values<sp/>and<sp/>the<sp/>EOB<sp/>position.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>EOB<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>cinfo-&gt;Ss;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(*block)[jpeg_natural_order[k]];</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>must<sp/>apply<sp/>the<sp/>point<sp/>transform<sp/>by<sp/>Al.<sp/><sp/>For<sp/>AC<sp/>coefficients<sp/>this</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>an<sp/>integer<sp/>division<sp/>with<sp/>rounding<sp/>towards<sp/>0.<sp/><sp/>To<sp/>do<sp/>this<sp/>portably</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>C,<sp/>we<sp/>shift<sp/>after<sp/>obtaining<sp/>the<sp/>absolute<sp/>value.</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>-temp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>is<sp/>abs<sp/>value<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>&gt;&gt;=<sp/>Al;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply<sp/>the<sp/>point<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>absvalues[k]<sp/>=<sp/>temp;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>abs<sp/>value<sp/>for<sp/>main<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EOB<sp/>=<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOB<sp/>=<sp/>index<sp/>of<sp/>last<sp/>newly-nonzero<sp/>coef<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>the<sp/>AC<sp/>coefficients<sp/>per<sp/>section<sp/>G.1.2.3,<sp/>fig.<sp/>G.7<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>run<sp/>length<sp/>of<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>BR<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>BR<sp/>=<sp/>count<sp/>of<sp/>buffered<sp/>bits<sp/>added<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>BR_buffer<sp/>=<sp/>entropy-&gt;bit_buffer<sp/>+<sp/>entropy-&gt;BE;<sp/></highlight><highlight class="comment">/*<sp/>Append<sp/>bits<sp/>to<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>cinfo-&gt;Ss;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((temp<sp/>=<sp/>absvalues[k])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>any<sp/>required<sp/>ZRLs,<sp/>but<sp/>not<sp/>if<sp/>they<sp/>can<sp/>be<sp/>folded<sp/>into<sp/>EOB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>15<sp/>&amp;&amp;<sp/>k<sp/>&lt;=<sp/>EOB)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>emit<sp/>any<sp/>pending<sp/>EOBRUN<sp/>and<sp/>the<sp/>BE<sp/>correction<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>ZRL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>entropy-&gt;ac_tbl_no,<sp/>0xF0);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>buffered<sp/>correction<sp/>bits<sp/>that<sp/>must<sp/>be<sp/>associated<sp/>with<sp/>ZRL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_buffered_bits(entropy,<sp/>BR_buffer,<sp/>BR);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BR_buffer<sp/>=<sp/>entropy-&gt;bit_buffer;<sp/></highlight><highlight class="comment">/*<sp/>BE<sp/>bits<sp/>are<sp/>gone<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>coef<sp/>was<sp/>previously<sp/>nonzero,<sp/>it<sp/>only<sp/>needs<sp/>a<sp/>correction<sp/>bit.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>NOTE:<sp/>a<sp/>straight<sp/>translation<sp/>of<sp/>the<sp/>spec&apos;s<sp/>figure<sp/>G.7<sp/>would<sp/>suggest</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>we<sp/>also<sp/>need<sp/>to<sp/>test<sp/>r<sp/>&gt;<sp/>15.<sp/><sp/>But<sp/>if<sp/>r<sp/>&gt;<sp/>15,<sp/>we<sp/>can<sp/>only<sp/>get<sp/>here</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>k<sp/>&gt;<sp/>EOB,<sp/>which<sp/>implies<sp/>that<sp/>this<sp/>coefficient<sp/>is<sp/>not<sp/>1.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>correction<sp/>bit<sp/>is<sp/>the<sp/>next<sp/>bit<sp/>of<sp/>the<sp/>absolute<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BR_buffer[BR++]<sp/>=<sp/>(char)<sp/>(temp<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>any<sp/>pending<sp/>EOBRUN<sp/>and<sp/>the<sp/>BE<sp/>correction<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count/emit<sp/>Huffman<sp/>symbol<sp/>for<sp/>run<sp/>length<sp/>/<sp/>number<sp/>of<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_symbol(entropy,<sp/>entropy-&gt;ac_tbl_no,<sp/>(r<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>output<sp/>bit<sp/>for<sp/>newly-nonzero<sp/>coef<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>((*block)[jpeg_natural_order[k]]<sp/>&lt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_bits(entropy,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp,<sp/>1);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Emit<sp/>buffered<sp/>correction<sp/>bits<sp/>that<sp/>must<sp/>be<sp/>associated<sp/>with<sp/>this<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>emit_buffered_bits(entropy,<sp/>BR_buffer,<sp/>BR);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>BR_buffer<sp/>=<sp/>entropy-&gt;bit_buffer;<sp/></highlight><highlight class="comment">/*<sp/>BE<sp/>bits<sp/>are<sp/>gone<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>BR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>zero<sp/>run<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>0<sp/>||<sp/>BR<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>are<sp/>trailing<sp/>zeroes,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;EOBRUN++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>an<sp/>EOB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;BE<sp/>+=<sp/>BR;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>concat<sp/>my<sp/>correction<sp/>bits<sp/>to<sp/>older<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>force<sp/>out<sp/>the<sp/>EOB<sp/>if<sp/>we<sp/>risk<sp/>either:</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>1.<sp/>overflow<sp/>of<sp/>the<sp/>EOB<sp/>counter;</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>2.<sp/>overflow<sp/>of<sp/>the<sp/>correction<sp/>bit<sp/>buffer<sp/>during<sp/>the<sp/>next<sp/>MCU.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;EOBRUN<sp/>==<sp/>0x7FFF<sp/>||<sp/>entropy-&gt;BE<sp/>&gt;<sp/>(MAX_CORR_BITS-DCTSIZE2+1))</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>entropy-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>entropy-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>restart-interval<sp/>state<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num++;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;next_restart_num<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>Finish<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>Huffman-compressed<sp/>progressive<sp/>scan.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">finish_pass_phuff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>entropy-&gt;next_output_byte<sp/>=<sp/>cinfo-&gt;dest-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>entropy-&gt;free_in_buffer<sp/>=<sp/>cinfo-&gt;dest-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>out<sp/>any<sp/>buffered<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>flush_bits(entropy);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;next_output_byte<sp/>=<sp/>entropy-&gt;next_output_byte;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>cinfo-&gt;dest-&gt;free_in_buffer<sp/>=<sp/>entropy-&gt;free_in_buffer;</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>Finish<sp/>up<sp/>a<sp/>statistics-gathering<sp/>pass<sp/>and<sp/>create<sp/>the<sp/>new<sp/>Huffman<sp/>tables.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">finish_pass_gather_phuff<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_DC_band;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>tbl;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref><sp/>**htblptr;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>did[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>out<sp/>buffered<sp/>data<sp/>(all<sp/>we<sp/>care<sp/>about<sp/>is<sp/>counting<sp/>the<sp/>EOB<sp/>symbol)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>emit_eobrun(entropy);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>is_DC_band<sp/>=<sp/>(cinfo-&gt;Ss<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>important<sp/>not<sp/>to<sp/>apply<sp/>jpeg_gen_optimal_table<sp/>more<sp/>than<sp/>once</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/>*<sp/>per<sp/>table,<sp/>because<sp/>it<sp/>clobbers<sp/>the<sp/>input<sp/>frequency<sp/>counts!</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>MEMZERO(did,<sp/>SIZEOF(did));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>!=<sp/>0)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DC<sp/>refinement<sp/>needs<sp/>no<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>did[tbl])<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htblptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;dc_huff_tbl_ptrs[tbl];</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htblptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;ac_huff_tbl_ptrs[tbl];</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*htblptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*htblptr<sp/>=<sp/>jpeg_alloc_huff_table((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_gen_optimal_table(cinfo,<sp/>*htblptr,<sp/>entropy-&gt;count_ptrs[tbl]);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>did[tbl]<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>Module<sp/>initialization<sp/>routine<sp/>for<sp/>progressive<sp/>Huffman<sp/>entropy<sp/>encoding.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">jinit_phuff_encoder<sp/>(<ref refid="structjpeg__compress__struct" kindref="compound">j_compress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_encoder</ref>));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>cinfo-&gt;entropy<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__encoder" kindref="compound">jpeg_entropy_encoder</ref><sp/>*)<sp/>entropy;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>entropy-&gt;pub.start_pass<sp/>=<sp/>start_pass_phuff;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>tables<sp/>unallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_HUFF_TBLS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;derived_tbls[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;count_ptrs[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>entropy-&gt;bit_buffer<sp/>=<sp/>NULL;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>needed<sp/>only<sp/>in<sp/>AC<sp/>refinement<sp/>scan<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>C_PROGRESSIVE_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jcphuff.c"/>
  </compounddef>
</doxygen>
