<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jdhuff_8c" kind="file">
    <compoundname>jdhuff.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jdhuff_8h" local="yes">jdhuff.h</includes>
    <innerclass refid="structsavable__state" prot="public">savable_state</innerclass>
    <innerclass refid="structhuff__entropy__decoder" prot="public">huff_entropy_decoder</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jdhuff_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="17" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jdhuff_8c_1a0aa59fa38553f2f947f0880637cf0865" prot="public" static="no">
        <name>ASSIGN_STATE</name>
        <param><defname>dest</defname></param>
        <param><defname>src</defname></param>
        <initializer>((dest) = (src))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="40" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jdhuff_8c_1a0c96e06b8e2980e80a2212687fcb56fe" prot="public" static="no">
        <name>MIN_GET_BITS</name>
        <initializer>(BIT_BUF_SIZE-7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="229" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jdhuff_8c_1a306084d99ba067870212e3da41844818" prot="public" static="no">
        <name>HUFF_EXTEND</name>
        <param><defname>x</defname></param>
        <param><defname>s</defname></param>
        <initializer>((x) &lt; extend_test[s] ? (x) + extend_offset[s] : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="372" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="372" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jdhuff_8c_1a1ecffaf1039ec45c90ce69b667fe4b58" prot="public" static="no">
        <type><ref refid="structhuff__entropy__decoder" kindref="compound">huff_entropy_decoder</ref> *</type>
        <definition>typedef huff_entropy_decoder* huff_entropy_ptr</definition>
        <argsstring></argsstring>
        <name>huff_entropy_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="jdhuff_8c_1af97fa6395341984a6aef8f343ba0d35d" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int extend_test[16]</definition>
        <argsstring>[16]</argsstring>
        <name>extend_test</name>
        <initializer>=   
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="374" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="jdhuff_8c_1afddb32ea3ef51054288870059521659d" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int extend_offset[16]</definition>
        <argsstring>[16]</argsstring>
        <name>extend_offset</name>
        <initializer>= 
  { 0, ((-1)&lt;&lt;1) + 1, ((-1)&lt;&lt;2) + 1, ((-1)&lt;&lt;3) + 1, ((-1)&lt;&lt;4) + 1,
    ((-1)&lt;&lt;5) + 1, ((-1)&lt;&lt;6) + 1, ((-1)&lt;&lt;7) + 1, ((-1)&lt;&lt;8) + 1,
    ((-1)&lt;&lt;9) + 1, ((-1)&lt;&lt;10) + 1, ((-1)&lt;&lt;11) + 1, ((-1)&lt;&lt;12) + 1,
    ((-1)&lt;&lt;13) + 1, ((-1)&lt;&lt;14) + 1, ((-1)&lt;&lt;15) + 1 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="378" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jdhuff_8c_1aa8b392b0f941c912a727242f71833434" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_pass_huff_decoder</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>start_pass_huff_decoder</name>
        <param>
          <type><ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="77" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1aa6186db9bfadaccb876207de44582709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_make_d_derived_tbl</definition>
        <argsstring>(j_decompress_ptr cinfo, JHUFF_TBL *htbl, d_derived_tbl **pdtbl)</argsstring>
        <name>jpeg_make_d_derived_tbl</name>
        <param>
          <type><ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref> *</type>
          <declname>htbl</declname>
        </param>
        <param>
          <type><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref> **</type>
          <declname>pdtbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="128" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1a999439ab3e0bee8a91575684df3a8218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean jpeg_fill_bit_buffer</definition>
        <argsstring>(bitread_working_state *state, register bit_buf_type get_buffer, register int bits_left, int nbits)</argsstring>
        <name>jpeg_fill_bit_buffer</name>
        <param>
          <type><ref refid="structbitread__working__state" kindref="compound">bitread_working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>register bit_buf_type</type>
          <declname>get_buffer</declname>
        </param>
        <param>
          <type>register int</type>
          <declname>bits_left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="234" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="234" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1a2ace6c7d2b4581639948aa24af9ff91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jpeg_huff_decode</definition>
        <argsstring>(bitread_working_state *state, register bit_buf_type get_buffer, register int bits_left, d_derived_tbl *htbl, int min_bits)</argsstring>
        <name>jpeg_huff_decode</name>
        <param>
          <type><ref refid="structbitread__working__state" kindref="compound">bitread_working_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>register bit_buf_type</type>
          <declname>get_buffer</declname>
        </param>
        <param>
          <type>register int</type>
          <declname>bits_left</declname>
        </param>
        <param>
          <type><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref> *</type>
          <declname>htbl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="322" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="322" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1ab42475bdba09052273eac510100a8136" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean process_restart</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>process_restart</name>
        <param>
          <type><ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="393" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="393" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1a99359caf17ca905b7349a3f77ab118e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean decode_mcu</definition>
        <argsstring>(j_decompress_ptr cinfo, JBLOCKROW *MCU_data)</argsstring>
        <name>decode_mcu</name>
        <param>
          <type><ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>JBLOCKROW *</type>
          <declname>MCU_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="437" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="437" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="jdhuff_8c_1ac734e96cfa7305e797862f3777dc19d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jinit_huff_decoder</definition>
        <argsstring>(j_decompress_ptr cinfo)</argsstring>
        <name>jinit_huff_decoder</name>
        <param>
          <type><ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" line="558" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c" bodystart="558" bodyend="574"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jdhuff.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1991-1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>Huffman<sp/>entropy<sp/>decoding<sp/>routines.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Much<sp/>of<sp/>the<sp/>complexity<sp/>here<sp/>has<sp/>to<sp/>do<sp/>with<sp/>supporting<sp/>input<sp/>suspension.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>data<sp/>source<sp/>module<sp/>demands<sp/>suspension,<sp/>we<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to<sp/>back</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>up<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>MCU.<sp/><sp/>To<sp/>do<sp/>this,<sp/>we<sp/>copy<sp/>state<sp/>variables</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>into<sp/>local<sp/>working<sp/>storage,<sp/>and<sp/>update<sp/>them<sp/>back<sp/>to<sp/>the<sp/>permanent</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>storage<sp/>only<sp/>upon<sp/>successful<sp/>completion<sp/>of<sp/>an<sp/>MCU.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jdhuff.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declarations<sp/>shared<sp/>with<sp/>jdphuff.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Expanded<sp/>entropy<sp/>decoder<sp/>object<sp/>for<sp/>Huffman<sp/>decoding.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>The<sp/>savable_state<sp/>subrecord<sp/>contains<sp/>fields<sp/>that<sp/>change<sp/>within<sp/>an<sp/>MCU,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>but<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>permanently<sp/>until<sp/>we<sp/>complete<sp/>the<sp/>MCU.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val[MAX_COMPS_IN_SCAN];<sp/></highlight><highlight class="comment">/*<sp/>last<sp/>DC<sp/>coef<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}<sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>macro<sp/>is<sp/>to<sp/>work<sp/>around<sp/>compilers<sp/>with<sp/>missing<sp/>or<sp/>broken</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>structure<sp/>assignment.<sp/><sp/>You&apos;ll<sp/>need<sp/>to<sp/>fix<sp/>this<sp/>code<sp/>if<sp/>you<sp/>have</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>such<sp/>a<sp/>compiler<sp/>and<sp/>you<sp/>change<sp/>MAX_COMPS_IN_SCAN.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_STRUCT_ASSIGN</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>((dest)<sp/>=<sp/>(src))</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>MAX_COMPS_IN_SCAN<sp/>==<sp/>4</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((dest).last_dc_val[0]<sp/>=<sp/>(src).last_dc_val[0],<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[1]<sp/>=<sp/>(src).last_dc_val[1],<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[2]<sp/>=<sp/>(src).last_dc_val[2],<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[3]<sp/>=<sp/>(src).last_dc_val[3])</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structhuff__entropy__decoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__decoder" kindref="compound">jpeg_entropy_decoder</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>loaded<sp/>into<sp/>local<sp/>variables<sp/>at<sp/>start<sp/>of<sp/>each<sp/>MCU.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>case<sp/>of<sp/>suspension,<sp/>we<sp/>exit<sp/>WITHOUT<sp/>updating<sp/>them.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="structbitread__perm__state" kindref="compound">bitread_perm_state</ref><sp/>bitstate;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>buffer<sp/>at<sp/>start<sp/>of<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>saved;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Other<sp/>state<sp/>at<sp/>start<sp/>of<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>NOT<sp/>loaded<sp/>into<sp/>local<sp/>working<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restarts_to_go;<sp/><sp/></highlight><highlight class="comment">/*<sp/>MCUs<sp/>left<sp/>in<sp/>this<sp/>restart<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointers<sp/>to<sp/>derived<sp/>tables<sp/>(these<sp/>workspaces<sp/>have<sp/>image<sp/>lifespan)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>dc_derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>ac_derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><ref refid="structhuff__entropy__decoder" kindref="compound">huff_entropy_decoder</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structhuff__entropy__decoder" kindref="compound">huff_entropy_decoder</ref><sp/>*<sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>for<sp/>a<sp/>Huffman-compressed<sp/>scan.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">start_pass_huff_decoder<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>dctbl,<sp/>actbl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>scan<sp/>parameters<sp/>Ss,<sp/>Se,<sp/>Ah/Al<sp/>are<sp/>OK<sp/>for<sp/>sequential<sp/>JPEG.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>ought<sp/>to<sp/>be<sp/>an<sp/>error<sp/>condition,<sp/>but<sp/>we<sp/>make<sp/>it<sp/>a<sp/>warning<sp/>because</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>*<sp/>there<sp/>are<sp/>some<sp/>baseline<sp/>files<sp/>out<sp/>there<sp/>with<sp/>all<sp/>zeroes<sp/>in<sp/>these<sp/>bytes.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;Ss<sp/>!=<sp/>0<sp/>||<sp/>cinfo-&gt;Se<sp/>!=<sp/>DCTSIZE2-1<sp/>||</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cinfo-&gt;Ah<sp/>!=<sp/>0<sp/>||<sp/>cinfo-&gt;Al<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>WARNMS(cinfo,<sp/>JWRN_NOT_SEQUENTIAL);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>dctbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>actbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>requested<sp/>tables<sp/>are<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dctbl<sp/>&lt;<sp/>0<sp/>||<sp/>dctbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo-&gt;dc_huff_tbl_ptrs[dctbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>dctbl);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actbl<sp/>&lt;<sp/>0<sp/>||<sp/>actbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>cinfo-&gt;ac_huff_tbl_ptrs[actbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>actbl);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>derived<sp/>values<sp/>for<sp/>Huffman<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>may<sp/>do<sp/>this<sp/>more<sp/>than<sp/>once<sp/>for<sp/>a<sp/>table,<sp/>but<sp/>it&apos;s<sp/>not<sp/>expensive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_make_d_derived_tbl(cinfo,<sp/>cinfo-&gt;dc_huff_tbl_ptrs[dctbl],</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;dc_derived_tbls[dctbl]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_make_d_derived_tbl(cinfo,<sp/>cinfo-&gt;ac_huff_tbl_ptrs[actbl],</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;ac_derived_tbls[actbl]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>bitread<sp/>state<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.bits_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.get_buffer<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>unnecessary,<sp/>but<sp/>keeps<sp/>Purify<sp/>quiet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.printed_eod<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>restart<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>derived<sp/>values<sp/>for<sp/>a<sp/>Huffman<sp/>table.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Note<sp/>this<sp/>is<sp/>also<sp/>used<sp/>by<sp/>jdphuff.c.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">jpeg_make_d_derived_tbl<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/><ref refid="struct_j_h_u_f_f___t_b_l" kindref="compound">JHUFF_TBL</ref><sp/>*<sp/>htbl,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>**<sp/>pdtbl)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*dtbl;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/>i,<sp/>l,<sp/>si;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lookbits,<sp/>ctr;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>huffsize[257];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huffcode[257];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>workspace<sp/>if<sp/>we<sp/>haven&apos;t<sp/>already<sp/>done<sp/>so.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pdtbl<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>*pdtbl<sp/>=<sp/>(<ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref>));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>dtbl<sp/>=<sp/>*pdtbl;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>dtbl-&gt;pub<sp/>=<sp/>htbl;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>back<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>C.1:<sp/>make<sp/>table<sp/>of<sp/>Huffman<sp/>code<sp/>length<sp/>for<sp/>each<sp/>symbol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>in<sp/>code-length<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>1;<sp/>l<sp/>&lt;=<sp/>16;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(int)<sp/>htbl-&gt;bits[l];<sp/>i++)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>huffsize[p++]<sp/>=<sp/>(char)<sp/>l;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>huffsize[p]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>C.2:<sp/>generate<sp/>the<sp/>codes<sp/>themselves<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>in<sp/>code-length<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>si<sp/>=<sp/>huffsize[0];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(huffsize[p])<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>huffsize[p])<sp/>==<sp/>si)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>huffcode[p++]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code++;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>si++;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>F.15:<sp/>generate<sp/>decoding<sp/>tables<sp/>for<sp/>bit-sequential<sp/>decoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>1;<sp/>l<sp/>&lt;=<sp/>16;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htbl-&gt;bits[l])<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dtbl-&gt;valptr[l]<sp/>=<sp/>p;<sp/></highlight><highlight class="comment">/*<sp/>huffval[]<sp/>index<sp/>of<sp/>1st<sp/>symbol<sp/>of<sp/>code<sp/>length<sp/>l<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dtbl-&gt;mincode[l]<sp/>=<sp/>huffcode[p];<sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>code<sp/>of<sp/>length<sp/>l<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>htbl-&gt;bits[l];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dtbl-&gt;maxcode[l]<sp/>=<sp/>huffcode[p-1];<sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>of<sp/>length<sp/>l<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dtbl-&gt;maxcode[l]<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-1<sp/>if<sp/>no<sp/>codes<sp/>of<sp/>this<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>dtbl-&gt;maxcode[17]<sp/>=<sp/>0xFFFFFL;<sp/></highlight><highlight class="comment">/*<sp/>ensures<sp/>jpeg_huff_decode<sp/>terminates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>lookahead<sp/>tables<sp/>to<sp/>speed<sp/>up<sp/>decoding.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/>*<sp/>First<sp/>we<sp/>set<sp/>all<sp/>the<sp/>table<sp/>entries<sp/>to<sp/>0,<sp/>indicating<sp/>&quot;too<sp/>long&quot;;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>*<sp/>then<sp/>we<sp/>iterate<sp/>through<sp/>the<sp/>Huffman<sp/>codes<sp/>that<sp/>are<sp/>short<sp/>enough<sp/>and</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/>*<sp/>fill<sp/>in<sp/>all<sp/>the<sp/>entries<sp/>that<sp/>correspond<sp/>to<sp/>bit<sp/>sequences<sp/>starting</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/>*<sp/>with<sp/>that<sp/>code.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>MEMZERO(dtbl-&gt;look_nbits,<sp/>SIZEOF(dtbl-&gt;look_nbits));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>1;<sp/>l<sp/>&lt;=<sp/>HUFF_LOOKAHEAD;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(int)<sp/>htbl-&gt;bits[l];<sp/>i++,<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>l<sp/>=<sp/>current<sp/>code&apos;s<sp/>length,<sp/>p<sp/>=<sp/>its<sp/>index<sp/>in<sp/>huffcode[]<sp/>&amp;<sp/>huffval[].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>left-justified<sp/>code<sp/>followed<sp/>by<sp/>all<sp/>possible<sp/>bit<sp/>sequences<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lookbits<sp/>=<sp/>huffcode[p]<sp/>&lt;&lt;<sp/>(HUFF_LOOKAHEAD-l);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ctr<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(HUFF_LOOKAHEAD-l);<sp/>ctr<sp/>&gt;<sp/>0;<sp/>ctr--)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>dtbl-&gt;look_nbits[lookbits]<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>dtbl-&gt;look_sym[lookbits]<sp/>=<sp/>htbl-&gt;huffval[p];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>lookbits++;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>Out-of-line<sp/>code<sp/>for<sp/>bit<sp/>fetching<sp/>(shared<sp/>with<sp/>jdphuff.c).</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>See<sp/>jdhuff.h<sp/>for<sp/>info<sp/>about<sp/>usage.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>Note:<sp/>current<sp/>values<sp/>of<sp/>get_buffer<sp/>and<sp/>bits_left<sp/>are<sp/>passed<sp/>as<sp/>parameters,</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>but<sp/>are<sp/>returned<sp/>in<sp/>the<sp/>corresponding<sp/>fields<sp/>of<sp/>the<sp/>state<sp/>struct.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>On<sp/>most<sp/>machines<sp/>MIN_GET_BITS<sp/>should<sp/>be<sp/>25<sp/>to<sp/>allow<sp/>the<sp/>full<sp/>32-bit<sp/>width</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>of<sp/>get_buffer<sp/>to<sp/>be<sp/>used.<sp/><sp/>(On<sp/>machines<sp/>with<sp/>wider<sp/>words,<sp/>an<sp/>even<sp/>larger</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>buffer<sp/>could<sp/>be<sp/>used.)<sp/><sp/>However,<sp/>on<sp/>some<sp/>machines<sp/>32-bit<sp/>shifts<sp/>are</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>quite<sp/>slow<sp/>and<sp/>take<sp/>time<sp/>proportional<sp/>to<sp/>the<sp/>number<sp/>of<sp/>places<sp/>shifted.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>(This<sp/>is<sp/>true<sp/>with<sp/>most<sp/>PC<sp/>compilers,<sp/>for<sp/>instance.)<sp/><sp/>In<sp/>this<sp/>case<sp/>it<sp/>may</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>be<sp/>a<sp/>win<sp/>to<sp/>set<sp/>MIN_GET_BITS<sp/>to<sp/>the<sp/>minimum<sp/>value<sp/>of<sp/>15.<sp/><sp/>This<sp/>reduces<sp/>the</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>average<sp/>shift<sp/>distance<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>more<sp/>calls<sp/>to<sp/>jpeg_fill_bit_buffer.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SLOW_SHIFT_32</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN_GET_BITS<sp/><sp/>15<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>allowable<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN_GET_BITS<sp/><sp/>(BIT_BUF_SIZE-7)</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">jpeg_fill_bit_buffer<sp/>(<ref refid="structbitread__working__state" kindref="compound">bitread_working_state</ref><sp/>*<sp/>state,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>bit_buf_type<sp/>get_buffer,<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_left,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>the<sp/>bit<sp/>buffer<sp/>to<sp/>a<sp/>depth<sp/>of<sp/>at<sp/>least<sp/>nbits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>heavily<sp/>used<sp/>state<sp/>fields<sp/>into<sp/>locals<sp/>(hopefully<sp/>registers)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JOCTET<sp/>*<sp/>next_input_byte<sp/>=<sp/>state-&gt;next_input_byte;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_in_buffer<sp/>=<sp/>state-&gt;bytes_in_buffer;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attempt<sp/>to<sp/>load<sp/>at<sp/>least<sp/>MIN_GET_BITS<sp/>bits<sp/>into<sp/>get_buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>(It<sp/>is<sp/>assumed<sp/>that<sp/>no<sp/>request<sp/>will<sp/>be<sp/>for<sp/>more<sp/>than<sp/>that<sp/>many<sp/>bits.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits_left<sp/>&lt;<sp/>MIN_GET_BITS)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attempt<sp/>to<sp/>read<sp/>a<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;unread_marker<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>no_more_data;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>advance<sp/>past<sp/>a<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_in_buffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(*state-&gt;cinfo-&gt;src-&gt;fill_input_buffer)<sp/>(state-&gt;cinfo))</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_input_byte<sp/>=<sp/>state-&gt;cinfo-&gt;src-&gt;next_input_byte;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes_in_buffer<sp/>=<sp/>state-&gt;cinfo-&gt;src-&gt;bytes_in_buffer;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_in_buffer--;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GETJOCTET(*next_input_byte++);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>it&apos;s<sp/>0xFF,<sp/>check<sp/>and<sp/>discard<sp/>stuffed<sp/>zero<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_in_buffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(*state-&gt;cinfo-&gt;src-&gt;fill_input_buffer)<sp/>(state-&gt;cinfo))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_input_byte<sp/>=<sp/>state-&gt;cinfo-&gt;src-&gt;next_input_byte;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes_in_buffer<sp/>=<sp/>state-&gt;cinfo-&gt;src-&gt;bytes_in_buffer;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_in_buffer--;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GETJOCTET(*next_input_byte++);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0xFF);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found<sp/>FF/00,<sp/>which<sp/>represents<sp/>an<sp/>FF<sp/>data<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Oops,<sp/>it&apos;s<sp/>actually<sp/>a<sp/>marker<sp/>indicating<sp/>end<sp/>of<sp/>compressed<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Better<sp/>put<sp/>it<sp/>back<sp/>for<sp/>use<sp/>later<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;unread_marker<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_more_data:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>should<sp/>be<sp/>enough<sp/>bits<sp/>still<sp/>left<sp/>in<sp/>the<sp/>data<sp/>segment;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>so,<sp/>just<sp/>break<sp/>out<sp/>of<sp/>the<sp/>outer<sp/>while<sp/>loop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits_left<sp/>&gt;=<sp/>nbits)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Uh-oh.<sp/><sp/>Report<sp/>corrupted<sp/>data<sp/>to<sp/>user<sp/>and<sp/>stuff<sp/>zeroes<sp/>into</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>data<sp/>stream,<sp/>so<sp/>that<sp/>we<sp/>can<sp/>produce<sp/>some<sp/>kind<sp/>of<sp/>image.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>code<sp/>will<sp/>be<sp/>repeated<sp/>for<sp/>each<sp/>byte<sp/>demanded</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>segment.<sp/><sp/>We<sp/>use<sp/>a<sp/>nonvolatile<sp/>flag<sp/>to<sp/>ensure</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>only<sp/>one<sp/>warning<sp/>message<sp/>appears.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>*(state-&gt;printed_eod_ptr))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WARNMS(state-&gt;cinfo,<sp/>JWRN_HIT_MARKER);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(state-&gt;printed_eod_ptr)<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert<sp/>a<sp/>zero<sp/>byte<sp/>into<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OK,<sp/>load<sp/>c<sp/>into<sp/>get_buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>get_buffer<sp/>=<sp/>(get_buffer<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>c;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_left<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unload<sp/>the<sp/>local<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>state-&gt;next_input_byte<sp/>=<sp/>next_input_byte;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>state-&gt;bytes_in_buffer<sp/>=<sp/>bytes_in_buffer;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>state-&gt;get_buffer<sp/>=<sp/>get_buffer;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>state-&gt;bits_left<sp/>=<sp/>bits_left;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>Out-of-line<sp/>code<sp/>for<sp/>Huffman<sp/>code<sp/>decoding.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>See<sp/>jdhuff.h<sp/>for<sp/>info<sp/>about<sp/>usage.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">jpeg_huff_decode<sp/>(<ref refid="structbitread__working__state" kindref="compound">bitread_working_state</ref><sp/>*<sp/>state,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>bit_buf_type<sp/>get_buffer,<sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_left,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>htbl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_bits)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>min_bits;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>INT32<sp/>code;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>HUFF_DECODE<sp/>has<sp/>determined<sp/>that<sp/>the<sp/>code<sp/>is<sp/>at<sp/>least<sp/>min_bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>long,<sp/>so<sp/>fetch<sp/>that<sp/>many<sp/>bits<sp/>in<sp/>one<sp/>swoop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>CHECK_BIT_BUFFER(*state,<sp/>l,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/>GET_BITS(l);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Collect<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>Huffman<sp/>code<sp/>one<sp/>bit<sp/>at<sp/>a<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>per<sp/>Figure<sp/>F.16<sp/>in<sp/>the<sp/>JPEG<sp/>spec.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(code<sp/>&gt;<sp/>htbl-&gt;maxcode[l])<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(*state,<sp/>1,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>|=<sp/>GET_BITS(1);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>l++;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unload<sp/>the<sp/>local<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>state-&gt;get_buffer<sp/>=<sp/>get_buffer;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>state-&gt;bits_left<sp/>=<sp/>bits_left;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>With<sp/>garbage<sp/>input<sp/>we<sp/>may<sp/>reach<sp/>the<sp/>sentinel<sp/>value<sp/>l<sp/>=<sp/>17.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>WARNMS(state-&gt;cinfo,<sp/>JWRN_HUFF_BAD_CODE);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fake<sp/>a<sp/>zero<sp/>as<sp/>the<sp/>safest<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>htbl-&gt;pub-&gt;huffval[<sp/>htbl-&gt;valptr[l]<sp/>+</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int)<sp/>(code<sp/>-<sp/>htbl-&gt;mincode[l]))<sp/>];</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>Figure<sp/>F.12:<sp/>extend<sp/>sign<sp/>bit.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>On<sp/>some<sp/>machines,<sp/>a<sp/>shift<sp/>and<sp/>add<sp/>will<sp/>be<sp/>faster<sp/>than<sp/>a<sp/>table<sp/>lookup.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AVOID_TABLES</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HUFF_EXTEND(x,s)<sp/><sp/>((x)<sp/>&lt;<sp/>(1&lt;&lt;((s)-1))<sp/>?<sp/>(x)<sp/>+<sp/>(((-1)&lt;&lt;(s))<sp/>+<sp/>1)<sp/>:<sp/>(x))</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HUFF_EXTEND(x,s)<sp/><sp/>((x)<sp/>&lt;<sp/>extend_test[s]<sp/>?<sp/>(x)<sp/>+<sp/>extend_offset[s]<sp/>:<sp/>(x))</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extend_test[16]<sp/>=<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>entry<sp/>n<sp/>is<sp/>2**(n-1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>0x0001,<sp/>0x0002,<sp/>0x0004,<sp/>0x0008,<sp/>0x0010,<sp/>0x0020,<sp/>0x0040,<sp/>0x0080,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0100,<sp/>0x0200,<sp/>0x0400,<sp/>0x0800,<sp/>0x1000,<sp/>0x2000,<sp/>0x4000<sp/>};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extend_offset[16]<sp/>=<sp/></highlight><highlight class="comment">/*<sp/>entry<sp/>n<sp/>is<sp/>(-1<sp/>&lt;&lt;<sp/>n)<sp/>+<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>((-1)&lt;&lt;1)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;2)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;3)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;4)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;5)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;6)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;7)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;8)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;9)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;10)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;11)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;12)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;13)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;14)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;15)<sp/>+<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVOID_TABLES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>Check<sp/>for<sp/>a<sp/>restart<sp/>marker<sp/>&amp;<sp/>resynchronize<sp/>decoder.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>Returns<sp/>FALSE<sp/>if<sp/>must<sp/>suspend.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">process_restart<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Throw<sp/>away<sp/>any<sp/>unused<sp/>bits<sp/>remaining<sp/>in<sp/>bit<sp/>buffer;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>include<sp/>any<sp/>full<sp/>bytes<sp/>in<sp/>next_marker&apos;s<sp/>count<sp/>of<sp/>discarded<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>cinfo-&gt;marker-&gt;discarded_bytes<sp/>+=<sp/>entropy-&gt;bitstate.bits_left<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.bits_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>past<sp/>the<sp/>RSTn<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>(*cinfo-&gt;marker-&gt;read_restart_marker)<sp/>(cinfo))</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>restart<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>segment<sp/>can<sp/>get<sp/>another<sp/>out-of-data<sp/>warning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.printed_eod<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>Decode<sp/>and<sp/>return<sp/>one<sp/>MCU&apos;s<sp/>worth<sp/>of<sp/>Huffman-compressed<sp/>coefficients.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>The<sp/>coefficients<sp/>are<sp/>reordered<sp/>from<sp/>zigzag<sp/>order<sp/>into<sp/>natural<sp/>array<sp/>order,</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>but<sp/>are<sp/>not<sp/>dequantized.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>The<sp/>i&apos;th<sp/>block<sp/>of<sp/>the<sp/>MCU<sp/>is<sp/>stored<sp/>into<sp/>the<sp/>block<sp/>pointed<sp/>to<sp/>by</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>MCU_data[i].<sp/><sp/>WE<sp/>ASSUME<sp/>THIS<sp/>AREA<sp/>HAS<sp/>BEEN<sp/>ZEROED<sp/>BY<sp/>THE<sp/>CALLER.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>(Wholesale<sp/>zeroing<sp/>is<sp/>usually<sp/>a<sp/>little<sp/>faster<sp/>than<sp/>retail...)</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>Returns<sp/>FALSE<sp/>if<sp/>data<sp/>source<sp/>requested<sp/>suspension.<sp/><sp/>In<sp/>that<sp/>case<sp/>no</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>changes<sp/>have<sp/>been<sp/>made<sp/>to<sp/>permanent<sp/>state.<sp/><sp/>(Exception:<sp/>some<sp/>output</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>coefficients<sp/>may<sp/>already<sp/>have<sp/>been<sp/>assigned.<sp/><sp/>This<sp/>is<sp/>harmless<sp/>for</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>this<sp/>module,<sp/>since<sp/>we&apos;ll<sp/>just<sp/>re-assign<sp/>them<sp/>on<sp/>the<sp/>next<sp/>call.)</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">decode_mcu<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>k,<sp/>r;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn,<sp/>ci;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>BITREAD_STATE_VARS;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>state;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>dctbl;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>actbl;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>restart<sp/>marker<sp/>if<sp/>needed;<sp/>may<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>process_restart(cinfo))</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>BITREAD_LOAD_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(state,<sp/>entropy-&gt;saved);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outer<sp/>loop<sp/>handles<sp/>each<sp/>block<sp/>in<sp/>the<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[blkn];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>cinfo-&gt;MCU_membership[blkn];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>dctbl<sp/>=<sp/>entropy-&gt;dc_derived_tbls[compptr-&gt;dc_tbl_no];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>actbl<sp/>=<sp/>entropy-&gt;ac_derived_tbls[compptr-&gt;ac_tbl_no];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>single<sp/>block&apos;s<sp/>worth<sp/>of<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Section<sp/>F.2.2.1:<sp/>decode<sp/>the<sp/>DC<sp/>coefficient<sp/>difference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>dctbl,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE,<sp/>label1);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>s,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(s);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>HUFF_EXTEND(r,<sp/>s);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shortcut<sp/>if<sp/>component&apos;s<sp/>values<sp/>are<sp/>not<sp/>interesting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>compptr-&gt;component_needed)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>skip_ACs;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>DC<sp/>difference<sp/>to<sp/>actual<sp/>value,<sp/>update<sp/>last_dc_val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>state.last_dc_val[ci];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>state.last_dc_val[ci]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>the<sp/>DC<sp/>coefficient<sp/>(assumes<sp/>jpeg_natural_order[0]<sp/>=<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>(*block)[0]<sp/>=<sp/>(JCOEF)<sp/>s;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>we<sp/>need<sp/>to<sp/>decode<sp/>the<sp/>AC<sp/>coefficients<sp/>for<sp/>this<sp/>component?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compptr-&gt;DCT_scaled_size<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Section<sp/>F.2.2.2:<sp/>decode<sp/>the<sp/>AC<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>zeroes<sp/>are<sp/>skipped,<sp/>output<sp/>area<sp/>must<sp/>be<sp/>cleared<sp/>beforehand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>DCTSIZE2;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>actbl,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE,<sp/>label2);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>s,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(s);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>HUFF_EXTEND(r,<sp/>s);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>coefficient<sp/>in<sp/>natural<sp/>(dezigzagged)<sp/>order.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>the<sp/>extra<sp/>entries<sp/>in<sp/>jpeg_natural_order[]<sp/>will<sp/>save<sp/>us</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>k<sp/>&gt;=<sp/>DCTSIZE2,<sp/>which<sp/>could<sp/>happen<sp/>if<sp/>the<sp/>data<sp/>is<sp/>corrupted.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*block)[jpeg_natural_order[k]]<sp/>=<sp/>(JCOEF)<sp/>s;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>15)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>15;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal">skip_ACs:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Section<sp/>F.2.2.2:<sp/>decode<sp/>the<sp/>AC<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>this<sp/>path<sp/>we<sp/>just<sp/>discard<sp/>the<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>DCTSIZE2;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>actbl,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE,<sp/>label3);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>s,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DROP_BITS(s);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>15)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>15;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>BITREAD_SAVE_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(entropy-&gt;saved,<sp/>state);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>restart<sp/>interval<sp/>(no-op<sp/>if<sp/>not<sp/>using<sp/>restarts)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>Module<sp/>initialization<sp/>routine<sp/>for<sp/>Huffman<sp/>entropy<sp/>decoding.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">jinit_huff_decoder<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref><sp/>entropy;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>entropy<sp/>=<sp/>(<ref refid="structhuff__entropy__encoder" kindref="compound">huff_entropy_ptr</ref>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="structhuff__entropy__decoder" kindref="compound">huff_entropy_decoder</ref>));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>cinfo-&gt;entropy<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__decoder" kindref="compound">jpeg_entropy_decoder</ref><sp/>*)<sp/>entropy;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>entropy-&gt;pub.start_pass<sp/>=<sp/>start_pass_huff_decoder;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>entropy-&gt;pub.decode_mcu<sp/>=<sp/>decode_mcu;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>tables<sp/>unallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_HUFF_TBLS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;dc_derived_tbls[i]<sp/>=<sp/>entropy-&gt;ac_derived_tbls[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdhuff.c"/>
  </compounddef>
</doxygen>
