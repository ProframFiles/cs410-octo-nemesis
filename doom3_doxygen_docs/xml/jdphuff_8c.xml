<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jdphuff_8c" kind="file">
    <compoundname>jdphuff.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jdhuff_8h" local="yes">jdhuff.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jdphuff_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdphuff.c" line="17" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdphuff.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jdphuff.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>Huffman<sp/>entropy<sp/>decoding<sp/>routines<sp/>for<sp/>progressive<sp/>JPEG.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Much<sp/>of<sp/>the<sp/>complexity<sp/>here<sp/>has<sp/>to<sp/>do<sp/>with<sp/>supporting<sp/>input<sp/>suspension.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>data<sp/>source<sp/>module<sp/>demands<sp/>suspension,<sp/>we<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to<sp/>back</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>up<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>current<sp/>MCU.<sp/><sp/>To<sp/>do<sp/>this,<sp/>we<sp/>copy<sp/>state<sp/>variables</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>into<sp/>local<sp/>working<sp/>storage,<sp/>and<sp/>update<sp/>them<sp/>back<sp/>to<sp/>the<sp/>permanent</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>storage<sp/>only<sp/>upon<sp/>successful<sp/>completion<sp/>of<sp/>an<sp/>MCU.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jdhuff.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declarations<sp/>shared<sp/>with<sp/>jdhuff.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>D_PROGRESSIVE_SUPPORTED</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>Expanded<sp/>entropy<sp/>decoder<sp/>object<sp/>for<sp/>progressive<sp/>Huffman<sp/>decoding.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>The<sp/>savable_state<sp/>subrecord<sp/>contains<sp/>fields<sp/>that<sp/>change<sp/>within<sp/>an<sp/>MCU,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>but<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>permanently<sp/>until<sp/>we<sp/>complete<sp/>the<sp/>MCU.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EOBRUN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remaining<sp/>EOBs<sp/>in<sp/>EOBRUN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_dc_val[MAX_COMPS_IN_SCAN];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>DC<sp/>coef<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>macro<sp/>is<sp/>to<sp/>work<sp/>around<sp/>compilers<sp/>with<sp/>missing<sp/>or<sp/>broken</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>structure<sp/>assignment.<sp/><sp/>You&apos;ll<sp/>need<sp/>to<sp/>fix<sp/>this<sp/>code<sp/>if<sp/>you<sp/>have</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>such<sp/>a<sp/>compiler<sp/>and<sp/>you<sp/>change<sp/>MAX_COMPS_IN_SCAN.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_STRUCT_ASSIGN</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>((dest)<sp/>=<sp/>(src))</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>MAX_COMPS_IN_SCAN<sp/>==<sp/>4</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_STATE(dest,src)<sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((dest).EOBRUN<sp/>=<sp/>(src).EOBRUN,<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[0]<sp/>=<sp/>(src).last_dc_val[0],<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[1]<sp/>=<sp/>(src).last_dc_val[1],<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[2]<sp/>=<sp/>(src).last_dc_val[2],<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(dest).last_dc_val[3]<sp/>=<sp/>(src).last_dc_val[3])</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__decoder" kindref="compound">jpeg_entropy_decoder</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>loaded<sp/>into<sp/>local<sp/>variables<sp/>at<sp/>start<sp/>of<sp/>each<sp/>MCU.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>case<sp/>of<sp/>suspension,<sp/>we<sp/>exit<sp/>WITHOUT<sp/>updating<sp/>them.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="structbitread__perm__state" kindref="compound">bitread_perm_state</ref><sp/>bitstate;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>buffer<sp/>at<sp/>start<sp/>of<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>saved;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Other<sp/>state<sp/>at<sp/>start<sp/>of<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>fields<sp/>are<sp/>NOT<sp/>loaded<sp/>into<sp/>local<sp/>working<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restarts_to_go;<sp/><sp/></highlight><highlight class="comment">/*<sp/>MCUs<sp/>left<sp/>in<sp/>this<sp/>restart<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointers<sp/>to<sp/>derived<sp/>tables<sp/>(these<sp/>workspaces<sp/>have<sp/>image<sp/>lifespan)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>derived_tbls[NUM_HUFF_TBLS];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>ac_derived_tbl;<sp/></highlight><highlight class="comment">/*<sp/>active<sp/>table<sp/>during<sp/>an<sp/>AC<sp/>scan<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/>phuff_entropy_decoder;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>phuff_entropy_decoder<sp/>*<sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Forward<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>decode_mcu_DC_first<sp/>JPP((<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="79"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>decode_mcu_AC_first<sp/>JPP((<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>decode_mcu_DC_refine<sp/>JPP((<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="83"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>decode_mcu_AC_refine<sp/>JPP((<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JBLOCKROW<sp/>*MCU_data));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>for<sp/>a<sp/>Huffman-compressed<sp/>scan.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">start_pass_phuff_decoder<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_DC_band,<sp/>bad;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>coefi,<sp/>tbl;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*coef_bit_ptr;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>is_DC_band<sp/>=<sp/>(cinfo-&gt;Ss<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validate<sp/>scan<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>bad<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Se<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>not<sp/>check<sp/>Ss/Se<sp/>&lt;<sp/>0<sp/>since<sp/>they<sp/>came<sp/>from<sp/>unsigned<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ss<sp/>&gt;<sp/>cinfo-&gt;Se<sp/>||<sp/>cinfo-&gt;Se<sp/>&gt;=<sp/>DCTSIZE2)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>scans<sp/>may<sp/>have<sp/>only<sp/>one<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;comps_in_scan<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Successive<sp/>approximation<sp/>refinement<sp/>scan:<sp/>must<sp/>have<sp/>Al<sp/>=<sp/>Ah-1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Al<sp/>!=<sp/>cinfo-&gt;Ah-1)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Al<sp/>&gt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>not<sp/>check<sp/>for<sp/>&lt;<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bad)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT4(cinfo,<sp/>JERR_BAD_PROGRESSION,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo-&gt;Ss,<sp/>cinfo-&gt;Se,<sp/>cinfo-&gt;Ah,<sp/>cinfo-&gt;Al);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>progression<sp/>status,<sp/>and<sp/>verify<sp/>that<sp/>scan<sp/>order<sp/>is<sp/>legal.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>inter-scan<sp/>inconsistencies<sp/>are<sp/>treated<sp/>as<sp/>warnings</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>*<sp/>not<sp/>fatal<sp/>errors<sp/>...<sp/>not<sp/>clear<sp/>if<sp/>this<sp/>is<sp/>right<sp/>way<sp/>to<sp/>behave.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cindex<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci]-&gt;component_index;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>coef_bit_ptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;coef_bits[cindex][0];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_DC_band<sp/>&amp;&amp;<sp/>coef_bit_ptr[0]<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>without<sp/>prior<sp/>DC<sp/>scan<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WARNMS2(cinfo,<sp/>JWRN_BOGUS_PROGRESSION,<sp/>cindex,<sp/>0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(coefi<sp/>=<sp/>cinfo-&gt;Ss;<sp/>coefi<sp/>&lt;=<sp/>cinfo-&gt;Se;<sp/>coefi++)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>(coef_bit_ptr[coefi]<sp/>&lt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>coef_bit_ptr[coefi];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>!=<sp/>expected)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>WARNMS2(cinfo,<sp/>JWRN_BOGUS_PROGRESSION,<sp/>cindex,<sp/>coefi);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coef_bit_ptr[coefi]<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>MCU<sp/>decoding<sp/>routine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.decode_mcu<sp/>=<sp/>decode_mcu_DC_first;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.decode_mcu<sp/>=<sp/>decode_mcu_AC_first;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.decode_mcu<sp/>=<sp/>decode_mcu_DC_refine;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;pub.decode_mcu<sp/>=<sp/>decode_mcu_AC_refine;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>requested<sp/>tables<sp/>are<sp/>present,<sp/>and<sp/>compute<sp/>derived<sp/>tables.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>may<sp/>build<sp/>same<sp/>derived<sp/>table<sp/>more<sp/>than<sp/>once,<sp/>but<sp/>it&apos;s<sp/>not<sp/>expensive.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_DC_band)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;Ah<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>DC<sp/>refinement<sp/>needs<sp/>no<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>compptr-&gt;dc_tbl_no;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbl<sp/>&lt;<sp/>0<sp/>||<sp/>tbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo-&gt;dc_huff_tbl_ptrs[tbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>tbl);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_make_d_derived_tbl(cinfo,<sp/>cinfo-&gt;dc_huff_tbl_ptrs[tbl],</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;derived_tbls[tbl]);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>compptr-&gt;ac_tbl_no;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbl<sp/>&lt;<sp/>0<sp/>||<sp/>tbl<sp/>&gt;=<sp/>NUM_HUFF_TBLS<sp/>||</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo-&gt;ac_huff_tbl_ptrs[tbl]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_NO_HUFF_TABLE,<sp/>tbl);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_make_d_derived_tbl(cinfo,<sp/>cinfo-&gt;ac_huff_tbl_ptrs[tbl],</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>entropy-&gt;derived_tbls[tbl]);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>the<sp/>single<sp/>active<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entropy-&gt;ac_derived_tbl<sp/>=<sp/>entropy-&gt;derived_tbls[tbl];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>bitread<sp/>state<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.bits_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.get_buffer<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>unnecessary,<sp/>but<sp/>keeps<sp/>Purify<sp/>quiet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.printed_eod<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>private<sp/>state<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.EOBRUN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>restart<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>Figure<sp/>F.12:<sp/>extend<sp/>sign<sp/>bit.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>On<sp/>some<sp/>machines,<sp/>a<sp/>shift<sp/>and<sp/>add<sp/>will<sp/>be<sp/>faster<sp/>than<sp/>a<sp/>table<sp/>lookup.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AVOID_TABLES</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HUFF_EXTEND(x,s)<sp/><sp/>((x)<sp/>&lt;<sp/>(1&lt;&lt;((s)-1))<sp/>?<sp/>(x)<sp/>+<sp/>(((-1)&lt;&lt;(s))<sp/>+<sp/>1)<sp/>:<sp/>(x))</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HUFF_EXTEND(x,s)<sp/><sp/>((x)<sp/>&lt;<sp/>extend_test[s]<sp/>?<sp/>(x)<sp/>+<sp/>extend_offset[s]<sp/>:<sp/>(x))</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extend_test[16]<sp/>=<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>entry<sp/>n<sp/>is<sp/>2**(n-1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>0x0001,<sp/>0x0002,<sp/>0x0004,<sp/>0x0008,<sp/>0x0010,<sp/>0x0020,<sp/>0x0040,<sp/>0x0080,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0100,<sp/>0x0200,<sp/>0x0400,<sp/>0x0800,<sp/>0x1000,<sp/>0x2000,<sp/>0x4000<sp/>};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extend_offset[16]<sp/>=<sp/></highlight><highlight class="comment">/*<sp/>entry<sp/>n<sp/>is<sp/>(-1<sp/>&lt;&lt;<sp/>n)<sp/>+<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/>((-1)&lt;&lt;1)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;2)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;3)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;4)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;5)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;6)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;7)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;8)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;9)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;10)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;11)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;12)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>((-1)&lt;&lt;13)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;14)<sp/>+<sp/>1,<sp/>((-1)&lt;&lt;15)<sp/>+<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AVOID_TABLES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>Check<sp/>for<sp/>a<sp/>restart<sp/>marker<sp/>&amp;<sp/>resynchronize<sp/>decoder.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>Returns<sp/>FALSE<sp/>if<sp/>must<sp/>suspend.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">process_restart<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Throw<sp/>away<sp/>any<sp/>unused<sp/>bits<sp/>remaining<sp/>in<sp/>bit<sp/>buffer;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>include<sp/>any<sp/>full<sp/>bytes<sp/>in<sp/>next_marker&apos;s<sp/>count<sp/>of<sp/>discarded<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>cinfo-&gt;marker-&gt;discarded_bytes<sp/>+=<sp/>entropy-&gt;bitstate.bits_left<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.bits_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>past<sp/>the<sp/>RSTn<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>(*cinfo-&gt;marker-&gt;read_restart_marker)<sp/>(cinfo))</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-initialize<sp/>DC<sp/>predictions<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;comps_in_scan;<sp/>ci++)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;saved.last_dc_val[ci]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-init<sp/>EOB<sp/>run<sp/>count,<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.EOBRUN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>restart<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go<sp/>=<sp/>cinfo-&gt;restart_interval;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>segment<sp/>can<sp/>get<sp/>another<sp/>out-of-data<sp/>warning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>entropy-&gt;bitstate.printed_eod<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>Huffman<sp/>MCU<sp/>decoding.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>Each<sp/>of<sp/>these<sp/>routines<sp/>decodes<sp/>and<sp/>returns<sp/>one<sp/>MCU&apos;s<sp/>worth<sp/>of</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>Huffman-compressed<sp/>coefficients.<sp/></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>The<sp/>coefficients<sp/>are<sp/>reordered<sp/>from<sp/>zigzag<sp/>order<sp/>into<sp/>natural<sp/>array<sp/>order,</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>but<sp/>are<sp/>not<sp/>dequantized.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>The<sp/>i&apos;th<sp/>block<sp/>of<sp/>the<sp/>MCU<sp/>is<sp/>stored<sp/>into<sp/>the<sp/>block<sp/>pointed<sp/>to<sp/>by</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>MCU_data[i].<sp/><sp/>WE<sp/>ASSUME<sp/>THIS<sp/>AREA<sp/>IS<sp/>INITIALLY<sp/>ZEROED<sp/>BY<sp/>THE<sp/>CALLER.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>We<sp/>return<sp/>FALSE<sp/>if<sp/>data<sp/>source<sp/>requested<sp/>suspension.<sp/><sp/>In<sp/>that<sp/>case<sp/>no</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>changes<sp/>have<sp/>been<sp/>made<sp/>to<sp/>permanent<sp/>state.<sp/><sp/>(Exception:<sp/>some<sp/>output</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>coefficients<sp/>may<sp/>already<sp/>have<sp/>been<sp/>assigned.<sp/><sp/>This<sp/>is<sp/>harmless<sp/>for</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>spectral<sp/>selection,<sp/>since<sp/>we&apos;ll<sp/>just<sp/>re-assign<sp/>them<sp/>on<sp/>the<sp/>next<sp/>call.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>Successive<sp/>approximation<sp/>AC<sp/>refinement<sp/>has<sp/>to<sp/>be<sp/>more<sp/>careful,<sp/>however.)</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>MCU<sp/>decoding<sp/>for<sp/>DC<sp/>initial<sp/>scan<sp/>(either<sp/>spectral<sp/>selection,</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>or<sp/>first<sp/>pass<sp/>of<sp/>successive<sp/>approximation).</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">decode_mcu_DC_first<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>r;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn,<sp/>ci;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>BITREAD_STATE_VARS;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="structsavable__state" kindref="compound">savable_state</ref><sp/>state;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>tbl;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>restart<sp/>marker<sp/>if<sp/>needed;<sp/>may<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>process_restart(cinfo))</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>BITREAD_LOAD_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(state,<sp/>entropy-&gt;saved);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outer<sp/>loop<sp/>handles<sp/>each<sp/>block<sp/>in<sp/>the<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[blkn];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>cinfo-&gt;MCU_membership[blkn];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>compptr<sp/>=<sp/>cinfo-&gt;cur_comp_info[ci];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>entropy-&gt;derived_tbls[compptr-&gt;dc_tbl_no];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>single<sp/>block&apos;s<sp/>worth<sp/>of<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Section<sp/>F.2.2.1:<sp/>decode<sp/>the<sp/>DC<sp/>coefficient<sp/>difference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>tbl,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE,<sp/>label1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>s,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(s);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>HUFF_EXTEND(r,<sp/>s);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>DC<sp/>difference<sp/>to<sp/>actual<sp/>value,<sp/>update<sp/>last_dc_val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>state.last_dc_val[ci];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>state.last_dc_val[ci]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scale<sp/>and<sp/>output<sp/>the<sp/>DC<sp/>coefficient<sp/>(assumes<sp/>jpeg_natural_order[0]=0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>(*block)[0]<sp/>=<sp/>(JCOEF)<sp/>(s<sp/>&lt;&lt;<sp/>Al);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>BITREAD_SAVE_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>ASSIGN_STATE(entropy-&gt;saved,<sp/>state);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>restart<sp/>interval<sp/>(no-op<sp/>if<sp/>not<sp/>using<sp/>restarts)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>MCU<sp/>decoding<sp/>for<sp/>AC<sp/>initial<sp/>scan<sp/>(either<sp/>spectral<sp/>selection,</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>or<sp/>first<sp/>pass<sp/>of<sp/>successive<sp/>approximation).</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">decode_mcu_AC_first<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Se<sp/>=<sp/>cinfo-&gt;Se;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Al<sp/>=<sp/>cinfo-&gt;Al;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>k,<sp/>r;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EOBRUN;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>BITREAD_STATE_VARS;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>tbl;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>restart<sp/>marker<sp/>if<sp/>needed;<sp/>may<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>process_restart(cinfo))</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>can<sp/>avoid<sp/>loading/saving<sp/>bitread<sp/>state<sp/>if<sp/>in<sp/>an<sp/>EOB<sp/>run.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EOBRUN<sp/>=<sp/>entropy-&gt;saved.EOBRUN;<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>part<sp/>of<sp/>saved<sp/>state<sp/>we<sp/>care<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>always<sp/>only<sp/>one<sp/>block<sp/>per<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EOBRUN<sp/>&gt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>it&apos;s<sp/>a<sp/>band<sp/>of<sp/>zeroes...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>EOBRUN--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...process<sp/>it<sp/>now<sp/>(we<sp/>do<sp/>nothing)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>BITREAD_LOAD_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[0];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>tbl<sp/>=<sp/>entropy-&gt;ac_derived_tbl;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>cinfo-&gt;Ss;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>tbl,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE,<sp/>label2);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>s,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(s);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>HUFF_EXTEND(r,<sp/>s);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scale<sp/>and<sp/>output<sp/>coefficient<sp/>in<sp/>natural<sp/>(dezigzagged)<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*block)[jpeg_natural_order[k]]<sp/>=<sp/>(JCOEF)<sp/>(s<sp/>&lt;&lt;<sp/>Al);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>15)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ZRL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>15;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>15<sp/>zeroes<sp/>in<sp/>band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOBr,<sp/>run<sp/>length<sp/>is<sp/>2^r<sp/>+<sp/>appended<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOBRUN<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>r;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOBr,<sp/>r<sp/>&gt;<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>r,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(r);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOBRUN<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EOBRUN--;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>band<sp/>is<sp/>processed<sp/>at<sp/>this<sp/>moment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>force<sp/>end-of-band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>BITREAD_SAVE_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.EOBRUN<sp/>=<sp/>EOBRUN;<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>part<sp/>of<sp/>saved<sp/>state<sp/>we<sp/>care<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>restart<sp/>interval<sp/>(no-op<sp/>if<sp/>not<sp/>using<sp/>restarts)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>MCU<sp/>decoding<sp/>for<sp/>DC<sp/>successive<sp/>approximation<sp/>refinement<sp/>scan.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>Note:<sp/>we<sp/>assume<sp/>such<sp/>scans<sp/>can<sp/>be<sp/>multi-component,<sp/>although<sp/>the<sp/>spec</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>is<sp/>not<sp/>very<sp/>clear<sp/>on<sp/>the<sp/>point.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">decode_mcu_DC_refine<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>cinfo-&gt;Al;<sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>in<sp/>the<sp/>bit<sp/>position<sp/>being<sp/>coded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkn;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>BITREAD_STATE_VARS;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>restart<sp/>marker<sp/>if<sp/>needed;<sp/>may<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>process_restart(cinfo))</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>BITREAD_LOAD_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Outer<sp/>loop<sp/>handles<sp/>each<sp/>block<sp/>in<sp/>the<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blkn<sp/>=<sp/>0;<sp/>blkn<sp/>&lt;<sp/>cinfo-&gt;blocks_in_MCU;<sp/>blkn++)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>MCU_data[blkn];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encoded<sp/>data<sp/>is<sp/>simply<sp/>the<sp/>next<sp/>bit<sp/>of<sp/>the<sp/>two&apos;s-complement<sp/>DC<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>1,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GET_BITS(1))</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*block)[0]<sp/>|=<sp/>p1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>since<sp/>we<sp/>use<sp/>|=,<sp/>repeating<sp/>the<sp/>assignment<sp/>later<sp/>is<sp/>safe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>BITREAD_SAVE_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>restart<sp/>interval<sp/>(no-op<sp/>if<sp/>not<sp/>using<sp/>restarts)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>MCU<sp/>decoding<sp/>for<sp/>AC<sp/>successive<sp/>approximation<sp/>refinement<sp/>scan.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">decode_mcu_AC_refine<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JBLOCKROW<sp/>*MCU_data)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)<sp/>cinfo-&gt;entropy;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Se<sp/>=<sp/>cinfo-&gt;Se;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>cinfo-&gt;Al;<sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>in<sp/>the<sp/>bit<sp/>position<sp/>being<sp/>coded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m1<sp/>=<sp/>(-1)<sp/>&lt;&lt;<sp/>cinfo-&gt;Al;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-1<sp/>in<sp/>the<sp/>bit<sp/>position<sp/>being<sp/>coded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>k,<sp/>r;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EOBRUN;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>block;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>JCOEFPTR<sp/>thiscoef;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>BITREAD_STATE_VARS;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="structd__derived__tbl" kindref="compound">d_derived_tbl</ref><sp/>*<sp/>tbl;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_newnz;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newnz_pos[DCTSIZE2];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>restart<sp/>marker<sp/>if<sp/>needed;<sp/>may<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;restart_interval)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy-&gt;restarts_to_go<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>process_restart(cinfo))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Load<sp/>up<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>BITREAD_LOAD_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EOBRUN<sp/>=<sp/>entropy-&gt;saved.EOBRUN;<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>part<sp/>of<sp/>saved<sp/>state<sp/>we<sp/>care<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>always<sp/>only<sp/>one<sp/>block<sp/>per<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>block<sp/>=<sp/>MCU_data[0];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>tbl<sp/>=<sp/>entropy-&gt;ac_derived_tbl;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>are<sp/>forced<sp/>to<sp/>suspend,<sp/>we<sp/>must<sp/>undo<sp/>the<sp/>assignments<sp/>to<sp/>any<sp/>newly</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/>*<sp/>nonzero<sp/>coefficients<sp/>in<sp/>the<sp/>block,<sp/>because<sp/>otherwise<sp/>we&apos;d<sp/>get<sp/>confused</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>*<sp/>next<sp/>time<sp/>about<sp/>which<sp/>coefficients<sp/>were<sp/>already<sp/>nonzero.</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>*<sp/>But<sp/>we<sp/>need<sp/>not<sp/>undo<sp/>addition<sp/>of<sp/>bits<sp/>to<sp/>already-nonzero<sp/>coefficients;</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/>*<sp/>instead,<sp/>we<sp/>can<sp/>test<sp/>the<sp/>current<sp/>bit<sp/>position<sp/>to<sp/>see<sp/>if<sp/>we<sp/>already<sp/>did<sp/>it.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>num_newnz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>coefficient<sp/>loop<sp/>counter<sp/>to<sp/>start<sp/>of<sp/>band<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>cinfo-&gt;Ss;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EOBRUN<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HUFF_DECODE(s,<sp/>br_state,<sp/>tbl,<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>undoit,<sp/>label3);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>1)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>new<sp/>coef<sp/>should<sp/>always<sp/>be<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WARNMS(cinfo,<sp/>JWRN_HUFF_BAD_CODE);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>1,<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>undoit);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GET_BITS(1))</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>p1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>newly<sp/>nonzero<sp/>coef<sp/>is<sp/>positive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>m1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>newly<sp/>nonzero<sp/>coef<sp/>is<sp/>negative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EOBRUN<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>r;<sp/><sp/></highlight><highlight class="comment">/*<sp/>EOBr,<sp/>run<sp/>length<sp/>is<sp/>2^r<sp/>+<sp/>appended<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>r,<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>undoit);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>GET_BITS(r);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOBRUN<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rest<sp/>of<sp/>block<sp/>is<sp/>handled<sp/>by<sp/>EOB<sp/>logic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>s<sp/>=<sp/>0<sp/>for<sp/>processing<sp/>ZRL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>over<sp/>already-nonzero<sp/>coefs<sp/>and<sp/>r<sp/>still-zero<sp/>coefs,</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>appending<sp/>correction<sp/>bits<sp/>to<sp/>the<sp/>nonzeroes.<sp/><sp/>A<sp/>correction<sp/>bit<sp/>is<sp/>1</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>must<sp/>be<sp/>increased.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>thiscoef<sp/>=<sp/>*block<sp/>+<sp/>jpeg_natural_order[k];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*thiscoef<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>1,<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>undoit);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GET_BITS(1))<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*thiscoef<sp/>&amp;<sp/>p1)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing<sp/>if<sp/>already<sp/>changed<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*thiscoef<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thiscoef<sp/>+=<sp/>p1;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thiscoef<sp/>+=<sp/>m1;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--r<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reached<sp/>target<sp/>zero<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&lt;=<sp/>Se);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>jpeg_natural_order[k];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>newly<sp/>nonzero<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>(*block)[pos]<sp/>=<sp/>(JCOEF)<sp/>s;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>its<sp/>position<sp/>in<sp/>case<sp/>we<sp/>have<sp/>to<sp/>suspend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>newnz_pos[num_newnz++]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EOBRUN<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scan<sp/>any<sp/>remaining<sp/>coefficient<sp/>positions<sp/>after<sp/>the<sp/>end-of-band</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(the<sp/>last<sp/>newly<sp/>nonzero<sp/>coefficient,<sp/>if<sp/>any).<sp/><sp/>Append<sp/>a<sp/>correction</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>bit<sp/>to<sp/>each<sp/>already-nonzero<sp/>coefficient.<sp/><sp/>A<sp/>correction<sp/>bit<sp/>is<sp/>1</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>must<sp/>be<sp/>increased.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;=<sp/>Se;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thiscoef<sp/>=<sp/>*block<sp/>+<sp/>jpeg_natural_order[k];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*thiscoef<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_BIT_BUFFER(br_state,<sp/>1,<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>undoit);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GET_BITS(1))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*thiscoef<sp/>&amp;<sp/>p1)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing<sp/>if<sp/>already<sp/>changed<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*thiscoef<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thiscoef<sp/>+=<sp/>p1;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thiscoef<sp/>+=<sp/>m1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>one<sp/>block<sp/>completed<sp/>in<sp/>EOB<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>EOBRUN--;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Completed<sp/>MCU,<sp/>so<sp/>update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>BITREAD_SAVE_STATE(cinfo,entropy-&gt;bitstate);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>entropy-&gt;saved.EOBRUN<sp/>=<sp/>EOBRUN;<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>part<sp/>of<sp/>saved<sp/>state<sp/>we<sp/>care<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>restart<sp/>interval<sp/>(no-op<sp/>if<sp/>not<sp/>using<sp/>restarts)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>entropy-&gt;restarts_to_go--;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">undoit:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-zero<sp/>any<sp/>output<sp/>coefficients<sp/>that<sp/>we<sp/>made<sp/>newly<sp/>nonzero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_newnz<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>(*block)[newnz_pos[--num_newnz]]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>Module<sp/>initialization<sp/>routine<sp/>for<sp/>progressive<sp/>Huffman<sp/>entropy<sp/>decoding.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">jinit_phuff_decoder<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref><sp/>entropy;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*coef_bit_ptr;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>i;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>entropy<sp/>=<sp/>(<ref refid="structphuff__entropy__encoder" kindref="compound">phuff_entropy_ptr</ref>)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(phuff_entropy_decoder));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>cinfo-&gt;entropy<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__entropy__decoder" kindref="compound">jpeg_entropy_decoder</ref><sp/>*)<sp/>entropy;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>entropy-&gt;pub.start_pass<sp/>=<sp/>start_pass_phuff_decoder;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>derived<sp/>tables<sp/>unallocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_HUFF_TBLS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>entropy-&gt;derived_tbls[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>progression<sp/>status<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>cinfo-&gt;coef_bits<sp/>=<sp/>(int<sp/>(*)[DCTSIZE2])</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinfo-&gt;num_components*DCTSIZE2*SIZEOF(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>coef_bit_ptr<sp/>=<sp/>&amp;<sp/>cinfo-&gt;coef_bits[0][0];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>cinfo-&gt;num_components;<sp/>ci++)<sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DCTSIZE2;<sp/>i++)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*coef_bit_ptr++<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>D_PROGRESSIVE_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jdphuff.c"/>
  </compounddef>
</doxygen>
