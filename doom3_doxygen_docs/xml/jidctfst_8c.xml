<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jidctfst_8c" kind="file">
    <compoundname>jidctfst.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jdct_8h" local="yes">jdct.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jidctfst_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctfst.c" line="35" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctfst.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jidctfst.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1994-1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>a<sp/>fast,<sp/>not<sp/>so<sp/>accurate<sp/>integer<sp/>implementation<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>inverse<sp/>DCT<sp/>(Discrete<sp/>Cosine<sp/>Transform).<sp/><sp/>In<sp/>the<sp/>IJG<sp/>code,<sp/>this<sp/>routine</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>must<sp/>also<sp/>perform<sp/>dequantization<sp/>of<sp/>the<sp/>input<sp/>coefficients.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>A<sp/>2-D<sp/>IDCT<sp/>can<sp/>be<sp/>done<sp/>by<sp/>1-D<sp/>IDCT<sp/>on<sp/>each<sp/>column<sp/>followed<sp/>by<sp/>1-D<sp/>IDCT</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>on<sp/>each<sp/>row<sp/>(or<sp/>vice<sp/>versa,<sp/>but<sp/>it&apos;s<sp/>more<sp/>convenient<sp/>to<sp/>emit<sp/>a<sp/>row<sp/>at</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>a<sp/>time).<sp/><sp/>Direct<sp/>algorithms<sp/>are<sp/>also<sp/>available,<sp/>but<sp/>they<sp/>are<sp/>much<sp/>more</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>complex<sp/>and<sp/>seem<sp/>not<sp/>to<sp/>be<sp/>any<sp/>faster<sp/>when<sp/>reduced<sp/>to<sp/>code.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>is<sp/>based<sp/>on<sp/>Arai,<sp/>Agui,<sp/>and<sp/>Nakajima&apos;s<sp/>algorithm<sp/>for</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>scaled<sp/>DCT.<sp/><sp/>Their<sp/>original<sp/>paper<sp/>(Trans.<sp/>IEICE<sp/>E-71(11):1095)<sp/>is<sp/>in</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Japanese,<sp/>but<sp/>the<sp/>algorithm<sp/>is<sp/>described<sp/>in<sp/>the<sp/>Pennebaker<sp/>&amp;<sp/>Mitchell</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>JPEG<sp/>textbook<sp/>(see<sp/>REFERENCES<sp/>section<sp/>in<sp/>file<sp/>README).<sp/><sp/>The<sp/>following<sp/>code</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>is<sp/>based<sp/>directly<sp/>on<sp/>figure<sp/>4-8<sp/>in<sp/>P&amp;M.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>While<sp/>an<sp/>8-point<sp/>DCT<sp/>cannot<sp/>be<sp/>done<sp/>in<sp/>less<sp/>than<sp/>11<sp/>multiplies,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>possible<sp/>to<sp/>arrange<sp/>the<sp/>computation<sp/>so<sp/>that<sp/>many<sp/>of<sp/>the<sp/>multiplies<sp/>are</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>simple<sp/>scalings<sp/>of<sp/>the<sp/>final<sp/>outputs.<sp/><sp/>These<sp/>multiplies<sp/>can<sp/>then<sp/>be</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>folded<sp/>into<sp/>the<sp/>multiplications<sp/>or<sp/>divisions<sp/>by<sp/>the<sp/>JPEG<sp/>quantization</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>table<sp/>entries.<sp/><sp/>The<sp/>AA&amp;N<sp/>method<sp/>leaves<sp/>only<sp/>5<sp/>multiplies<sp/>and<sp/>29<sp/>adds</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>to<sp/>be<sp/>done<sp/>in<sp/>the<sp/>DCT<sp/>itself.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>The<sp/>primary<sp/>disadvantage<sp/>of<sp/>this<sp/>method<sp/>is<sp/>that<sp/>with<sp/>fixed-point<sp/>math,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>accuracy<sp/>is<sp/>lost<sp/>due<sp/>to<sp/>imprecise<sp/>representation<sp/>of<sp/>the<sp/>scaled</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>quantization<sp/>values.<sp/><sp/>The<sp/>smaller<sp/>the<sp/>quantization<sp/>table<sp/>entry,<sp/>the<sp/>less</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>precise<sp/>the<sp/>scaled<sp/>value,<sp/>so<sp/>this<sp/>implementation<sp/>does<sp/>worse<sp/>with<sp/>high-</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>quality-setting<sp/>files<sp/>than<sp/>with<sp/>low-quality<sp/>ones.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jdct.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Private<sp/>declarations<sp/>for<sp/>DCT<sp/>subsystem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DCT_IFAST_SUPPORTED</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>This<sp/>module<sp/>is<sp/>specialized<sp/>to<sp/>the<sp/>case<sp/>DCTSIZE<sp/>=<sp/>8.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DCTSIZE<sp/>!=<sp/>8</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>Sorry,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>code<sp/>only<sp/>copes<sp/>with<sp/>8x8<sp/>DCTs.<sp/></highlight><highlight class="comment">/*<sp/>deliberate<sp/>syntax<sp/>err<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Scaling<sp/>decisions<sp/>are<sp/>generally<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>LL&amp;M<sp/>algorithm;</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>see<sp/>jidctint.c<sp/>for<sp/>more<sp/>details.<sp/><sp/>However,<sp/>we<sp/>choose<sp/>to<sp/>descale</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>(right<sp/>shift)<sp/>multiplication<sp/>products<sp/>as<sp/>soon<sp/>as<sp/>they<sp/>are<sp/>formed,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>rather<sp/>than<sp/>carrying<sp/>additional<sp/>fractional<sp/>bits<sp/>into<sp/>subsequent<sp/>additions.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>This<sp/>compromises<sp/>accuracy<sp/>slightly,<sp/>but<sp/>it<sp/>lets<sp/>us<sp/>save<sp/>a<sp/>few<sp/>shifts.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>More<sp/>importantly,<sp/>16-bit<sp/>arithmetic<sp/>is<sp/>then<sp/>adequate<sp/>(for<sp/>8-bit<sp/>samples)</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>everywhere<sp/>except<sp/>in<sp/>the<sp/>multiplications<sp/>proper;<sp/>this<sp/>saves<sp/>a<sp/>good<sp/>deal</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>of<sp/>work<sp/>on<sp/>16-bit-int<sp/>machines.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>The<sp/>dequantized<sp/>coefficients<sp/>are<sp/>not<sp/>integers<sp/>because<sp/>the<sp/>AA&amp;N<sp/>scaling</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>factors<sp/>have<sp/>been<sp/>incorporated.<sp/><sp/>We<sp/>represent<sp/>them<sp/>scaled<sp/>up<sp/>by<sp/>PASS1_BITS,</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>so<sp/>that<sp/>the<sp/>first<sp/>and<sp/>second<sp/>IDCT<sp/>rounds<sp/>have<sp/>the<sp/>same<sp/>input<sp/>scaling.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>For<sp/>8-bit<sp/>JSAMPLEs,<sp/>we<sp/>choose<sp/>IFAST_SCALE_BITS<sp/>=<sp/>PASS1_BITS<sp/>so<sp/>as<sp/>to</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>avoid<sp/>a<sp/>descaling<sp/>shift;<sp/>this<sp/>compromises<sp/>accuracy<sp/>rather<sp/>drastically</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>for<sp/>small<sp/>quantization<sp/>table<sp/>entries,<sp/>but<sp/>it<sp/>saves<sp/>a<sp/>lot<sp/>of<sp/>shifts.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>For<sp/>12-bit<sp/>JSAMPLEs,<sp/>there&apos;s<sp/>no<sp/>hope<sp/>of<sp/>using<sp/>16x16<sp/>multiplies<sp/>anyway,</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>so<sp/>we<sp/>use<sp/>a<sp/>much<sp/>larger<sp/>scaling<sp/>factor<sp/>to<sp/>preserve<sp/>accuracy.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>A<sp/>final<sp/>compromise<sp/>is<sp/>to<sp/>represent<sp/>the<sp/>multiplicative<sp/>constants<sp/>to<sp/>only</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>8<sp/>fractional<sp/>bits,<sp/>rather<sp/>than<sp/>13.<sp/><sp/>This<sp/>saves<sp/>some<sp/>shifting<sp/>work<sp/>on<sp/>some</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>machines,<sp/>and<sp/>may<sp/>also<sp/>reduce<sp/>the<sp/>cost<sp/>of<sp/>multiplication<sp/>(since<sp/>there</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>are<sp/>fewer<sp/>one-bits<sp/>in<sp/>the<sp/>constants).</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONST_BITS<sp/><sp/>8</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PASS1_BITS<sp/><sp/>2</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONST_BITS<sp/><sp/>8</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PASS1_BITS<sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lose<sp/>a<sp/>little<sp/>precision<sp/>to<sp/>avoid<sp/>overflow<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>C<sp/>compilers<sp/>fail<sp/>to<sp/>reduce<sp/>&quot;FIX(constant)&quot;<sp/>at<sp/>compile<sp/>time,<sp/>thus</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>causing<sp/>a<sp/>lot<sp/>of<sp/>useless<sp/>floating-point<sp/>operations<sp/>at<sp/>run<sp/>time.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>To<sp/>get<sp/>around<sp/>this<sp/>we<sp/>use<sp/>the<sp/>following<sp/>pre-calculated<sp/>constants.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>change<sp/>CONST_BITS<sp/>you<sp/>may<sp/>want<sp/>to<sp/>add<sp/>appropriate<sp/>values.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>(With<sp/>a<sp/>reasonable<sp/>C<sp/>compiler,<sp/>you<sp/>can<sp/>just<sp/>rely<sp/>on<sp/>the<sp/>FIX()<sp/>macro...)</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONST_BITS<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_082392200<sp/><sp/>((INT32)<sp/><sp/>277)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.082392200)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_414213562<sp/><sp/>((INT32)<sp/><sp/>362)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.414213562)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_847759065<sp/><sp/>((INT32)<sp/><sp/>473)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.847759065)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_613125930<sp/><sp/>((INT32)<sp/><sp/>669)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(2.613125930)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_082392200<sp/><sp/>FIX(1.082392200)</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_414213562<sp/><sp/>FIX(1.414213562)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_847759065<sp/><sp/>FIX(1.847759065)</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_613125930<sp/><sp/>FIX(2.613125930)</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>can<sp/>gain<sp/>a<sp/>little<sp/>more<sp/>speed,<sp/>with<sp/>a<sp/>further<sp/>compromise<sp/>in<sp/>accuracy,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>by<sp/>omitting<sp/>the<sp/>addition<sp/>in<sp/>a<sp/>descaling<sp/>shift.<sp/><sp/>This<sp/>yields<sp/>an<sp/>incorrectly</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>rounded<sp/>result<sp/>half<sp/>the<sp/>time...</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_ACCURATE_ROUNDING</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>DESCALE</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESCALE(x,n)<sp/><sp/>RIGHT_SHIFT(x,<sp/>n)</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Multiply<sp/>a<sp/>DCTELEM<sp/>variable<sp/>by<sp/>an<sp/>INT32<sp/>constant,<sp/>and<sp/>immediately</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>descale<sp/>to<sp/>yield<sp/>a<sp/>DCTELEM<sp/>result.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MULTIPLY(var,const)<sp/><sp/>((DCTELEM)<sp/>DESCALE((var)<sp/>*<sp/>(const),<sp/>CONST_BITS))</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dequantize<sp/>a<sp/>coefficient<sp/>by<sp/>multiplying<sp/>it<sp/>by<sp/>the<sp/>multiplier-table</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>entry;<sp/>produce<sp/>a<sp/>DCTELEM<sp/>result.<sp/><sp/>For<sp/>8-bit<sp/>data<sp/>a<sp/>16x16-&gt;16</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>multiplication<sp/>will<sp/>do.<sp/><sp/>For<sp/>12-bit<sp/>data,<sp/>the<sp/>multiplier<sp/>table<sp/>is</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>declared<sp/>INT32,<sp/>so<sp/>a<sp/>32-bit<sp/>multiply<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEQUANTIZE(coef,quantval)<sp/><sp/>(((IFAST_MULT_TYPE)<sp/>(coef))<sp/>*<sp/>(quantval))</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEQUANTIZE(coef,quantval)<sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DESCALE((coef)*(quantval),<sp/>IFAST_SCALE_BITS-PASS1_BITS)</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>DESCALE,<sp/>but<sp/>applies<sp/>to<sp/>a<sp/>DCTELEM<sp/>and<sp/>produces<sp/>an<sp/>int.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>We<sp/>assume<sp/>that<sp/>int<sp/>right<sp/>shift<sp/>is<sp/>unsigned<sp/>if<sp/>INT32<sp/>right<sp/>shift<sp/>is.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RIGHT_SHIFT_IS_UNSIGNED</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ISHIFT_TEMPS<sp/><sp/><sp/><sp/>DCTELEM<sp/>ishift_temp;</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DCTELEMBITS<sp/><sp/>16<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DCTELEM<sp/>may<sp/>be<sp/>16<sp/>or<sp/>32<sp/>bits<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DCTELEMBITS<sp/><sp/>32<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DCTELEM<sp/>must<sp/>be<sp/>32<sp/>bits<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IRIGHT_SHIFT(x,shft)<sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((ishift_temp<sp/>=<sp/>(x))<sp/>&lt;<sp/>0<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ishift_temp<sp/>&gt;&gt;<sp/>(shft))<sp/>|<sp/>((~((DCTELEM)<sp/>0))<sp/>&lt;&lt;<sp/>(DCTELEMBITS-(shft)))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ishift_temp<sp/>&gt;&gt;<sp/>(shft)))</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ISHIFT_TEMPS</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IRIGHT_SHIFT(x,shft)<sp/><sp/><sp/><sp/>((x)<sp/>&gt;&gt;<sp/>(shft))</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ACCURATE_ROUNDING</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IDESCALE(x,n)<sp/><sp/>((int)<sp/>IRIGHT_SHIFT((x)<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>((n)-1)),<sp/>n))</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IDESCALE(x,n)<sp/><sp/>((int)<sp/>IRIGHT_SHIFT(x,<sp/>n))</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>Perform<sp/>dequantization<sp/>and<sp/>inverse<sp/>DCT<sp/>on<sp/>one<sp/>block<sp/>of<sp/>coefficients.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">jpeg_idct_ifast<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JCOEFPTR<sp/>coef_block,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/>JDIMENSION<sp/>output_col)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>DCTELEM<sp/>tmp0,<sp/>tmp1,<sp/>tmp2,<sp/>tmp3,<sp/>tmp4,<sp/>tmp5,<sp/>tmp6,<sp/>tmp7;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>DCTELEM<sp/>tmp10,<sp/>tmp11,<sp/>tmp12,<sp/>tmp13;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>DCTELEM<sp/>z5,<sp/>z10,<sp/>z11,<sp/>z12,<sp/>z13;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>JCOEFPTR<sp/>inptr;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>IFAST_MULT_TYPE<sp/>*<sp/>quantptr;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>wsptr;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>outptr;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>JSAMPLE<sp/>*range_limit<sp/>=<sp/>IDCT_range_limit(cinfo);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctr;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workspace[DCTSIZE2];<sp/><sp/></highlight><highlight class="comment">/*<sp/>buffers<sp/>data<sp/>between<sp/>passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>SHIFT_TEMPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>DESCALE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ISHIFT_TEMPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>IDESCALE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>1:<sp/>process<sp/>columns<sp/>from<sp/>input,<sp/>store<sp/>into<sp/>work<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>inptr<sp/>=<sp/>coef_block;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>quantptr<sp/>=<sp/>(IFAST_MULT_TYPE<sp/>*)<sp/>compptr-&gt;dct_table;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>wsptr<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>for<sp/>(ctr<sp/>=<sp/>DCTSIZE;<sp/>ctr<sp/>&gt;<sp/>0;<sp/>ctr--)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Due<sp/>to<sp/>quantization,<sp/>we<sp/>will<sp/>usually<sp/>find<sp/>that<sp/>many<sp/>of<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>coefficients<sp/>are<sp/>zero,<sp/>especially<sp/>the<sp/>AC<sp/>terms.<sp/><sp/>We<sp/>can<sp/>exploit<sp/>this</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>short-circuiting<sp/>the<sp/>IDCT<sp/>calculation<sp/>for<sp/>any<sp/>column<sp/>in<sp/>which<sp/>all</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>AC<sp/>terms<sp/>are<sp/>zero.<sp/><sp/>In<sp/>that<sp/>case<sp/>each<sp/>output<sp/>is<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DC<sp/>coefficient<sp/>(with<sp/>scale<sp/>factor<sp/>as<sp/>needed).</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>With<sp/>typical<sp/>images<sp/>and<sp/>quantization<sp/>tables,<sp/>half<sp/>or<sp/>more<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>column<sp/>DCT<sp/>calculations<sp/>can<sp/>be<sp/>simplified<sp/>this<sp/>way.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inptr[DCTSIZE*1]<sp/>|<sp/>inptr[DCTSIZE*2]<sp/>|<sp/>inptr[DCTSIZE*3]<sp/>|</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inptr[DCTSIZE*4]<sp/>|<sp/>inptr[DCTSIZE*5]<sp/>|<sp/>inptr[DCTSIZE*6]<sp/>|</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inptr[DCTSIZE*7])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>terms<sp/>all<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcval<sp/>=<sp/>(int)<sp/>DEQUANTIZE(inptr[DCTSIZE*0],<sp/>quantptr[DCTSIZE*0]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*0]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*1]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*2]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*3]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*4]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*5]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*6]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*7]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inptr++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointers<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quantptr++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr++;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Even<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*0],<sp/>quantptr[DCTSIZE*0]);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*2],<sp/>quantptr[DCTSIZE*2]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*4],<sp/>quantptr[DCTSIZE*4]);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*6],<sp/>quantptr[DCTSIZE*6]);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>tmp0<sp/>+<sp/>tmp2;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>tmp0<sp/>-<sp/>tmp2;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp13<sp/>=<sp/>tmp1<sp/>+<sp/>tmp3;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phases<sp/>5-3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>MULTIPLY(tmp1<sp/>-<sp/>tmp3,<sp/>FIX_1_414213562)<sp/>-<sp/>tmp13;<sp/></highlight><highlight class="comment">/*<sp/>2*c4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>tmp10<sp/>+<sp/>tmp13;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>tmp10<sp/>-<sp/>tmp13;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>tmp11<sp/>+<sp/>tmp12;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>tmp11<sp/>-<sp/>tmp12;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Odd<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp4<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*1],<sp/>quantptr[DCTSIZE*1]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp5<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*3],<sp/>quantptr[DCTSIZE*3]);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp6<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*5],<sp/>quantptr[DCTSIZE*5]);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp7<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*7],<sp/>quantptr[DCTSIZE*7]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>z13<sp/>=<sp/>tmp6<sp/>+<sp/>tmp5;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>z10<sp/>=<sp/>tmp6<sp/>-<sp/>tmp5;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>z11<sp/>=<sp/>tmp4<sp/>+<sp/>tmp7;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>z12<sp/>=<sp/>tmp4<sp/>-<sp/>tmp7;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp7<sp/>=<sp/>z11<sp/>+<sp/>z13;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>MULTIPLY(z11<sp/>-<sp/>z13,<sp/>FIX_1_414213562);<sp/></highlight><highlight class="comment">/*<sp/>2*c4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>z5<sp/>=<sp/>MULTIPLY(z10<sp/>+<sp/>z12,<sp/>FIX_1_847759065);<sp/></highlight><highlight class="comment">/*<sp/>2*c2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>MULTIPLY(z12,<sp/>FIX_1_082392200)<sp/>-<sp/>z5;<sp/></highlight><highlight class="comment">/*<sp/>2*(c2-c6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>MULTIPLY(z10,<sp/>-<sp/>FIX_2_613125930)<sp/>+<sp/>z5;<sp/></highlight><highlight class="comment">/*<sp/>-2*(c2+c6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp6<sp/>=<sp/>tmp12<sp/>-<sp/>tmp7;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp5<sp/>=<sp/>tmp11<sp/>-<sp/>tmp6;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp4<sp/>=<sp/>tmp10<sp/>+<sp/>tmp5;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*0]<sp/>=<sp/>(int)<sp/>(tmp0<sp/>+<sp/>tmp7);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*7]<sp/>=<sp/>(int)<sp/>(tmp0<sp/>-<sp/>tmp7);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*1]<sp/>=<sp/>(int)<sp/>(tmp1<sp/>+<sp/>tmp6);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*6]<sp/>=<sp/>(int)<sp/>(tmp1<sp/>-<sp/>tmp6);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*2]<sp/>=<sp/>(int)<sp/>(tmp2<sp/>+<sp/>tmp5);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*5]<sp/>=<sp/>(int)<sp/>(tmp2<sp/>-<sp/>tmp5);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*4]<sp/>=<sp/>(int)<sp/>(tmp3<sp/>+<sp/>tmp4);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*3]<sp/>=<sp/>(int)<sp/>(tmp3<sp/>-<sp/>tmp4);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>inptr++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointers<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>quantptr++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr++;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>2:<sp/>process<sp/>rows<sp/>from<sp/>work<sp/>array,<sp/>store<sp/>into<sp/>output<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>we<sp/>must<sp/>descale<sp/>the<sp/>results<sp/>by<sp/>a<sp/>factor<sp/>of<sp/>8<sp/>==<sp/>2**3,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>also<sp/>undo<sp/>the<sp/>PASS1_BITS<sp/>scaling.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>wsptr<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ctr<sp/>=<sp/>0;<sp/>ctr<sp/>&lt;<sp/>DCTSIZE;<sp/>ctr++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr<sp/>=<sp/>output_buf[ctr]<sp/>+<sp/>output_col;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rows<sp/>of<sp/>zeroes<sp/>can<sp/>be<sp/>exploited<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>we<sp/>did<sp/>with<sp/>columns.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>However,<sp/>the<sp/>column<sp/>calculation<sp/>has<sp/>created<sp/>many<sp/>nonzero<sp/>AC<sp/>terms,<sp/>so</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>simplification<sp/>applies<sp/>less<sp/>often<sp/>(typically<sp/>5%<sp/>to<sp/>10%<sp/>of<sp/>the<sp/>time).</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>On<sp/>machines<sp/>with<sp/>very<sp/>fast<sp/>multiplication,<sp/>it&apos;s<sp/>possible<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>test<sp/>takes<sp/>more<sp/>time<sp/>than<sp/>it&apos;s<sp/>worth.<sp/><sp/>In<sp/>that<sp/>case<sp/>this<sp/>section</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>be<sp/>commented<sp/>out.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ZERO_ROW_TEST</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((wsptr[1]<sp/>|<sp/>wsptr[2]<sp/>|<sp/>wsptr[3]<sp/>|<sp/>wsptr[4]<sp/>|<sp/>wsptr[5]<sp/>|<sp/>wsptr[6]<sp/>|</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>wsptr[7])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>terms<sp/>all<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPLE<sp/>dcval<sp/>=<sp/>range_limit[IDESCALE(wsptr[0],<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[0]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[1]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[2]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[3]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[4]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[5]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[6]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[7]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr<sp/>+=<sp/>DCTSIZE;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointer<sp/>to<sp/>next<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Even<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>((DCTELEM)<sp/>wsptr[0]<sp/>+<sp/>(DCTELEM)<sp/>wsptr[4]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>((DCTELEM)<sp/>wsptr[0]<sp/>-<sp/>(DCTELEM)<sp/>wsptr[4]);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp13<sp/>=<sp/>((DCTELEM)<sp/>wsptr[2]<sp/>+<sp/>(DCTELEM)<sp/>wsptr[6]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>MULTIPLY((DCTELEM)<sp/>wsptr[2]<sp/>-<sp/>(DCTELEM)<sp/>wsptr[6],<sp/>FIX_1_414213562)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>tmp13;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>tmp10<sp/>+<sp/>tmp13;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>tmp10<sp/>-<sp/>tmp13;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>tmp11<sp/>+<sp/>tmp12;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>tmp11<sp/>-<sp/>tmp12;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Odd<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>z13<sp/>=<sp/>(DCTELEM)<sp/>wsptr[5]<sp/>+<sp/>(DCTELEM)<sp/>wsptr[3];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>z10<sp/>=<sp/>(DCTELEM)<sp/>wsptr[5]<sp/>-<sp/>(DCTELEM)<sp/>wsptr[3];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>z11<sp/>=<sp/>(DCTELEM)<sp/>wsptr[1]<sp/>+<sp/>(DCTELEM)<sp/>wsptr[7];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>z12<sp/>=<sp/>(DCTELEM)<sp/>wsptr[1]<sp/>-<sp/>(DCTELEM)<sp/>wsptr[7];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp7<sp/>=<sp/>z11<sp/>+<sp/>z13;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>MULTIPLY(z11<sp/>-<sp/>z13,<sp/>FIX_1_414213562);<sp/></highlight><highlight class="comment">/*<sp/>2*c4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>z5<sp/>=<sp/>MULTIPLY(z10<sp/>+<sp/>z12,<sp/>FIX_1_847759065);<sp/></highlight><highlight class="comment">/*<sp/>2*c2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>MULTIPLY(z12,<sp/>FIX_1_082392200)<sp/>-<sp/>z5;<sp/></highlight><highlight class="comment">/*<sp/>2*(c2-c6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>MULTIPLY(z10,<sp/>-<sp/>FIX_2_613125930)<sp/>+<sp/>z5;<sp/></highlight><highlight class="comment">/*<sp/>-2*(c2+c6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp6<sp/>=<sp/>tmp12<sp/>-<sp/>tmp7;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>phase<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp5<sp/>=<sp/>tmp11<sp/>-<sp/>tmp6;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp4<sp/>=<sp/>tmp10<sp/>+<sp/>tmp5;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>output<sp/>stage:<sp/>scale<sp/>down<sp/>by<sp/>a<sp/>factor<sp/>of<sp/>8<sp/>and<sp/>range-limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[0]<sp/>=<sp/>range_limit[IDESCALE(tmp0<sp/>+<sp/>tmp7,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[7]<sp/>=<sp/>range_limit[IDESCALE(tmp0<sp/>-<sp/>tmp7,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[1]<sp/>=<sp/>range_limit[IDESCALE(tmp1<sp/>+<sp/>tmp6,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[6]<sp/>=<sp/>range_limit[IDESCALE(tmp1<sp/>-<sp/>tmp6,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[2]<sp/>=<sp/>range_limit[IDESCALE(tmp2<sp/>+<sp/>tmp5,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[5]<sp/>=<sp/>range_limit[IDESCALE(tmp2<sp/>-<sp/>tmp5,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[4]<sp/>=<sp/>range_limit[IDESCALE(tmp3<sp/>+<sp/>tmp4,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[3]<sp/>=<sp/>range_limit[IDESCALE(tmp3<sp/>-<sp/>tmp4,<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr<sp/>+=<sp/>DCTSIZE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointer<sp/>to<sp/>next<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DCT_IFAST_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctfst.c"/>
  </compounddef>
</doxygen>
