<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jidctint_8c" kind="file">
    <compoundname>jidctint.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jdct_8h" local="yes">jdct.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jidctint_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctint.c" line="28" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctint.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jidctint.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1991-1994,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>a<sp/>slow-but-accurate<sp/>integer<sp/>implementation<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>inverse<sp/>DCT<sp/>(Discrete<sp/>Cosine<sp/>Transform).<sp/><sp/>In<sp/>the<sp/>IJG<sp/>code,<sp/>this<sp/>routine</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>must<sp/>also<sp/>perform<sp/>dequantization<sp/>of<sp/>the<sp/>input<sp/>coefficients.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>A<sp/>2-D<sp/>IDCT<sp/>can<sp/>be<sp/>done<sp/>by<sp/>1-D<sp/>IDCT<sp/>on<sp/>each<sp/>column<sp/>followed<sp/>by<sp/>1-D<sp/>IDCT</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>on<sp/>each<sp/>row<sp/>(or<sp/>vice<sp/>versa,<sp/>but<sp/>it&apos;s<sp/>more<sp/>convenient<sp/>to<sp/>emit<sp/>a<sp/>row<sp/>at</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>a<sp/>time).<sp/><sp/>Direct<sp/>algorithms<sp/>are<sp/>also<sp/>available,<sp/>but<sp/>they<sp/>are<sp/>much<sp/>more</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>complex<sp/>and<sp/>seem<sp/>not<sp/>to<sp/>be<sp/>any<sp/>faster<sp/>when<sp/>reduced<sp/>to<sp/>code.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>is<sp/>based<sp/>on<sp/>an<sp/>algorithm<sp/>described<sp/>in</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>C.<sp/>Loeffler,<sp/>A.<sp/>Ligtenberg<sp/>and<sp/>G.<sp/>Moschytz,<sp/>&quot;Practical<sp/>Fast<sp/>1-D<sp/>DCT</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Algorithms<sp/>with<sp/>11<sp/>Multiplications&quot;,<sp/>Proc.<sp/>Int&apos;l.<sp/>Conf.<sp/>on<sp/>Acoustics,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Speech,<sp/>and<sp/>Signal<sp/>Processing<sp/>1989<sp/>(ICASSP<sp/>&apos;89),<sp/>pp.<sp/>988-991.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>The<sp/>primary<sp/>algorithm<sp/>described<sp/>there<sp/>uses<sp/>11<sp/>multiplies<sp/>and<sp/>29<sp/>adds.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>We<sp/>use<sp/>their<sp/>alternate<sp/>method<sp/>with<sp/>12<sp/>multiplies<sp/>and<sp/>32<sp/>adds.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>The<sp/>advantage<sp/>of<sp/>this<sp/>method<sp/>is<sp/>that<sp/>no<sp/>data<sp/>path<sp/>contains<sp/>more<sp/>than<sp/>one</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>multiplication;<sp/>this<sp/>allows<sp/>a<sp/>very<sp/>simple<sp/>and<sp/>accurate<sp/>implementation<sp/>in</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>scaled<sp/>fixed-point<sp/>arithmetic,<sp/>with<sp/>a<sp/>minimal<sp/>number<sp/>of<sp/>shifts.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jdct.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Private<sp/>declarations<sp/>for<sp/>DCT<sp/>subsystem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DCT_ISLOW_SUPPORTED</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>This<sp/>module<sp/>is<sp/>specialized<sp/>to<sp/>the<sp/>case<sp/>DCTSIZE<sp/>=<sp/>8.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DCTSIZE<sp/>!=<sp/>8</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>Sorry,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>code<sp/>only<sp/>copes<sp/>with<sp/>8x8<sp/>DCTs.<sp/></highlight><highlight class="comment">/*<sp/>deliberate<sp/>syntax<sp/>err<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>The<sp/>poop<sp/>on<sp/>this<sp/>scaling<sp/>stuff<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Each<sp/>1-D<sp/>IDCT<sp/>step<sp/>produces<sp/>outputs<sp/>which<sp/>are<sp/>a<sp/>factor<sp/>of<sp/>sqrt(N)</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>larger<sp/>than<sp/>the<sp/>true<sp/>IDCT<sp/>outputs.<sp/><sp/>The<sp/>final<sp/>outputs<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>a<sp/>factor<sp/>of<sp/>N<sp/>larger<sp/>than<sp/>desired;<sp/>since<sp/>N=8<sp/>this<sp/>can<sp/>be<sp/>cured<sp/>by</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>a<sp/>simple<sp/>right<sp/>shift<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>algorithm.<sp/><sp/>The<sp/>advantage<sp/>of</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>this<sp/>arrangement<sp/>is<sp/>that<sp/>we<sp/>save<sp/>two<sp/>multiplications<sp/>per<sp/>1-D<sp/>IDCT,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>because<sp/>the<sp/>y0<sp/>and<sp/>y4<sp/>inputs<sp/>need<sp/>not<sp/>be<sp/>divided<sp/>by<sp/>sqrt(N).</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>We<sp/>have<sp/>to<sp/>do<sp/>addition<sp/>and<sp/>subtraction<sp/>of<sp/>the<sp/>integer<sp/>inputs,<sp/>which</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>is<sp/>no<sp/>problem,<sp/>and<sp/>multiplication<sp/>by<sp/>fractional<sp/>constants,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>a<sp/>problem<sp/>to<sp/>do<sp/>in<sp/>integer<sp/>arithmetic.<sp/><sp/>We<sp/>multiply<sp/>all<sp/>the<sp/>constants</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>by<sp/>CONST_SCALE<sp/>and<sp/>convert<sp/>them<sp/>to<sp/>integer<sp/>constants<sp/>(thus<sp/>retaining</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>CONST_BITS<sp/>bits<sp/>of<sp/>precision<sp/>in<sp/>the<sp/>constants).<sp/><sp/>After<sp/>doing<sp/>a</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>multiplication<sp/>we<sp/>have<sp/>to<sp/>divide<sp/>the<sp/>product<sp/>by<sp/>CONST_SCALE,<sp/>with<sp/>proper</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>rounding,<sp/>to<sp/>produce<sp/>the<sp/>correct<sp/>output.<sp/><sp/>This<sp/>division<sp/>can<sp/>be<sp/>done</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>cheaply<sp/>as<sp/>a<sp/>right<sp/>shift<sp/>of<sp/>CONST_BITS<sp/>bits.<sp/><sp/>We<sp/>postpone<sp/>shifting</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>as<sp/>long<sp/>as<sp/>possible<sp/>so<sp/>that<sp/>partial<sp/>sums<sp/>can<sp/>be<sp/>added<sp/>together<sp/>with</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>full<sp/>fractional<sp/>precision.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>The<sp/>outputs<sp/>of<sp/>the<sp/>first<sp/>pass<sp/>are<sp/>scaled<sp/>up<sp/>by<sp/>PASS1_BITS<sp/>bits<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>they<sp/>are<sp/>represented<sp/>to<sp/>better-than-integral<sp/>precision.<sp/><sp/>These<sp/>outputs</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>require<sp/>BITS_IN_JSAMPLE<sp/>+<sp/>PASS1_BITS<sp/>+<sp/>3<sp/>bits;<sp/>this<sp/>fits<sp/>in<sp/>a<sp/>16-bit<sp/>word</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>recommended<sp/>scaling.<sp/><sp/>(To<sp/>scale<sp/>up<sp/>12-bit<sp/>sample<sp/>data<sp/>further,<sp/>an</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>intermediate<sp/>INT32<sp/>array<sp/>would<sp/>be<sp/>needed.)</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>To<sp/>avoid<sp/>overflow<sp/>of<sp/>the<sp/>32-bit<sp/>intermediate<sp/>results<sp/>in<sp/>pass<sp/>2,<sp/>we<sp/>must</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>have<sp/>BITS_IN_JSAMPLE<sp/>+<sp/>CONST_BITS<sp/>+<sp/>PASS1_BITS<sp/>&lt;=<sp/>26.<sp/><sp/>Error<sp/>analysis</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>shows<sp/>that<sp/>the<sp/>values<sp/>given<sp/>below<sp/>are<sp/>the<sp/>most<sp/>effective.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONST_BITS<sp/><sp/>13</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PASS1_BITS<sp/><sp/>2</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONST_BITS<sp/><sp/>13</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PASS1_BITS<sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lose<sp/>a<sp/>little<sp/>precision<sp/>to<sp/>avoid<sp/>overflow<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>C<sp/>compilers<sp/>fail<sp/>to<sp/>reduce<sp/>&quot;FIX(constant)&quot;<sp/>at<sp/>compile<sp/>time,<sp/>thus</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>causing<sp/>a<sp/>lot<sp/>of<sp/>useless<sp/>floating-point<sp/>operations<sp/>at<sp/>run<sp/>time.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>To<sp/>get<sp/>around<sp/>this<sp/>we<sp/>use<sp/>the<sp/>following<sp/>pre-calculated<sp/>constants.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>change<sp/>CONST_BITS<sp/>you<sp/>may<sp/>want<sp/>to<sp/>add<sp/>appropriate<sp/>values.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>(With<sp/>a<sp/>reasonable<sp/>C<sp/>compiler,<sp/>you<sp/>can<sp/>just<sp/>rely<sp/>on<sp/>the<sp/>FIX()<sp/>macro...)</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONST_BITS<sp/>==<sp/>13</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_298631336<sp/><sp/>((INT32)<sp/><sp/>2446)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(0.298631336)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_390180644<sp/><sp/>((INT32)<sp/><sp/>3196)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(0.390180644)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_541196100<sp/><sp/>((INT32)<sp/><sp/>4433)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(0.541196100)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_765366865<sp/><sp/>((INT32)<sp/><sp/>6270)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(0.765366865)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_899976223<sp/><sp/>((INT32)<sp/><sp/>7373)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(0.899976223)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_175875602<sp/><sp/>((INT32)<sp/><sp/>9633)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.175875602)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_501321110<sp/><sp/>((INT32)<sp/><sp/>12299)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.501321110)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_847759065<sp/><sp/>((INT32)<sp/><sp/>15137)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.847759065)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_961570560<sp/><sp/>((INT32)<sp/><sp/>16069)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(1.961570560)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_053119869<sp/><sp/>((INT32)<sp/><sp/>16819)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(2.053119869)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_562915447<sp/><sp/>((INT32)<sp/><sp/>20995)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(2.562915447)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_3_072711026<sp/><sp/>((INT32)<sp/><sp/>25172)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIX(3.072711026)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_298631336<sp/><sp/>FIX(0.298631336)</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_390180644<sp/><sp/>FIX(0.390180644)</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_541196100<sp/><sp/>FIX(0.541196100)</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_765366865<sp/><sp/>FIX(0.765366865)</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_0_899976223<sp/><sp/>FIX(0.899976223)</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_175875602<sp/><sp/>FIX(1.175875602)</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_501321110<sp/><sp/>FIX(1.501321110)</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_847759065<sp/><sp/>FIX(1.847759065)</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_1_961570560<sp/><sp/>FIX(1.961570560)</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_053119869<sp/><sp/>FIX(2.053119869)</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_2_562915447<sp/><sp/>FIX(2.562915447)</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FIX_3_072711026<sp/><sp/>FIX(3.072711026)</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Multiply<sp/>an<sp/>INT32<sp/>variable<sp/>by<sp/>an<sp/>INT32<sp/>constant<sp/>to<sp/>yield<sp/>an<sp/>INT32<sp/>result.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>For<sp/>8-bit<sp/>samples<sp/>with<sp/>the<sp/>recommended<sp/>scaling,<sp/>all<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>and<sp/>constant<sp/>values<sp/>involved<sp/>are<sp/>no<sp/>more<sp/>than<sp/>16<sp/>bits<sp/>wide,<sp/>so<sp/>a</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>16x16-&gt;32<sp/>bit<sp/>multiply<sp/>can<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>a<sp/>full<sp/>32x32<sp/>multiply.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>For<sp/>12-bit<sp/>samples,<sp/>a<sp/>full<sp/>32-bit<sp/>multiplication<sp/>will<sp/>be<sp/>needed.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MULTIPLY(var,const)<sp/><sp/>MULTIPLY16C16(var,const)</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MULTIPLY(var,const)<sp/><sp/>((var)<sp/>*<sp/>(const))</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dequantize<sp/>a<sp/>coefficient<sp/>by<sp/>multiplying<sp/>it<sp/>by<sp/>the<sp/>multiplier-table</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>entry;<sp/>produce<sp/>an<sp/>int<sp/>result.<sp/><sp/>In<sp/>this<sp/>module,<sp/>both<sp/>inputs<sp/>and<sp/>result</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>are<sp/>16<sp/>bits<sp/>or<sp/>less,<sp/>so<sp/>either<sp/>int<sp/>or<sp/>short<sp/>multiply<sp/>will<sp/>work.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEQUANTIZE(coef,quantval)<sp/><sp/>(((ISLOW_MULT_TYPE)<sp/>(coef))<sp/>*<sp/>(quantval))</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>Perform<sp/>dequantization<sp/>and<sp/>inverse<sp/>DCT<sp/>on<sp/>one<sp/>block<sp/>of<sp/>coefficients.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">jpeg_idct_islow<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/><ref refid="structjpeg__component__info" kindref="compound">jpeg_component_info</ref><sp/>*<sp/>compptr,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JCOEFPTR<sp/>coef_block,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/>JDIMENSION<sp/>output_col)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>INT32<sp/>tmp0,<sp/>tmp1,<sp/>tmp2,<sp/>tmp3;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>INT32<sp/>tmp10,<sp/>tmp11,<sp/>tmp12,<sp/>tmp13;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>INT32<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>JCOEFPTR<sp/>inptr;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>ISLOW_MULT_TYPE<sp/>*<sp/>quantptr;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>wsptr;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>outptr;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>JSAMPLE<sp/>*range_limit<sp/>=<sp/>IDCT_range_limit(cinfo);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctr;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workspace[DCTSIZE2];<sp/><sp/></highlight><highlight class="comment">/*<sp/>buffers<sp/>data<sp/>between<sp/>passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>SHIFT_TEMPS</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>1:<sp/>process<sp/>columns<sp/>from<sp/>input,<sp/>store<sp/>into<sp/>work<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>results<sp/>are<sp/>scaled<sp/>up<sp/>by<sp/>sqrt(8)<sp/>compared<sp/>to<sp/>a<sp/>true<sp/>IDCT;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>furthermore,<sp/>we<sp/>scale<sp/>the<sp/>results<sp/>by<sp/>2**PASS1_BITS.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>inptr<sp/>=<sp/>coef_block;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>quantptr<sp/>=<sp/>(ISLOW_MULT_TYPE<sp/>*)<sp/>compptr-&gt;dct_table;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>wsptr<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>for<sp/>(ctr<sp/>=<sp/>DCTSIZE;<sp/>ctr<sp/>&gt;<sp/>0;<sp/>ctr--)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Due<sp/>to<sp/>quantization,<sp/>we<sp/>will<sp/>usually<sp/>find<sp/>that<sp/>many<sp/>of<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>coefficients<sp/>are<sp/>zero,<sp/>especially<sp/>the<sp/>AC<sp/>terms.<sp/><sp/>We<sp/>can<sp/>exploit<sp/>this</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>short-circuiting<sp/>the<sp/>IDCT<sp/>calculation<sp/>for<sp/>any<sp/>column<sp/>in<sp/>which<sp/>all</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>AC<sp/>terms<sp/>are<sp/>zero.<sp/><sp/>In<sp/>that<sp/>case<sp/>each<sp/>output<sp/>is<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DC<sp/>coefficient<sp/>(with<sp/>scale<sp/>factor<sp/>as<sp/>needed).</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>With<sp/>typical<sp/>images<sp/>and<sp/>quantization<sp/>tables,<sp/>half<sp/>or<sp/>more<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>column<sp/>DCT<sp/>calculations<sp/>can<sp/>be<sp/>simplified<sp/>this<sp/>way.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inptr[DCTSIZE*1]<sp/>|<sp/>inptr[DCTSIZE*2]<sp/>|<sp/>inptr[DCTSIZE*3]<sp/>|</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inptr[DCTSIZE*4]<sp/>|<sp/>inptr[DCTSIZE*5]<sp/>|<sp/>inptr[DCTSIZE*6]<sp/>|</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inptr[DCTSIZE*7])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>terms<sp/>all<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcval<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*0],<sp/>quantptr[DCTSIZE*0])<sp/>&lt;&lt;<sp/>PASS1_BITS;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*0]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*1]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*2]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*3]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*4]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*5]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*6]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*7]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inptr++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointers<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quantptr++;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr++;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Even<sp/>part:<sp/>reverse<sp/>the<sp/>even<sp/>part<sp/>of<sp/>the<sp/>forward<sp/>DCT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rotator<sp/>is<sp/>sqrt(2)*c(-6).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*2],<sp/>quantptr[DCTSIZE*2]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*6],<sp/>quantptr[DCTSIZE*6]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>MULTIPLY(z2<sp/>+<sp/>z3,<sp/>FIX_0_541196100);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>z1<sp/>+<sp/>MULTIPLY(z3,<sp/>-<sp/>FIX_1_847759065);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>z1<sp/>+<sp/>MULTIPLY(z2,<sp/>FIX_0_765366865);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*0],<sp/>quantptr[DCTSIZE*0]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*4],<sp/>quantptr[DCTSIZE*4]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>(z2<sp/>+<sp/>z3)<sp/>&lt;&lt;<sp/>CONST_BITS;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>(z2<sp/>-<sp/>z3)<sp/>&lt;&lt;<sp/>CONST_BITS;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>tmp0<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp13<sp/>=<sp/>tmp0<sp/>-<sp/>tmp3;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>tmp1<sp/>-<sp/>tmp2;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Odd<sp/>part<sp/>per<sp/>figure<sp/>8;<sp/>the<sp/>matrix<sp/>is<sp/>unitary<sp/>and<sp/>hence<sp/>its</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>transpose<sp/>is<sp/>its<sp/>inverse.<sp/><sp/>i0..i3<sp/>are<sp/>y7,y5,y3,y1<sp/>respectively.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*7],<sp/>quantptr[DCTSIZE*7]);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*5],<sp/>quantptr[DCTSIZE*5]);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*3],<sp/>quantptr[DCTSIZE*3]);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>DEQUANTIZE(inptr[DCTSIZE*1],<sp/>quantptr[DCTSIZE*1]);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>tmp0<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>tmp0<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>=<sp/>tmp1<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>z5<sp/>=<sp/>MULTIPLY(z3<sp/>+<sp/>z4,<sp/>FIX_1_175875602);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>c3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>MULTIPLY(tmp0,<sp/>FIX_0_298631336);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c1+c3+c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>MULTIPLY(tmp1,<sp/>FIX_2_053119869);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3-c5+c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>MULTIPLY(tmp2,<sp/>FIX_3_072711026);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3+c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>MULTIPLY(tmp3,<sp/>FIX_1_501321110);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3-c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>MULTIPLY(z1,<sp/>-<sp/>FIX_0_899976223);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(c7-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>MULTIPLY(z2,<sp/>-<sp/>FIX_2_562915447);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c1-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>MULTIPLY(z3,<sp/>-<sp/>FIX_1_961570560);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c3-c5)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>=<sp/>MULTIPLY(z4,<sp/>-<sp/>FIX_0_390180644);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(c5-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>+=<sp/>z5;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>+=<sp/>z5;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>+=<sp/>z1<sp/>+<sp/>z3;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>+=<sp/>z2<sp/>+<sp/>z4;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>+=<sp/>z2<sp/>+<sp/>z3;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>+=<sp/>z1<sp/>+<sp/>z4;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>output<sp/>stage:<sp/>inputs<sp/>are<sp/>tmp10..tmp13,<sp/>tmp0..tmp3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*0]<sp/>=<sp/>(int)<sp/>DESCALE(tmp10<sp/>+<sp/>tmp3,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*7]<sp/>=<sp/>(int)<sp/>DESCALE(tmp10<sp/>-<sp/>tmp3,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*1]<sp/>=<sp/>(int)<sp/>DESCALE(tmp11<sp/>+<sp/>tmp2,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*6]<sp/>=<sp/>(int)<sp/>DESCALE(tmp11<sp/>-<sp/>tmp2,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*2]<sp/>=<sp/>(int)<sp/>DESCALE(tmp12<sp/>+<sp/>tmp1,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*5]<sp/>=<sp/>(int)<sp/>DESCALE(tmp12<sp/>-<sp/>tmp1,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*3]<sp/>=<sp/>(int)<sp/>DESCALE(tmp13<sp/>+<sp/>tmp0,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr[DCTSIZE*4]<sp/>=<sp/>(int)<sp/>DESCALE(tmp13<sp/>-<sp/>tmp0,<sp/>CONST_BITS-PASS1_BITS);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>inptr++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointers<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>quantptr++;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr++;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>2:<sp/>process<sp/>rows<sp/>from<sp/>work<sp/>array,<sp/>store<sp/>into<sp/>output<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>we<sp/>must<sp/>descale<sp/>the<sp/>results<sp/>by<sp/>a<sp/>factor<sp/>of<sp/>8<sp/>==<sp/>2**3,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>also<sp/>undo<sp/>the<sp/>PASS1_BITS<sp/>scaling.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>wsptr<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ctr<sp/>=<sp/>0;<sp/>ctr<sp/>&lt;<sp/>DCTSIZE;<sp/>ctr++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr<sp/>=<sp/>output_buf[ctr]<sp/>+<sp/>output_col;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rows<sp/>of<sp/>zeroes<sp/>can<sp/>be<sp/>exploited<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>we<sp/>did<sp/>with<sp/>columns.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>However,<sp/>the<sp/>column<sp/>calculation<sp/>has<sp/>created<sp/>many<sp/>nonzero<sp/>AC<sp/>terms,<sp/>so</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>simplification<sp/>applies<sp/>less<sp/>often<sp/>(typically<sp/>5%<sp/>to<sp/>10%<sp/>of<sp/>the<sp/>time).</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>On<sp/>machines<sp/>with<sp/>very<sp/>fast<sp/>multiplication,<sp/>it&apos;s<sp/>possible<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>test<sp/>takes<sp/>more<sp/>time<sp/>than<sp/>it&apos;s<sp/>worth.<sp/><sp/>In<sp/>that<sp/>case<sp/>this<sp/>section</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>be<sp/>commented<sp/>out.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ZERO_ROW_TEST</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((wsptr[1]<sp/>|<sp/>wsptr[2]<sp/>|<sp/>wsptr[3]<sp/>|<sp/>wsptr[4]<sp/>|<sp/>wsptr[5]<sp/>|<sp/>wsptr[6]<sp/>|</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>wsptr[7])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AC<sp/>terms<sp/>all<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPLE<sp/>dcval<sp/>=<sp/>range_limit[(int)<sp/>DESCALE((INT32)<sp/>wsptr[0],<sp/>PASS1_BITS+3)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[0]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[1]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[2]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[3]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[4]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[5]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[6]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outptr[7]<sp/>=<sp/>dcval;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wsptr<sp/>+=<sp/>DCTSIZE;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointer<sp/>to<sp/>next<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Even<sp/>part:<sp/>reverse<sp/>the<sp/>even<sp/>part<sp/>of<sp/>the<sp/>forward<sp/>DCT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rotator<sp/>is<sp/>sqrt(2)*c(-6).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>(INT32)<sp/>wsptr[2];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>(INT32)<sp/>wsptr[6];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>MULTIPLY(z2<sp/>+<sp/>z3,<sp/>FIX_0_541196100);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>z1<sp/>+<sp/>MULTIPLY(z3,<sp/>-<sp/>FIX_1_847759065);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>z1<sp/>+<sp/>MULTIPLY(z2,<sp/>FIX_0_765366865);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>((INT32)<sp/>wsptr[0]<sp/>+<sp/>(INT32)<sp/>wsptr[4])<sp/>&lt;&lt;<sp/>CONST_BITS;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>((INT32)<sp/>wsptr[0]<sp/>-<sp/>(INT32)<sp/>wsptr[4])<sp/>&lt;&lt;<sp/>CONST_BITS;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp10<sp/>=<sp/>tmp0<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp13<sp/>=<sp/>tmp0<sp/>-<sp/>tmp3;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp11<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp12<sp/>=<sp/>tmp1<sp/>-<sp/>tmp2;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Odd<sp/>part<sp/>per<sp/>figure<sp/>8;<sp/>the<sp/>matrix<sp/>is<sp/>unitary<sp/>and<sp/>hence<sp/>its</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>transpose<sp/>is<sp/>its<sp/>inverse.<sp/><sp/>i0..i3<sp/>are<sp/>y7,y5,y3,y1<sp/>respectively.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>(INT32)<sp/>wsptr[7];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>(INT32)<sp/>wsptr[5];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>(INT32)<sp/>wsptr[3];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>(INT32)<sp/>wsptr[1];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>tmp0<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>tmp0<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>=<sp/>tmp1<sp/>+<sp/>tmp3;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>z5<sp/>=<sp/>MULTIPLY(z3<sp/>+<sp/>z4,<sp/>FIX_1_175875602);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>c3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>MULTIPLY(tmp0,<sp/>FIX_0_298631336);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c1+c3+c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>MULTIPLY(tmp1,<sp/>FIX_2_053119869);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3-c5+c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>MULTIPLY(tmp2,<sp/>FIX_3_072711026);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3+c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>MULTIPLY(tmp3,<sp/>FIX_1_501321110);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(<sp/>c1+c3-c5-c7)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>MULTIPLY(z1,<sp/>-<sp/>FIX_0_899976223);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(c7-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>MULTIPLY(z2,<sp/>-<sp/>FIX_2_562915447);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c1-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>MULTIPLY(z3,<sp/>-<sp/>FIX_1_961570560);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(-c3-c5)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>=<sp/>MULTIPLY(z4,<sp/>-<sp/>FIX_0_390180644);<sp/></highlight><highlight class="comment">/*<sp/>sqrt(2)<sp/>*<sp/>(c5-c3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>z3<sp/>+=<sp/>z5;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>z4<sp/>+=<sp/>z5;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>+=<sp/>z1<sp/>+<sp/>z3;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp1<sp/>+=<sp/>z2<sp/>+<sp/>z4;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp2<sp/>+=<sp/>z2<sp/>+<sp/>z3;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp3<sp/>+=<sp/>z1<sp/>+<sp/>z4;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>output<sp/>stage:<sp/>inputs<sp/>are<sp/>tmp10..tmp13,<sp/>tmp0..tmp3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[0]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp10<sp/>+<sp/>tmp3,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[7]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp10<sp/>-<sp/>tmp3,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[1]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp11<sp/>+<sp/>tmp2,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[6]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp11<sp/>-<sp/>tmp2,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[2]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp12<sp/>+<sp/>tmp1,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[5]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp12<sp/>-<sp/>tmp1,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[3]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp13<sp/>+<sp/>tmp0,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>outptr[4]<sp/>=<sp/>range_limit[(int)<sp/>DESCALE(tmp13<sp/>-<sp/>tmp0,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST_BITS+PASS1_BITS+3)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RANGE_MASK];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>wsptr<sp/>+=<sp/>DCTSIZE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>pointer<sp/>to<sp/>next<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DCT_ISLOW_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jidctint.c"/>
  </compounddef>
</doxygen>
