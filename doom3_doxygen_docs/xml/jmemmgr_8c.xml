<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jmemmgr_8c" kind="file">
    <compoundname>jmemmgr.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jmemsys_8h" local="yes">jmemsys.h</includes>
    <innerclass refid="unionsmall__pool__struct" prot="public">small_pool_struct</innerclass>
    <innerclass refid="unionlarge__pool__struct" prot="public">large_pool_struct</innerclass>
    <innerclass refid="structmy__memory__mgr" prot="public">my_memory_mgr</innerclass>
    <innerclass refid="structjvirt__sarray__control" prot="public">jvirt_sarray_control</innerclass>
    <innerclass refid="structjvirt__barray__control" prot="public">jvirt_barray_control</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jmemmgr_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="27" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemmgr_8c_1a1dd80ae41a92e481335567a380438f7c" prot="public" static="no">
        <name>AM_MEMORY_MANAGER</name>
        <initializer>/* we define jvirt_Xarray_control structs */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="28" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemmgr_8c_1a4781c052bb138f69ef6d60737fd569e3" prot="public" static="no">
        <name>ALIGN_TYPE</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="73" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemmgr_8c_1ac70aab3e20a16b5e85ceefe9f5909b85" prot="public" static="no">
        <name>MIN_SLOP</name>
        <initializer>50		/* greater than 0 to avoid futile looping */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="253" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jmemmgr_8c_1a589d78516510f4b5a5d44e28debeab4d" prot="public" static="no">
        <type>union <ref refid="unionsmall__pool__struct" kindref="compound">small_pool_struct</ref> *</type>
        <definition>typedef union small_pool_struct* small_pool_ptr</definition>
        <argsstring></argsstring>
        <name>small_pool_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jmemmgr_8c_1a308791de864d9cfbe842a32254b9b9c3" prot="public" static="no">
        <type>union <ref refid="unionsmall__pool__struct" kindref="compound">small_pool_struct</ref></type>
        <definition>typedef union small_pool_struct  small_pool_hdr</definition>
        <argsstring></argsstring>
        <name>small_pool_hdr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="98" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="jmemmgr_8c_1aabedc84592b40bbec311c5b0e4e63069" prot="public" static="no">
        <type>union <ref refid="unionlarge__pool__struct" kindref="compound">large_pool_struct</ref> *</type>
        <definition>typedef union large_pool_struct* large_pool_ptr</definition>
        <argsstring></argsstring>
        <name>large_pool_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jmemmgr_8c_1a0789231f3fea8fe327f4a9559b5737d2" prot="public" static="no">
        <type>union <ref refid="unionlarge__pool__struct" kindref="compound">large_pool_struct</ref></type>
        <definition>typedef union large_pool_struct  large_pool_hdr</definition>
        <argsstring></argsstring>
        <name>large_pool_hdr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="109" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="jmemmgr_8c_1a75db5ffd6a7b20cd72892c9163628d88" prot="public" static="no">
        <type><ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref> *</type>
        <definition>typedef my_memory_mgr* my_mem_ptr</definition>
        <argsstring></argsstring>
        <name>my_mem_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="140" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="jmemmgr_8c_1ac78f28341a024f0da16635a60a37ca6d" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t first_pool_slop[2]</definition>
        <argsstring>[2]</argsstring>
        <name>first_pool_slop</name>
        <initializer>= 
{
	1600,			
	16000			
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="241" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="jmemmgr_8c_1a719bc5f00ff870a7afaa7891d4da15bb" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t extra_pool_slop[2]</definition>
        <argsstring>[2]</argsstring>
        <name>extra_pool_slop</name>
        <initializer>= 
{
	0,			
	5000			
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="247" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jmemmgr_8c_1a5ea610734a2c1e70dd2139e2bdc81f84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void out_of_memory</definition>
        <argsstring>(j_common_ptr cinfo, int which)</argsstring>
        <name>out_of_memory</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="217" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="217" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1ac050251835a5957eae482af9b1d46069" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* alloc_small</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, size_t sizeofobject)</argsstring>
        <name>alloc_small</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="257" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="257" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1add22dd6ec62cfddf098e59b74c1ea6bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* alloc_large</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, size_t sizeofobject)</argsstring>
        <name>alloc_large</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="342" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="342" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a2e12ea260f225db4e333f7066ef1a3a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JSAMPARRAY</type>
        <definition>static JSAMPARRAY alloc_sarray</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, JDIMENSION samplesperrow, JDIMENSION numrows)</argsstring>
        <name>alloc_sarray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>samplesperrow</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>numrows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="395" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="395" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a8b092cc9ee70810793b4425cd00001f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JBLOCKARRAY</type>
        <definition>static JBLOCKARRAY alloc_barray</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, JDIMENSION blocksperrow, JDIMENSION numrows)</argsstring>
        <name>alloc_barray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>blocksperrow</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>numrows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="443" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="443" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a26044d21c703c685506512a46a237d75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref></type>
        <definition>static jvirt_sarray_ptr request_virt_sarray</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, boolean pre_zero, JDIMENSION samplesperrow, JDIMENSION numrows, JDIMENSION maxaccess)</argsstring>
        <name>request_virt_sarray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>pre_zero</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>samplesperrow</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>numrows</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>maxaccess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="523" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="523" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a44543ea8ef385ee112bfdb87ea1fde41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref></type>
        <definition>static jvirt_barray_ptr request_virt_barray</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id, boolean pre_zero, JDIMENSION blocksperrow, JDIMENSION numrows, JDIMENSION maxaccess)</argsstring>
        <name>request_virt_barray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>pre_zero</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>blocksperrow</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>numrows</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>maxaccess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="553" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="553" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1ac9a27d878a45f078b995e60c69988750" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void realize_virt_arrays</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>realize_virt_arrays</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="583" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="583" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a0b2992917f6422b3cfd6e9ca525677a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void do_sarray_io</definition>
        <argsstring>(j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)</argsstring>
        <name>do_sarray_io</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>writing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="690" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="690" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a199fcd142d6f170b1cd0bec7433d14e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void do_barray_io</definition>
        <argsstring>(j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)</argsstring>
        <name>do_barray_io</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>writing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="723" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="723" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a952aff5d96a7fe7423d90751b43d554e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JSAMPARRAY</type>
        <definition>static JSAMPARRAY access_virt_sarray</definition>
        <argsstring>(j_common_ptr cinfo, jvirt_sarray_ptr ptr, JDIMENSION start_row, JDIMENSION num_rows, boolean writable)</argsstring>
        <name>access_virt_sarray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>start_row</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="756" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="756" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a5b06af1ddde2efed217223acc61ad7a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JBLOCKARRAY</type>
        <definition>static JBLOCKARRAY access_virt_barray</definition>
        <argsstring>(j_common_ptr cinfo, jvirt_barray_ptr ptr, JDIMENSION start_row, JDIMENSION num_rows, boolean writable)</argsstring>
        <name>access_virt_barray</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>start_row</declname>
        </param>
        <param>
          <type>JDIMENSION</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>writable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="841" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="841" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a49d057dc46521094217835444c82ab1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_pool</definition>
        <argsstring>(j_common_ptr cinfo, int pool_id)</argsstring>
        <name>free_pool</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pool_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="930" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="930" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1a1316316e3b3463a3e7556655a50a23aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void self_destruct</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>self_destruct</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="1002" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="1002" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="jmemmgr_8c_1ad373485a7024e3c851687df3f9ac2d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jinit_memory_mgr</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>jinit_memory_mgr</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" line="1028" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c" bodystart="1028" bodyend="1115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jmemmgr.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1991-1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>the<sp/>JPEG<sp/>system-independent<sp/>memory<sp/>management</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>routines.<sp/><sp/>This<sp/>code<sp/>is<sp/>usable<sp/>across<sp/>a<sp/>wide<sp/>variety<sp/>of<sp/>machines;<sp/>most</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>system<sp/>dependencies<sp/>have<sp/>been<sp/>isolated<sp/>in<sp/>a<sp/>separate<sp/>file.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>The<sp/>major<sp/>functions<sp/>provided<sp/>here<sp/>are:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>pool-based<sp/>allocation<sp/>and<sp/>freeing<sp/>of<sp/>memory;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>policy<sp/>decisions<sp/>about<sp/>how<sp/>to<sp/>divide<sp/>available<sp/>memory<sp/>among<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>virtual<sp/>arrays;</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>control<sp/>logic<sp/>for<sp/>swapping<sp/>virtual<sp/>arrays<sp/>between<sp/>main<sp/>memory<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>backing<sp/>storage.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>The<sp/>separate<sp/>system-dependent<sp/>file<sp/>provides<sp/>the<sp/>actual<sp/>backing-storage</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>access<sp/>code,<sp/>and<sp/>it<sp/>contains<sp/>the<sp/>policy<sp/>decision<sp/>about<sp/>how<sp/>much<sp/>total</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>main<sp/>memory<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>system-dependent<sp/>in<sp/>the<sp/>sense<sp/>that<sp/>some<sp/>of<sp/>its<sp/>functions</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>are<sp/>unnecessary<sp/>in<sp/>some<sp/>systems.<sp/><sp/>For<sp/>example,<sp/>if<sp/>there<sp/>is<sp/>enough<sp/>virtual</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>memory<sp/>so<sp/>that<sp/>backing<sp/>storage<sp/>will<sp/>never<sp/>be<sp/>used,<sp/>much<sp/>of<sp/>the<sp/>virtual</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>array<sp/>control<sp/>logic<sp/>could<sp/>be<sp/>removed.<sp/><sp/>(Of<sp/>course,<sp/>if<sp/>you<sp/>have<sp/>that<sp/>much</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>memory<sp/>then<sp/>you<sp/>shouldn&apos;t<sp/>care<sp/>about<sp/>a<sp/>little<sp/>bit<sp/>of<sp/>unused<sp/>code...)</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>AM_MEMORY_MANAGER<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>define<sp/>jvirt_Xarray_control<sp/>structs<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jmemsys.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>import<sp/>the<sp/>system-dependent<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_GETENV</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_STDLIB_H<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;stdlib.h&gt;<sp/>should<sp/>declare<sp/>getenv()<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>getenv<sp/>JPP((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>Some<sp/>important<sp/>notes:</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>allocation<sp/>routines<sp/>provided<sp/>here<sp/>must<sp/>never<sp/>return<sp/>NULL.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/>They<sp/>should<sp/>exit<sp/>to<sp/>error_exit<sp/>if<sp/>unsuccessful.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/>It&apos;s<sp/>not<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>try<sp/>to<sp/>merge<sp/>the<sp/>sarray<sp/>and<sp/>barray<sp/>routines,</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/>even<sp/>though<sp/>they<sp/>are<sp/>textually<sp/>almost<sp/>the<sp/>same,<sp/>because<sp/>samples<sp/>are</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/>usually<sp/>stored<sp/>as<sp/>bytes<sp/>while<sp/>coefficients<sp/>are<sp/>shorts<sp/>or<sp/>ints.<sp/><sp/>Thus,</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/>in<sp/>machines<sp/>where<sp/>byte<sp/>pointers<sp/>have<sp/>a<sp/>different<sp/>representation<sp/>from</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/>word<sp/>pointers,<sp/>the<sp/>resulting<sp/>machine<sp/>code<sp/>could<sp/>not<sp/>be<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Many<sp/>machines<sp/>require<sp/>storage<sp/>alignment:<sp/>longs<sp/>must<sp/>start<sp/>on<sp/>4-byte</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>boundaries,<sp/>doubles<sp/>on<sp/>8-byte<sp/>boundaries,<sp/>etc.<sp/><sp/>On<sp/>such<sp/>machines,<sp/>malloc()</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>always<sp/>returns<sp/>pointers<sp/>that<sp/>are<sp/>multiples<sp/>of<sp/>the<sp/>worst-case<sp/>alignment</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>requirement,<sp/>and<sp/>we<sp/>had<sp/>better<sp/>do<sp/>so<sp/>too.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>There<sp/>isn&apos;t<sp/>any<sp/>really<sp/>portable<sp/>way<sp/>to<sp/>determine<sp/>the<sp/>worst-case<sp/>alignment</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>requirement.<sp/><sp/>This<sp/>module<sp/>assumes<sp/>that<sp/>the<sp/>alignment<sp/>requirement<sp/>is</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>multiples<sp/>of<sp/>sizeof(ALIGN_TYPE).</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>By<sp/>default,<sp/>we<sp/>define<sp/>ALIGN_TYPE<sp/>as<sp/>double.<sp/><sp/>This<sp/>is<sp/>necessary<sp/>on<sp/>some</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>workstations<sp/>(where<sp/>doubles<sp/>really<sp/>do<sp/>need<sp/>8-byte<sp/>alignment)<sp/>and<sp/>will<sp/>work</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>fine<sp/>on<sp/>nearly<sp/>everything.<sp/><sp/>If<sp/>your<sp/>machine<sp/>has<sp/>lesser<sp/>alignment<sp/>needs,</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>you<sp/>can<sp/>save<sp/>a<sp/>few<sp/>bytes<sp/>by<sp/>making<sp/>ALIGN_TYPE<sp/>smaller.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>The<sp/>only<sp/>place<sp/>I<sp/>know<sp/>of<sp/>where<sp/>this<sp/>will<sp/>NOT<sp/>work<sp/>is<sp/>certain<sp/>Macintosh</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>680x0<sp/>compilers<sp/>that<sp/>define<sp/>double<sp/>as<sp/>a<sp/>10-byte<sp/>IEEE<sp/>extended<sp/>float.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Doing<sp/>10-byte<sp/>alignment<sp/>is<sp/>counterproductive<sp/>because<sp/>longwords<sp/>won&apos;t<sp/>be</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>aligned<sp/>well.<sp/><sp/>Put<sp/>&quot;#define<sp/>ALIGN_TYPE<sp/>long&quot;<sp/>in<sp/>jconfig.h<sp/>if<sp/>you<sp/>have</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>such<sp/>a<sp/>compiler.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ALIGN_TYPE<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>so<sp/>can<sp/>override<sp/>from<sp/>jconfig.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALIGN_TYPE<sp/><sp/>double</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>We<sp/>allocate<sp/>objects<sp/>from<sp/>&quot;pools&quot;,<sp/>where<sp/>each<sp/>pool<sp/>is<sp/>gotten<sp/>with<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>request<sp/>to<sp/>jpeg_get_small()<sp/>or<sp/>jpeg_get_large().<sp/><sp/>There<sp/>is<sp/>no<sp/>per-object</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>overhead<sp/>within<sp/>a<sp/>pool,<sp/>except<sp/>for<sp/>alignment<sp/>padding.<sp/><sp/>Each<sp/>pool<sp/>has<sp/>a</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>header<sp/>with<sp/>a<sp/>link<sp/>to<sp/>the<sp/>next<sp/>pool<sp/>of<sp/>the<sp/>same<sp/>class.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>Small<sp/>and<sp/>large<sp/>pool<sp/>headers<sp/>are<sp/>identical<sp/>except<sp/>that<sp/>the<sp/>latter&apos;s</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>link<sp/>pointer<sp/>must<sp/>be<sp/>FAR<sp/>on<sp/>80x86<sp/>machines.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>Notice<sp/>that<sp/>the<sp/>&quot;real&quot;<sp/>header<sp/>fields<sp/>are<sp/>union&apos;ed<sp/>with<sp/>a<sp/>dummy<sp/>ALIGN_TYPE</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>field.<sp/><sp/>This<sp/>forces<sp/>the<sp/>compiler<sp/>to<sp/>make<sp/>SIZEOF(small_pool_hdr)<sp/>a<sp/>multiple</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>alignment<sp/>requirement<sp/>of<sp/>ALIGN_TYPE.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionsmall__pool__struct" kindref="compound">small_pool_struct</ref><sp/>*<sp/><ref refid="unionsmall__pool__struct" kindref="compound">small_pool_ptr</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="unionsmall__pool__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionsmall__pool__struct" kindref="compound">small_pool_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>small_pool_ptr<sp/>next;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>in<sp/>list<sp/>of<sp/>pools<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_used;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>bytes<sp/>already<sp/>used<sp/>within<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_left;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>still<sp/>available<sp/>in<sp/>this<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}<sp/>hdr;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>ALIGN_TYPE<sp/>dummy;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>included<sp/>in<sp/>union<sp/>to<sp/>ensure<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><ref refid="unionsmall__pool__struct" kindref="compound">small_pool_hdr</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionlarge__pool__struct" kindref="compound">large_pool_struct</ref><sp/>FAR<sp/>*<sp/><ref refid="unionlarge__pool__struct" kindref="compound">large_pool_ptr</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="unionlarge__pool__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionlarge__pool__struct" kindref="compound">large_pool_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>large_pool_ptr<sp/>next;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>in<sp/>list<sp/>of<sp/>pools<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_used;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>bytes<sp/>already<sp/>used<sp/>within<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_left;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>still<sp/>available<sp/>in<sp/>this<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}<sp/>hdr;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ALIGN_TYPE<sp/>dummy;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>included<sp/>in<sp/>union<sp/>to<sp/>ensure<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>Here<sp/>is<sp/>the<sp/>full<sp/>definition<sp/>of<sp/>a<sp/>memory<sp/>manager<sp/>object.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structmy__memory__mgr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__memory__mgr" kindref="compound">jpeg_memory_mgr</ref><sp/>pub;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Each<sp/>pool<sp/>identifier<sp/>(lifetime<sp/>class)<sp/>names<sp/>a<sp/>linked<sp/>list<sp/>of<sp/>pools.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>small_pool_ptr<sp/>small_list[JPOOL_NUMPOOLS];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>large_pool_ptr<sp/>large_list[JPOOL_NUMPOOLS];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>we<sp/>only<sp/>have<sp/>one<sp/>lifetime<sp/>class<sp/>of<sp/>virtual<sp/>arrays,<sp/>only<sp/>one</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>*<sp/>linked<sp/>list<sp/>is<sp/>necessary<sp/>(for<sp/>each<sp/>datatype).<sp/><sp/>Note<sp/>that<sp/>the<sp/>virtual</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>*<sp/>array<sp/>control<sp/>blocks<sp/>being<sp/>linked<sp/>together<sp/>are<sp/>actually<sp/>stored<sp/>somewhere</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>small-pool<sp/>list.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>virt_sarray_list;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>virt_barray_list;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>counts<sp/>total<sp/>space<sp/>obtained<sp/>from<sp/>jpeg_get_small/large<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total_space_allocated;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>alloc_sarray<sp/>and<sp/>alloc_barray<sp/>set<sp/>this<sp/>value<sp/>for<sp/>use<sp/>by<sp/>virtual</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*<sp/>array<sp/>routines.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>last_rowsperchunk;<sp/></highlight><highlight class="comment">/*<sp/>from<sp/>most<sp/>recent<sp/>alloc_sarray/barray<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/><ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref><sp/>*<sp/><ref refid="structmy__memory__mgr" kindref="compound">my_mem_ptr</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>The<sp/>control<sp/>blocks<sp/>for<sp/>virtual<sp/>arrays.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>these<sp/>blocks<sp/>are<sp/>allocated<sp/>in<sp/>the<sp/>&quot;small&quot;<sp/>pool<sp/>area.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>System-dependent<sp/>info<sp/>for<sp/>the<sp/>associated<sp/>backing<sp/>store<sp/>(if<sp/>any)<sp/>is<sp/>hidden</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>inside<sp/>the<sp/>backing_store_info<sp/>struct.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="structjvirt__sarray__control" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_control</ref><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>mem_buffer;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>the<sp/>in-memory<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rows_in_array;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>virtual<sp/>array<sp/>height<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>samplesperrow;<sp/></highlight><highlight class="comment">/*<sp/>width<sp/>of<sp/>array<sp/>(and<sp/>of<sp/>memory<sp/>buffer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>maxaccess;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>rows<sp/>accessed<sp/>by<sp/>access_virt_sarray<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rows_in_mem;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>height<sp/>of<sp/>memory<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rowsperchunk;<sp/><sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>chunk<sp/>size<sp/>in<sp/>mem_buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>cur_start_row;<sp/></highlight><highlight class="comment">/*<sp/>first<sp/>logical<sp/>row<sp/>#<sp/>in<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>first_undef_row;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>row<sp/>#<sp/>of<sp/>first<sp/>uninitialized<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>pre_zero;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pre-zero<sp/>mode<sp/>requested?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>dirty;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>current<sp/>buffer<sp/>contents<sp/>need<sp/>written?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>b_s_open;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>backing-store<sp/>data<sp/>valid?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>next;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>link<sp/>to<sp/>next<sp/>virtual<sp/>sarray<sp/>control<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_info</ref><sp/>b_s_info;<sp/><sp/></highlight><highlight class="comment">/*<sp/>System-dependent<sp/>control<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="structjvirt__barray__control" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_control</ref><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>JBLOCKARRAY<sp/>mem_buffer;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>the<sp/>in-memory<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rows_in_array;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>virtual<sp/>array<sp/>height<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>blocksperrow;<sp/><sp/></highlight><highlight class="comment">/*<sp/>width<sp/>of<sp/>array<sp/>(and<sp/>of<sp/>memory<sp/>buffer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>maxaccess;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>rows<sp/>accessed<sp/>by<sp/>access_virt_barray<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rows_in_mem;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>height<sp/>of<sp/>memory<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rowsperchunk;<sp/><sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>chunk<sp/>size<sp/>in<sp/>mem_buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>cur_start_row;<sp/></highlight><highlight class="comment">/*<sp/>first<sp/>logical<sp/>row<sp/>#<sp/>in<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>first_undef_row;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>row<sp/>#<sp/>of<sp/>first<sp/>uninitialized<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>pre_zero;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pre-zero<sp/>mode<sp/>requested?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>dirty;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>current<sp/>buffer<sp/>contents<sp/>need<sp/>written?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>b_s_open;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>backing-store<sp/>data<sp/>valid?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>next;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>link<sp/>to<sp/>next<sp/>virtual<sp/>barray<sp/>control<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_info</ref><sp/>b_s_info;<sp/><sp/></highlight><highlight class="comment">/*<sp/>System-dependent<sp/>control<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MEM_STATS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optional<sp/>extra<sp/>stuff<sp/>for<sp/>statistics<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">print_mem_stats<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>small_pool_ptr<sp/>shdr_ptr;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>large_pool_ptr<sp/>lhdr_ptr;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>this<sp/>is<sp/>only<sp/>a<sp/>debugging<sp/>stub,<sp/>we<sp/>can<sp/>cheat<sp/>a<sp/>little<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>*<sp/>fprintf<sp/>directly<sp/>rather<sp/>than<sp/>going<sp/>through<sp/>the<sp/>trace<sp/>message<sp/>code.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>helpful<sp/>because<sp/>message<sp/>parm<sp/>array<sp/>can&apos;t<sp/>handle<sp/>longs.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Freeing<sp/>pool<sp/>%d,<sp/>total<sp/>space<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool_id,<sp/>mem-&gt;total_space_allocated);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(lhdr_ptr<sp/>=<sp/>mem-&gt;large_list[pool_id];<sp/>lhdr_ptr<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhdr_ptr<sp/>=<sp/>lhdr_ptr-&gt;hdr.next)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Large<sp/>chunk<sp/>used<sp/>%ld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>lhdr_ptr-&gt;hdr.bytes_used);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shdr_ptr<sp/>=<sp/>mem-&gt;small_list[pool_id];<sp/>shdr_ptr<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr_ptr<sp/>=<sp/>shdr_ptr-&gt;hdr.next)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Small<sp/>chunk<sp/>used<sp/>%ld<sp/>free<sp/>%ld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>shdr_ptr-&gt;hdr.bytes_used,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>shdr_ptr-&gt;hdr.bytes_left);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MEM_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">out_of_memory<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Report<sp/>an<sp/>out-of-memory<sp/>error<sp/>and<sp/>stop<sp/>execution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>compiled<sp/>MEM_STATS<sp/>support,<sp/>report<sp/>alloc<sp/>requests<sp/>before<sp/>dying<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MEM_STATS</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>cinfo-&gt;err-&gt;trace_level<sp/>=<sp/>2;<sp/><sp/></highlight><highlight class="comment">/*<sp/>force<sp/>self_destruct<sp/>to<sp/>report<sp/>stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_OUT_OF_MEMORY,<sp/>which);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>Allocation<sp/>of<sp/>&quot;small&quot;<sp/>objects.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>For<sp/>these,<sp/>we<sp/>use<sp/>pooled<sp/>storage.<sp/><sp/>When<sp/>a<sp/>new<sp/>pool<sp/>must<sp/>be<sp/>created,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>we<sp/>try<sp/>to<sp/>get<sp/>enough<sp/>space<sp/>for<sp/>the<sp/>current<sp/>request<sp/>plus<sp/>a<sp/>&quot;slop&quot;<sp/>factor,</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>where<sp/>the<sp/>slop<sp/>will<sp/>be<sp/>the<sp/>amount<sp/>of<sp/>leftover<sp/>space<sp/>in<sp/>the<sp/>new<sp/>pool.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>The<sp/>speed<sp/>vs.<sp/>space<sp/>tradeoff<sp/>is<sp/>largely<sp/>determined<sp/>by<sp/>the<sp/>slop<sp/>values.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>A<sp/>different<sp/>slop<sp/>value<sp/>is<sp/>provided<sp/>for<sp/>each<sp/>pool<sp/>class<sp/>(lifetime),</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>and<sp/>we<sp/>also<sp/>distinguish<sp/>the<sp/>first<sp/>pool<sp/>of<sp/>a<sp/>class<sp/>from<sp/>later<sp/>ones.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>NOTE:<sp/>the<sp/>values<sp/>given<sp/>work<sp/>fairly<sp/>well<sp/>on<sp/>both<sp/>16-<sp/>and<sp/>32-bit-int</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>machines,<sp/>but<sp/>may<sp/>be<sp/>too<sp/>small<sp/>if<sp/>longs<sp/>are<sp/>64<sp/>bits<sp/>or<sp/>more.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first_pool_slop[JPOOL_NUMPOOLS]<sp/>=<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>1600,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>PERMANENT<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>16000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>IMAGE<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extra_pool_slop[JPOOL_NUMPOOLS]<sp/>=<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>additional<sp/>PERMANENT<sp/>pools<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>5000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>additional<sp/>IMAGE<sp/>pools<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN_SLOP<sp/><sp/>50<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>greater<sp/>than<sp/>0<sp/>to<sp/>avoid<sp/>futile<sp/>looping<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="normal">alloc_small<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>&quot;small&quot;<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>small_pool_ptr<sp/>hdr_ptr,<sp/>prev_hdr_ptr;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>data_ptr;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>odd_bytes,<sp/>min_request,<sp/>slop;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>unsatisfiable<sp/>request<sp/>(do<sp/>now<sp/>to<sp/>ensure<sp/>no<sp/>overflow<sp/>below)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>if<sp/>(sizeofobject<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(MAX_ALLOC_CHUNK-SIZEOF(<ref refid="unionsmall__pool__struct" kindref="compound">small_pool_hdr</ref>)))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>out_of_memory(cinfo,<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>request<sp/>exceeds<sp/>malloc&apos;s<sp/>ability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>up<sp/>the<sp/>requested<sp/>size<sp/>to<sp/>a<sp/>multiple<sp/>of<sp/>SIZEOF(ALIGN_TYPE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>odd_bytes<sp/>=<sp/>sizeofobject<sp/>%<sp/>SIZEOF(ALIGN_TYPE);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(odd_bytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeofobject<sp/>+=<sp/>SIZEOF(ALIGN_TYPE)<sp/>-<sp/>odd_bytes;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>space<sp/>is<sp/>available<sp/>in<sp/>any<sp/>existing<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool_id<sp/>&lt;<sp/>0<sp/>||<sp/>pool_id<sp/>&gt;=<sp/>JPOOL_NUMPOOLS)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_BAD_POOL_ID,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>prev_hdr_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>hdr_ptr<sp/>=<sp/>mem-&gt;small_list[pool_id];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(hdr_ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr_ptr-&gt;hdr.bytes_left<sp/>&gt;=<sp/>sizeofobject)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>found<sp/>pool<sp/>with<sp/>enough<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_hdr_ptr<sp/>=<sp/>hdr_ptr;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr_ptr<sp/>=<sp/>hdr_ptr-&gt;hdr.next;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Time<sp/>to<sp/>make<sp/>a<sp/>new<sp/>pool?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr_ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>min_request<sp/>is<sp/>what<sp/>we<sp/>need<sp/>now,<sp/>slop<sp/>is<sp/>what<sp/>will<sp/>be<sp/>leftover<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>min_request<sp/>=<sp/>sizeofobject<sp/>+<sp/>SIZEOF(<ref refid="unionsmall__pool__struct" kindref="compound">small_pool_hdr</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_hdr_ptr<sp/>==<sp/>NULL)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>pool<sp/>in<sp/>class?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slop<sp/>=<sp/>first_pool_slop[pool_id];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slop<sp/>=<sp/>extra_pool_slop[pool_id];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>ask<sp/>for<sp/>more<sp/>than<sp/>MAX_ALLOC_CHUNK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slop<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(MAX_ALLOC_CHUNK-min_request))</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slop<sp/>=<sp/>(size_t)<sp/>(MAX_ALLOC_CHUNK-min_request);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>get<sp/>space,<sp/>if<sp/>fail<sp/>reduce<sp/>slop<sp/>and<sp/>try<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdr_ptr<sp/>=<sp/>(small_pool_ptr)<sp/>jpeg_get_small(cinfo,<sp/>min_request<sp/>+<sp/>slop);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr_ptr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slop<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slop<sp/>&lt;<sp/>MIN_SLOP)<sp/><sp/></highlight><highlight class="comment">/*<sp/>give<sp/>up<sp/>when<sp/>it<sp/>gets<sp/>real<sp/>small<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>out_of_memory(cinfo,<sp/>2);<sp/></highlight><highlight class="comment">/*<sp/>jpeg_get_small<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;total_space_allocated<sp/>+=<sp/>min_request<sp/>+<sp/>slop;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Success,<sp/>initialize<sp/>the<sp/>new<sp/>pool<sp/>header<sp/>and<sp/>add<sp/>to<sp/>end<sp/>of<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr_ptr-&gt;hdr.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr_ptr-&gt;hdr.bytes_used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr_ptr-&gt;hdr.bytes_left<sp/>=<sp/>sizeofobject<sp/>+<sp/>slop;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_hdr_ptr<sp/>==<sp/>NULL)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>pool<sp/>in<sp/>class?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem-&gt;small_list[pool_id]<sp/>=<sp/>hdr_ptr;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_hdr_ptr-&gt;hdr.next<sp/>=<sp/>hdr_ptr;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>OK,<sp/>allocate<sp/>the<sp/>object<sp/>from<sp/>the<sp/>current<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>data_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(hdr_ptr<sp/>+<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>point<sp/>to<sp/>first<sp/>data<sp/>byte<sp/>in<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>data_ptr<sp/>+=<sp/>hdr_ptr-&gt;hdr.bytes_used;<sp/></highlight><highlight class="comment">/*<sp/>point<sp/>to<sp/>place<sp/>for<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>hdr_ptr-&gt;hdr.bytes_used<sp/>+=<sp/>sizeofobject;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>hdr_ptr-&gt;hdr.bytes_left<sp/>-=<sp/>sizeofobject;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>data_ptr;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>Allocation<sp/>of<sp/>&quot;large&quot;<sp/>objects.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>The<sp/>external<sp/>semantics<sp/>of<sp/>these<sp/>are<sp/>the<sp/>same<sp/>as<sp/>&quot;small&quot;<sp/>objects,</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>FAR<sp/>pointers<sp/>are<sp/>used<sp/>on<sp/>80x86.<sp/><sp/>However<sp/>the<sp/>pool</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>management<sp/>heuristics<sp/>are<sp/>quite<sp/>different.<sp/><sp/>We<sp/>assume<sp/>that<sp/>each</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>request<sp/>is<sp/>large<sp/>enough<sp/>that<sp/>it<sp/>may<sp/>as<sp/>well<sp/>be<sp/>passed<sp/>directly<sp/>to</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>jpeg_get_large;<sp/>the<sp/>pool<sp/>management<sp/>just<sp/>links<sp/>everything<sp/>together</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>so<sp/>that<sp/>we<sp/>can<sp/>free<sp/>it<sp/>all<sp/>on<sp/>demand.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>Note:<sp/>the<sp/>major<sp/>use<sp/>of<sp/>&quot;large&quot;<sp/>objects<sp/>is<sp/>in<sp/>JSAMPARRAY<sp/>and<sp/>JBLOCKARRAY</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>structures.<sp/><sp/>The<sp/>routines<sp/>that<sp/>create<sp/>these<sp/>structures<sp/>(see<sp/>below)</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>deliberately<sp/>bunch<sp/>rows<sp/>together<sp/>to<sp/>ensure<sp/>a<sp/>large<sp/>request<sp/>size.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="normal">alloc_large<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>&quot;large&quot;<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>large_pool_ptr<sp/>hdr_ptr;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>odd_bytes;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>unsatisfiable<sp/>request<sp/>(do<sp/>now<sp/>to<sp/>ensure<sp/>no<sp/>overflow<sp/>below)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>if<sp/>(sizeofobject<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(MAX_ALLOC_CHUNK-SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>)))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>out_of_memory(cinfo,<sp/>3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>request<sp/>exceeds<sp/>malloc&apos;s<sp/>ability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>up<sp/>the<sp/>requested<sp/>size<sp/>to<sp/>a<sp/>multiple<sp/>of<sp/>SIZEOF(ALIGN_TYPE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>odd_bytes<sp/>=<sp/>sizeofobject<sp/>%<sp/>SIZEOF(ALIGN_TYPE);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(odd_bytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeofobject<sp/>+=<sp/>SIZEOF(ALIGN_TYPE)<sp/>-<sp/>odd_bytes;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>make<sp/>a<sp/>new<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool_id<sp/>&lt;<sp/>0<sp/>||<sp/>pool_id<sp/>&gt;=<sp/>JPOOL_NUMPOOLS)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_BAD_POOL_ID,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>hdr_ptr<sp/>=<sp/>(large_pool_ptr)<sp/>jpeg_get_large(cinfo,<sp/>sizeofobject<sp/>+</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr_ptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>out_of_memory(cinfo,<sp/>4);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>jpeg_get_large<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>mem-&gt;total_space_allocated<sp/>+=<sp/>sizeofobject<sp/>+<sp/>SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Success,<sp/>initialize<sp/>the<sp/>new<sp/>pool<sp/>header<sp/>and<sp/>add<sp/>to<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>hdr_ptr-&gt;hdr.next<sp/>=<sp/>mem-&gt;large_list[pool_id];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>maintain<sp/>space<sp/>counts<sp/>in<sp/>each<sp/>pool<sp/>header<sp/>for<sp/>statistical<sp/>purposes,</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>*<sp/>even<sp/>though<sp/>they<sp/>are<sp/>not<sp/>needed<sp/>for<sp/>allocation.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>hdr_ptr-&gt;hdr.bytes_used<sp/>=<sp/>sizeofobject;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>hdr_ptr-&gt;hdr.bytes_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>mem-&gt;large_list[pool_id]<sp/>=<sp/>hdr_ptr;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>(hdr_ptr<sp/>+<sp/>1);<sp/></highlight><highlight class="comment">/*<sp/>point<sp/>to<sp/>first<sp/>data<sp/>byte<sp/>in<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>Creation<sp/>of<sp/>2-D<sp/>sample<sp/>arrays.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>The<sp/>pointers<sp/>are<sp/>in<sp/>near<sp/>heap,<sp/>the<sp/>samples<sp/>themselves<sp/>in<sp/>FAR<sp/>heap.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>To<sp/>minimize<sp/>allocation<sp/>overhead<sp/>and<sp/>to<sp/>allow<sp/>I/O<sp/>of<sp/>large<sp/>contiguous</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>blocks,<sp/>we<sp/>allocate<sp/>the<sp/>sample<sp/>rows<sp/>in<sp/>groups<sp/>of<sp/>as<sp/>many<sp/>rows<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>without<sp/>exceeding<sp/>MAX_ALLOC_CHUNK<sp/>total<sp/>bytes<sp/>per<sp/>allocation<sp/>request.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>NB:<sp/>the<sp/>virtual<sp/>array<sp/>control<sp/>routines,<sp/>later<sp/>in<sp/>this<sp/>file,<sp/>know<sp/>about</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>this<sp/>chunking<sp/>of<sp/>rows.<sp/><sp/>The<sp/>rowsperchunk<sp/>value<sp/>is<sp/>left<sp/>in<sp/>the<sp/>mem<sp/>manager</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>object<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>saved<sp/>away<sp/>if<sp/>this<sp/>sarray<sp/>is<sp/>the<sp/>workspace<sp/>for</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>a<sp/>virtual<sp/>array.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">METHODDEF<sp/>JSAMPARRAY</highlight></codeline>
<codeline lineno="395"><highlight class="normal">alloc_sarray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>samplesperrow,<sp/>JDIMENSION<sp/>numrows)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>2-D<sp/>sample<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>result;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>workspace;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rowsperchunk,<sp/>currow,<sp/>i;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ltemp;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>max<sp/>#<sp/>of<sp/>rows<sp/>allowed<sp/>in<sp/>one<sp/>allocation<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>ltemp<sp/>=<sp/>(MAX_ALLOC_CHUNK-SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>))<sp/>/</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>samplesperrow<sp/>*<sp/>SIZEOF(JSAMPLE));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_WIDTH_OVERFLOW);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>numrows)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>(JDIMENSION)<sp/>ltemp;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>numrows;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>mem-&gt;last_rowsperchunk<sp/>=<sp/>rowsperchunk;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>space<sp/>for<sp/>row<sp/>pointers<sp/>(small<sp/>object)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(JSAMPARRAY)<sp/>alloc_small(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(numrows<sp/>*<sp/>SIZEOF(JSAMPROW)));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>rows<sp/>themselves<sp/>(large<sp/>objects)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>currow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currow<sp/>&lt;<sp/>numrows)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>MIN(rowsperchunk,<sp/>numrows<sp/>-<sp/>currow);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>workspace<sp/>=<sp/>(JSAMPROW)<sp/>alloc_large(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>((size_t)<sp/>rowsperchunk<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>samplesperrow</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>SIZEOF(JSAMPLE)));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rowsperchunk;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[currow++]<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>workspace<sp/>+=<sp/>samplesperrow;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>Creation<sp/>of<sp/>2-D<sp/>coefficient-block<sp/>arrays.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>essentially<sp/>the<sp/>same<sp/>as<sp/>the<sp/>code<sp/>for<sp/>sample<sp/>arrays,<sp/>above.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">METHODDEF<sp/>JBLOCKARRAY</highlight></codeline>
<codeline lineno="443"><highlight class="normal">alloc_barray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>blocksperrow,<sp/>JDIMENSION<sp/>numrows)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>2-D<sp/>coefficient-block<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>JBLOCKARRAY<sp/>result;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>JBLOCKROW<sp/>workspace;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>rowsperchunk,<sp/>currow,<sp/>i;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ltemp;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>max<sp/>#<sp/>of<sp/>rows<sp/>allowed<sp/>in<sp/>one<sp/>allocation<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>ltemp<sp/>=<sp/>(MAX_ALLOC_CHUNK-SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>))<sp/>/</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>blocksperrow<sp/>*<sp/>SIZEOF(JBLOCK));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_WIDTH_OVERFLOW);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>numrows)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>(JDIMENSION)<sp/>ltemp;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>numrows;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>mem-&gt;last_rowsperchunk<sp/>=<sp/>rowsperchunk;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>space<sp/>for<sp/>row<sp/>pointers<sp/>(small<sp/>object)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(JBLOCKARRAY)<sp/>alloc_small(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(numrows<sp/>*<sp/>SIZEOF(JBLOCKROW)));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>rows<sp/>themselves<sp/>(large<sp/>objects)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>currow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currow<sp/>&lt;<sp/>numrows)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>rowsperchunk<sp/>=<sp/>MIN(rowsperchunk,<sp/>numrows<sp/>-<sp/>currow);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>workspace<sp/>=<sp/>(JBLOCKROW)<sp/>alloc_large(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>((size_t)<sp/>rowsperchunk<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>blocksperrow</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>SIZEOF(JBLOCK)));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rowsperchunk;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[currow++]<sp/>=<sp/>workspace;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>workspace<sp/>+=<sp/>blocksperrow;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>About<sp/>virtual<sp/>array<sp/>management:</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>&quot;normal&quot;<sp/>array<sp/>routines<sp/>are<sp/>only<sp/>used<sp/>to<sp/>allocate<sp/>strip<sp/>buffers</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>(as<sp/>wide<sp/>as<sp/>the<sp/>image,<sp/>but<sp/>just<sp/>a<sp/>few<sp/>rows<sp/>high).<sp/><sp/>Full-image-sized<sp/>buffers</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>are<sp/>handled<sp/>as<sp/>&quot;virtual&quot;<sp/>arrays.<sp/><sp/>The<sp/>array<sp/>is<sp/>still<sp/>accessed<sp/>a<sp/>strip<sp/>at<sp/>a</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>time,<sp/>but<sp/>the<sp/>memory<sp/>manager<sp/>must<sp/>save<sp/>the<sp/>whole<sp/>array<sp/>for<sp/>repeated</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>accesses.<sp/><sp/>The<sp/>intended<sp/>implementation<sp/>is<sp/>that<sp/>there<sp/>is<sp/>a<sp/>strip<sp/>buffer<sp/>in</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>memory<sp/>(as<sp/>high<sp/>as<sp/>is<sp/>possible<sp/>given<sp/>the<sp/>desired<sp/>memory<sp/>limit),<sp/>plus<sp/>a</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>backing<sp/>file<sp/>that<sp/>holds<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>The<sp/>request_virt_array<sp/>routines<sp/>are<sp/>told<sp/>the<sp/>total<sp/>size<sp/>of<sp/>the<sp/>image<sp/>and</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>rows<sp/>that<sp/>will<sp/>be<sp/>accessed<sp/>at<sp/>once.<sp/><sp/>The<sp/>in-memory</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>buffer<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>the<sp/>maxaccess<sp/>value.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/>The<sp/>request<sp/>routines<sp/>create<sp/>control<sp/>blocks<sp/>but<sp/>not<sp/>the<sp/>in-memory<sp/>buffers.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>That<sp/>is<sp/>postponed<sp/>until<sp/>realize_virt_arrays<sp/>is<sp/>called.<sp/><sp/>At<sp/>that<sp/>time<sp/>the</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/>total<sp/>amount<sp/>of<sp/>space<sp/>needed<sp/>is<sp/>known<sp/>(approximately,<sp/>anyway),<sp/>so<sp/>free</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>memory<sp/>can<sp/>be<sp/>divided<sp/>up<sp/>fairly.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>The<sp/>access_virt_array<sp/>routines<sp/>are<sp/>responsible<sp/>for<sp/>making<sp/>a<sp/>specific<sp/>strip</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>area<sp/>accessible<sp/>(after<sp/>reading<sp/>or<sp/>writing<sp/>the<sp/>backing<sp/>file,<sp/>if<sp/>necessary).</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>access<sp/>routines<sp/>are<sp/>told<sp/>whether<sp/>the<sp/>caller<sp/>intends<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>the<sp/>accessed<sp/>strip;<sp/>during<sp/>a<sp/>read-only<sp/>pass<sp/>this<sp/>saves<sp/>having<sp/>to<sp/>rewrite</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>data<sp/>to<sp/>disk.<sp/><sp/>The<sp/>access<sp/>routines<sp/>are<sp/>also<sp/>responsible<sp/>for<sp/>pre-zeroing</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>any<sp/>newly<sp/>accessed<sp/>rows,<sp/>if<sp/>pre-zeroing<sp/>was<sp/>requested.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>In<sp/>current<sp/>usage,<sp/>the<sp/>access<sp/>requests<sp/>are<sp/>usually<sp/>for<sp/>nonoverlapping</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>strips;<sp/>that<sp/>is,<sp/>successive<sp/>access<sp/>start_row<sp/>numbers<sp/>differ<sp/>by<sp/>exactly</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>num_rows<sp/>=<sp/>maxaccess.<sp/><sp/>This<sp/>means<sp/>we<sp/>can<sp/>get<sp/>good<sp/>performance<sp/>with<sp/>simple</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>buffer<sp/>dump/reload<sp/>logic,<sp/>by<sp/>making<sp/>the<sp/>in-memory<sp/>buffer<sp/>be<sp/>a<sp/>multiple</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>access<sp/>height;<sp/>then<sp/>there<sp/>will<sp/>never<sp/>be<sp/>accesses<sp/>across<sp/>bufferload</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>boundaries.<sp/><sp/>The<sp/>code<sp/>will<sp/>still<sp/>work<sp/>with<sp/>overlapping<sp/>access<sp/>requests,</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>but<sp/>it<sp/>doesn&apos;t<sp/>handle<sp/>bufferload<sp/>overlaps<sp/>very<sp/>efficiently.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">METHODDEF<sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref></highlight></codeline>
<codeline lineno="523"><highlight class="normal">request_virt_sarray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>pre_zero,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>samplesperrow,<sp/>JDIMENSION<sp/>numrows,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>maxaccess)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Request<sp/>a<sp/>virtual<sp/>2-D<sp/>sample<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>result;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>IMAGE-lifetime<sp/>virtual<sp/>arrays<sp/>are<sp/>currently<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>if<sp/>(pool_id<sp/>!=<sp/>JPOOL_IMAGE)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_BAD_POOL_ID,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>control<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(<ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref>)<sp/>alloc_small(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_control</ref>));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>result-&gt;mem_buffer<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>marks<sp/>array<sp/>not<sp/>yet<sp/>realized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>result-&gt;rows_in_array<sp/>=<sp/>numrows;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>result-&gt;samplesperrow<sp/>=<sp/>samplesperrow;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>result-&gt;maxaccess<sp/>=<sp/>maxaccess;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>result-&gt;pre_zero<sp/>=<sp/>pre_zero;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>result-&gt;b_s_open<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>associated<sp/>backing-store<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>result-&gt;next<sp/>=<sp/>mem-&gt;virt_sarray_list;<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>to<sp/>list<sp/>of<sp/>virtual<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>mem-&gt;virt_sarray_list<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">METHODDEF<sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref></highlight></codeline>
<codeline lineno="553"><highlight class="normal">request_virt_barray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>pre_zero,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>blocksperrow,<sp/>JDIMENSION<sp/>numrows,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>maxaccess)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Request<sp/>a<sp/>virtual<sp/>2-D<sp/>coefficient-block<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>result;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>IMAGE-lifetime<sp/>virtual<sp/>arrays<sp/>are<sp/>currently<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>if<sp/>(pool_id<sp/>!=<sp/>JPOOL_IMAGE)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_BAD_POOL_ID,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>control<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(<ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref>)<sp/>alloc_small(cinfo,<sp/>pool_id,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_control</ref>));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>result-&gt;mem_buffer<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>marks<sp/>array<sp/>not<sp/>yet<sp/>realized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>result-&gt;rows_in_array<sp/>=<sp/>numrows;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>result-&gt;blocksperrow<sp/>=<sp/>blocksperrow;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>result-&gt;maxaccess<sp/>=<sp/>maxaccess;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>result-&gt;pre_zero<sp/>=<sp/>pre_zero;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>result-&gt;b_s_open<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>associated<sp/>backing-store<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>result-&gt;next<sp/>=<sp/>mem-&gt;virt_barray_list;<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>to<sp/>list<sp/>of<sp/>virtual<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>mem-&gt;virt_barray_list<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">realize_virt_arrays<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>in-memory<sp/>buffers<sp/>for<sp/>any<sp/>unrealized<sp/>virtual<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>space_per_minheight,<sp/>maximum_space,<sp/>avail_mem;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minheights,<sp/>max_minheights;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>sptr;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>bptr;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>minimum<sp/>space<sp/>needed<sp/>(maxaccess<sp/>rows<sp/>in<sp/>each<sp/>buffer)</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>the<sp/>maximum<sp/>space<sp/>needed<sp/>(full<sp/>image<sp/>height<sp/>in<sp/>each<sp/>buffer).</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/><sp/>*<sp/>These<sp/>may<sp/>be<sp/>of<sp/>use<sp/>to<sp/>the<sp/>system-dependent<sp/>jpeg_mem_available<sp/>routine.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>space_per_minheight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>maximum_space<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>for<sp/>(sptr<sp/>=<sp/>mem-&gt;virt_sarray_list;<sp/>sptr<sp/>!=<sp/>NULL;<sp/>sptr<sp/>=<sp/>sptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sptr-&gt;mem_buffer<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>realized<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>space_per_minheight<sp/>+=<sp/>(long)<sp/>sptr-&gt;maxaccess<sp/>*</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>sptr-&gt;samplesperrow<sp/>*<sp/>SIZEOF(JSAMPLE);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maximum_space<sp/>+=<sp/>(long)<sp/>sptr-&gt;rows_in_array<sp/>*</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>sptr-&gt;samplesperrow<sp/>*<sp/>SIZEOF(JSAMPLE);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bptr<sp/>=<sp/>mem-&gt;virt_barray_list;<sp/>bptr<sp/>!=<sp/>NULL;<sp/>bptr<sp/>=<sp/>bptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bptr-&gt;mem_buffer<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>realized<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>space_per_minheight<sp/>+=<sp/>(long)<sp/>bptr-&gt;maxaccess<sp/>*</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bptr-&gt;blocksperrow<sp/>*<sp/>SIZEOF(JBLOCK);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maximum_space<sp/>+=<sp/>(long)<sp/>bptr-&gt;rows_in_array<sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bptr-&gt;blocksperrow<sp/>*<sp/>SIZEOF(JBLOCK);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space_per_minheight<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>unrealized<sp/>arrays,<sp/>no<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>amount<sp/>of<sp/>memory<sp/>to<sp/>actually<sp/>use;<sp/>this<sp/>is<sp/>system-dependent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>avail_mem<sp/>=<sp/>jpeg_mem_available(cinfo,<sp/>space_per_minheight,<sp/>maximum_space,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem-&gt;total_space_allocated);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>maximum<sp/>space<sp/>needed<sp/>is<sp/>available,<sp/>make<sp/>all<sp/>the<sp/>buffers<sp/>full</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/>*<sp/>height;<sp/>otherwise<sp/>parcel<sp/>it<sp/>out<sp/>with<sp/>the<sp/>same<sp/>number<sp/>of<sp/>minheights</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>each<sp/>buffer.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail_mem<sp/>&gt;=<sp/>maximum_space)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>max_minheights<sp/>=<sp/>1000000000L;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>max_minheights<sp/>=<sp/>avail_mem<sp/>/<sp/>space_per_minheight;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>be<sp/>enough<sp/>space,<sp/>try<sp/>to<sp/>get<sp/>the<sp/>minimum</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>anyway.<sp/><sp/>This<sp/>allows<sp/>a<sp/>&quot;stub&quot;<sp/>implementation<sp/>of<sp/>jpeg_mem_available().</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_minheights<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_minheights<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>in-memory<sp/>buffers<sp/>and<sp/>initialize<sp/>backing<sp/>store<sp/>as<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sptr<sp/>=<sp/>mem-&gt;virt_sarray_list;<sp/>sptr<sp/>!=<sp/>NULL;<sp/>sptr<sp/>=<sp/>sptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sptr-&gt;mem_buffer<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>realized<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minheights<sp/>=<sp/>((long)<sp/>sptr-&gt;rows_in_array<sp/>-<sp/>1L)<sp/>/<sp/>sptr-&gt;maxaccess<sp/>+<sp/>1L;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minheights<sp/>&lt;=<sp/>max_minheights)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>buffer<sp/>fits<sp/>in<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>sptr-&gt;rows_in_mem<sp/>=<sp/>sptr-&gt;rows_in_array;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>doesn&apos;t<sp/>fit<sp/>in<sp/>memory,<sp/>create<sp/>backing<sp/>store.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>sptr-&gt;rows_in_mem<sp/>=<sp/>(JDIMENSION)<sp/>(max_minheights<sp/>*<sp/>sptr-&gt;maxaccess);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_open_backing_store(cinfo,<sp/>&amp;<sp/>sptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>sptr-&gt;rows_in_array<sp/>*</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>sptr-&gt;samplesperrow<sp/>*</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>SIZEOF(JSAMPLE));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>sptr-&gt;b_s_open<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;mem_buffer<sp/>=<sp/>alloc_sarray(cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;samplesperrow,<sp/>sptr-&gt;rows_in_mem);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;rowsperchunk<sp/>=<sp/>mem-&gt;last_rowsperchunk;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;cur_start_row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;first_undef_row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sptr-&gt;dirty<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bptr<sp/>=<sp/>mem-&gt;virt_barray_list;<sp/>bptr<sp/>!=<sp/>NULL;<sp/>bptr<sp/>=<sp/>bptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bptr-&gt;mem_buffer<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>realized<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minheights<sp/>=<sp/>((long)<sp/>bptr-&gt;rows_in_array<sp/>-<sp/>1L)<sp/>/<sp/>bptr-&gt;maxaccess<sp/>+<sp/>1L;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minheights<sp/>&lt;=<sp/>max_minheights)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>buffer<sp/>fits<sp/>in<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>bptr-&gt;rows_in_mem<sp/>=<sp/>bptr-&gt;rows_in_array;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>doesn&apos;t<sp/>fit<sp/>in<sp/>memory,<sp/>create<sp/>backing<sp/>store.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>bptr-&gt;rows_in_mem<sp/>=<sp/>(JDIMENSION)<sp/>(max_minheights<sp/>*<sp/>bptr-&gt;maxaccess);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_open_backing_store(cinfo,<sp/>&amp;<sp/>bptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bptr-&gt;rows_in_array<sp/>*</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bptr-&gt;blocksperrow<sp/>*</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>SIZEOF(JBLOCK));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>bptr-&gt;b_s_open<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;mem_buffer<sp/>=<sp/>alloc_barray(cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;blocksperrow,<sp/>bptr-&gt;rows_in_mem);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;rowsperchunk<sp/>=<sp/>mem-&gt;last_rowsperchunk;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;cur_start_row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;first_undef_row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bptr-&gt;dirty<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">do_sarray_io<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>ptr,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>writing)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Do<sp/>backing<sp/>store<sp/>read<sp/>or<sp/>write<sp/>of<sp/>a<sp/>virtual<sp/>sample<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bytesperrow,<sp/>file_offset,<sp/>byte_count,<sp/>rows,<sp/>thisrow,<sp/>i;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>bytesperrow<sp/>=<sp/>(long)<sp/>ptr-&gt;samplesperrow<sp/>*<sp/>SIZEOF(JSAMPLE);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>file_offset<sp/>=<sp/>ptr-&gt;cur_start_row<sp/>*<sp/>bytesperrow;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>to<sp/>read<sp/>or<sp/>write<sp/>each<sp/>allocation<sp/>chunk<sp/>in<sp/>mem_buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(long)<sp/>ptr-&gt;rows_in_mem;<sp/>i<sp/>+=<sp/>ptr-&gt;rowsperchunk)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One<sp/>chunk,<sp/>but<sp/>check<sp/>for<sp/>short<sp/>chunk<sp/>at<sp/>end<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rowsperchunk,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_mem<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>no<sp/>more<sp/>than<sp/>is<sp/>currently<sp/>defined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>thisrow<sp/>=<sp/>(long)<sp/>ptr-&gt;cur_start_row<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN(rows,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;first_undef_row<sp/>-<sp/>thisrow);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>no<sp/>more<sp/>than<sp/>fits<sp/>in<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN(rows,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_array<sp/>-<sp/>thisrow);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>&lt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>chunk<sp/>might<sp/>be<sp/>past<sp/>end<sp/>of<sp/>file!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_count<sp/>=<sp/>rows<sp/>*<sp/>bytesperrow;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writing)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr-&gt;b_s_info.write_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>ptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[i],</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_offset,<sp/>byte_count);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr-&gt;b_s_info.read_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>ptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[i],</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_offset,<sp/>byte_count);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>file_offset<sp/>+=<sp/>byte_count;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">do_barray_io<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>ptr,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>writing)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Do<sp/>backing<sp/>store<sp/>read<sp/>or<sp/>write<sp/>of<sp/>a<sp/>virtual<sp/>coefficient-block<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bytesperrow,<sp/>file_offset,<sp/>byte_count,<sp/>rows,<sp/>thisrow,<sp/>i;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>bytesperrow<sp/>=<sp/>(long)<sp/>ptr-&gt;blocksperrow<sp/>*<sp/>SIZEOF(JBLOCK);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>file_offset<sp/>=<sp/>ptr-&gt;cur_start_row<sp/>*<sp/>bytesperrow;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>to<sp/>read<sp/>or<sp/>write<sp/>each<sp/>allocation<sp/>chunk<sp/>in<sp/>mem_buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(long)<sp/>ptr-&gt;rows_in_mem;<sp/>i<sp/>+=<sp/>ptr-&gt;rowsperchunk)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One<sp/>chunk,<sp/>but<sp/>check<sp/>for<sp/>short<sp/>chunk<sp/>at<sp/>end<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rowsperchunk,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_mem<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>no<sp/>more<sp/>than<sp/>is<sp/>currently<sp/>defined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>thisrow<sp/>=<sp/>(long)<sp/>ptr-&gt;cur_start_row<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN(rows,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;first_undef_row<sp/>-<sp/>thisrow);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>no<sp/>more<sp/>than<sp/>fits<sp/>in<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>MIN(rows,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_array<sp/>-<sp/>thisrow);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>&lt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>chunk<sp/>might<sp/>be<sp/>past<sp/>end<sp/>of<sp/>file!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_count<sp/>=<sp/>rows<sp/>*<sp/>bytesperrow;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writing)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr-&gt;b_s_info.write_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>ptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[i],</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_offset,<sp/>byte_count);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr-&gt;b_s_info.read_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>ptr-&gt;b_s_info,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[i],</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_offset,<sp/>byte_count);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>file_offset<sp/>+=<sp/>byte_count;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">METHODDEF<sp/>JSAMPARRAY</highlight></codeline>
<codeline lineno="756"><highlight class="normal">access_virt_sarray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>ptr,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>start_row,<sp/>JDIMENSION<sp/>num_rows,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>writable)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Access<sp/>the<sp/>part<sp/>of<sp/>a<sp/>virtual<sp/>sample<sp/>array<sp/>starting<sp/>at<sp/>start_row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>extending<sp/>for<sp/>num_rows<sp/>rows.<sp/><sp/>writable<sp/>is<sp/>true<sp/>if<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>caller<sp/>intends<sp/>to<sp/>modify<sp/>the<sp/>accessed<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>end_row<sp/>=<sp/>start_row<sp/>+<sp/>num_rows;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>undef_row;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>debugging<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_row<sp/>&gt;<sp/>ptr-&gt;rows_in_array<sp/>||<sp/>num_rows<sp/>&gt;<sp/>ptr-&gt;maxaccess<sp/>||</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;mem_buffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>desired<sp/>part<sp/>of<sp/>the<sp/>virtual<sp/>array<sp/>accessible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_row<sp/>&lt;<sp/>ptr-&gt;cur_start_row<sp/>||</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_row<sp/>&gt;<sp/>ptr-&gt;cur_start_row+ptr-&gt;rows_in_mem)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ptr-&gt;b_s_open)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_VIRTUAL_BUG);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>old<sp/>buffer<sp/>contents<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;dirty)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_sarray_io(cinfo,<sp/>ptr,<sp/>TRUE);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;dirty<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decide<sp/>what<sp/>part<sp/>of<sp/>virtual<sp/>array<sp/>to<sp/>access.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Algorithm:<sp/>if<sp/>target<sp/>address<sp/>&gt;<sp/>current<sp/>window,<sp/>assume<sp/>forward<sp/>scan,</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>load<sp/>starting<sp/>at<sp/>target<sp/>address.<sp/><sp/>If<sp/>target<sp/>address<sp/>&lt;<sp/>current<sp/>window,</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>assume<sp/>backward<sp/>scan,<sp/>load<sp/>so<sp/>that<sp/>target<sp/>area<sp/>is<sp/>top<sp/>of<sp/>window.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>when<sp/>switching<sp/>from<sp/>forward<sp/>write<sp/>to<sp/>forward<sp/>read,<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>start_row<sp/>=<sp/>0,<sp/>so<sp/>the<sp/>limiting<sp/>case<sp/>applies<sp/>and<sp/>we<sp/>load<sp/>from<sp/>0<sp/>anyway.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_row<sp/>&gt;<sp/>ptr-&gt;cur_start_row)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;cur_start_row<sp/>=<sp/>start_row;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>long<sp/>arithmetic<sp/>here<sp/>to<sp/>avoid<sp/>overflow<sp/>&amp;<sp/>unsigned<sp/>problems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ltemp;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltemp<sp/>=<sp/>(long)<sp/>end_row<sp/>-<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_mem;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>ltemp<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>fall<sp/>off<sp/>front<sp/>end<sp/>of<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;cur_start_row<sp/>=<sp/>(JDIMENSION)<sp/>ltemp;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>in<sp/>the<sp/>selected<sp/>part<sp/>of<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>During<sp/>the<sp/>initial<sp/>write<sp/>pass,<sp/>we<sp/>will<sp/>do<sp/>no<sp/>actual<sp/>read</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>because<sp/>the<sp/>selected<sp/>part<sp/>is<sp/>all<sp/>undefined.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>do_sarray_io(cinfo,<sp/>ptr,<sp/>FALSE);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>accessed<sp/>part<sp/>of<sp/>the<sp/>array<sp/>is<sp/>defined;<sp/>prezero<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/>*<sp/>To<sp/>improve<sp/>locality<sp/>of<sp/>access,<sp/>we<sp/>only<sp/>prezero<sp/>the<sp/>part<sp/>of<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/>*<sp/>that<sp/>the<sp/>caller<sp/>is<sp/>about<sp/>to<sp/>access,<sp/>not<sp/>the<sp/>entire<sp/>in-memory<sp/>array.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;first_undef_row<sp/>&lt;<sp/>end_row)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;first_undef_row<sp/>&lt;<sp/>start_row)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>writer<sp/>skipped<sp/>over<sp/>a<sp/>section<sp/>of<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>=<sp/>start_row;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>but<sp/>reader<sp/>is<sp/>allowed<sp/>to<sp/>read<sp/>ahead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>=<sp/>ptr-&gt;first_undef_row;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;first_undef_row<sp/>=<sp/>end_row;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;pre_zero)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytesperrow<sp/>=<sp/>(size_t)<sp/>ptr-&gt;samplesperrow<sp/>*<sp/>SIZEOF(JSAMPLE);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>-=<sp/>ptr-&gt;cur_start_row;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>indexes<sp/>relative<sp/>to<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_row<sp/>-=<sp/>ptr-&gt;cur_start_row;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(undef_row<sp/>&lt;<sp/>end_row)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>jzero_far((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[undef_row],<sp/>bytesperrow);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>undef_row++;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>writable)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reader<sp/>looking<sp/>at<sp/>undefined<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flag<sp/>the<sp/>buffer<sp/>dirty<sp/>if<sp/>caller<sp/>will<sp/>write<sp/>in<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;dirty<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>address<sp/>of<sp/>proper<sp/>part<sp/>of<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr-&gt;mem_buffer<sp/>+<sp/>(start_row<sp/>-<sp/>ptr-&gt;cur_start_row);</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">METHODDEF<sp/>JBLOCKARRAY</highlight></codeline>
<codeline lineno="841"><highlight class="normal">access_virt_barray<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>ptr,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JDIMENSION<sp/>start_row,<sp/>JDIMENSION<sp/>num_rows,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>writable)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Access<sp/>the<sp/>part<sp/>of<sp/>a<sp/>virtual<sp/>block<sp/>array<sp/>starting<sp/>at<sp/>start_row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>extending<sp/>for<sp/>num_rows<sp/>rows.<sp/><sp/>writable<sp/>is<sp/>true<sp/>if<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>caller<sp/>intends<sp/>to<sp/>modify<sp/>the<sp/>accessed<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>end_row<sp/>=<sp/>start_row<sp/>+<sp/>num_rows;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>undef_row;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>debugging<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_row<sp/>&gt;<sp/>ptr-&gt;rows_in_array<sp/>||<sp/>num_rows<sp/>&gt;<sp/>ptr-&gt;maxaccess<sp/>||</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;mem_buffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>desired<sp/>part<sp/>of<sp/>the<sp/>virtual<sp/>array<sp/>accessible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_row<sp/>&lt;<sp/>ptr-&gt;cur_start_row<sp/>||</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_row<sp/>&gt;<sp/>ptr-&gt;cur_start_row+ptr-&gt;rows_in_mem)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ptr-&gt;b_s_open)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_VIRTUAL_BUG);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>old<sp/>buffer<sp/>contents<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;dirty)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_barray_io(cinfo,<sp/>ptr,<sp/>TRUE);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;dirty<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decide<sp/>what<sp/>part<sp/>of<sp/>virtual<sp/>array<sp/>to<sp/>access.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Algorithm:<sp/>if<sp/>target<sp/>address<sp/>&gt;<sp/>current<sp/>window,<sp/>assume<sp/>forward<sp/>scan,</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>load<sp/>starting<sp/>at<sp/>target<sp/>address.<sp/><sp/>If<sp/>target<sp/>address<sp/>&lt;<sp/>current<sp/>window,</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>assume<sp/>backward<sp/>scan,<sp/>load<sp/>so<sp/>that<sp/>target<sp/>area<sp/>is<sp/>top<sp/>of<sp/>window.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>when<sp/>switching<sp/>from<sp/>forward<sp/>write<sp/>to<sp/>forward<sp/>read,<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>start_row<sp/>=<sp/>0,<sp/>so<sp/>the<sp/>limiting<sp/>case<sp/>applies<sp/>and<sp/>we<sp/>load<sp/>from<sp/>0<sp/>anyway.</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_row<sp/>&gt;<sp/>ptr-&gt;cur_start_row)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;cur_start_row<sp/>=<sp/>start_row;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>long<sp/>arithmetic<sp/>here<sp/>to<sp/>avoid<sp/>overflow<sp/>&amp;<sp/>unsigned<sp/>problems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ltemp;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltemp<sp/>=<sp/>(long)<sp/>end_row<sp/>-<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ptr-&gt;rows_in_mem;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltemp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>ltemp<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>fall<sp/>off<sp/>front<sp/>end<sp/>of<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;cur_start_row<sp/>=<sp/>(JDIMENSION)<sp/>ltemp;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>in<sp/>the<sp/>selected<sp/>part<sp/>of<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>During<sp/>the<sp/>initial<sp/>write<sp/>pass,<sp/>we<sp/>will<sp/>do<sp/>no<sp/>actual<sp/>read</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>because<sp/>the<sp/>selected<sp/>part<sp/>is<sp/>all<sp/>undefined.</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>do_barray_io(cinfo,<sp/>ptr,<sp/>FALSE);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>accessed<sp/>part<sp/>of<sp/>the<sp/>array<sp/>is<sp/>defined;<sp/>prezero<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/>*<sp/>To<sp/>improve<sp/>locality<sp/>of<sp/>access,<sp/>we<sp/>only<sp/>prezero<sp/>the<sp/>part<sp/>of<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/>*<sp/>that<sp/>the<sp/>caller<sp/>is<sp/>about<sp/>to<sp/>access,<sp/>not<sp/>the<sp/>entire<sp/>in-memory<sp/>array.</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;first_undef_row<sp/>&lt;<sp/>end_row)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;first_undef_row<sp/>&lt;<sp/>start_row)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>writer<sp/>skipped<sp/>over<sp/>a<sp/>section<sp/>of<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>=<sp/>start_row;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>but<sp/>reader<sp/>is<sp/>allowed<sp/>to<sp/>read<sp/>ahead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>=<sp/>ptr-&gt;first_undef_row;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;first_undef_row<sp/>=<sp/>end_row;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;pre_zero)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytesperrow<sp/>=<sp/>(size_t)<sp/>ptr-&gt;blocksperrow<sp/>*<sp/>SIZEOF(JBLOCK);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef_row<sp/>-=<sp/>ptr-&gt;cur_start_row;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>indexes<sp/>relative<sp/>to<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_row<sp/>-=<sp/>ptr-&gt;cur_start_row;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(undef_row<sp/>&lt;<sp/>end_row)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>jzero_far((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>ptr-&gt;mem_buffer[undef_row],<sp/>bytesperrow);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>undef_row++;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>writable)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reader<sp/>looking<sp/>at<sp/>undefined<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_VIRTUAL_ACCESS);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flag<sp/>the<sp/>buffer<sp/>dirty<sp/>if<sp/>caller<sp/>will<sp/>write<sp/>in<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writable)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;dirty<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>address<sp/>of<sp/>proper<sp/>part<sp/>of<sp/>the<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr-&gt;mem_buffer<sp/>+<sp/>(start_row<sp/>-<sp/>ptr-&gt;cur_start_row);</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>Release<sp/>all<sp/>objects<sp/>belonging<sp/>to<sp/>a<sp/>specified<sp/>pool.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal">free_pool<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool_id)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>cinfo-&gt;mem;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>small_pool_ptr<sp/>shdr_ptr;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>large_pool_ptr<sp/>lhdr_ptr;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>space_freed;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>if<sp/>(pool_id<sp/>&lt;<sp/>0<sp/>||<sp/>pool_id<sp/>&gt;=<sp/>JPOOL_NUMPOOLS)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_BAD_POOL_ID,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MEM_STATS</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;err-&gt;trace_level<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>print_mem_stats(cinfo,<sp/>pool_id);<sp/></highlight><highlight class="comment">/*<sp/>print<sp/>pool&apos;s<sp/>memory<sp/>usage<sp/>statistics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>freeing<sp/>IMAGE<sp/>pool,<sp/>close<sp/>any<sp/>virtual<sp/>arrays<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool_id<sp/>==<sp/>JPOOL_IMAGE)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjvirt__sarray__control" kindref="compound">jvirt_sarray_ptr</ref><sp/>sptr;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjvirt__barray__control" kindref="compound">jvirt_barray_ptr</ref><sp/>bptr;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sptr<sp/>=<sp/>mem-&gt;virt_sarray_list;<sp/>sptr<sp/>!=<sp/>NULL;<sp/>sptr<sp/>=<sp/>sptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sptr-&gt;b_s_open)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>there<sp/>may<sp/>be<sp/>no<sp/>backing<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>sptr-&gt;b_s_open<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>prevent<sp/>recursive<sp/>close<sp/>if<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>(*sptr-&gt;b_s_info.close_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>sptr-&gt;b_s_info);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;virt_sarray_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bptr<sp/>=<sp/>mem-&gt;virt_barray_list;<sp/>bptr<sp/>!=<sp/>NULL;<sp/>bptr<sp/>=<sp/>bptr-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bptr-&gt;b_s_open)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>there<sp/>may<sp/>be<sp/>no<sp/>backing<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>bptr-&gt;b_s_open<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>prevent<sp/>recursive<sp/>close<sp/>if<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>(*bptr-&gt;b_s_info.close_backing_store)<sp/>(cinfo,<sp/>&amp;<sp/>bptr-&gt;b_s_info);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;virt_barray_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>large<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>lhdr_ptr<sp/>=<sp/>mem-&gt;large_list[pool_id];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>mem-&gt;large_list[pool_id]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lhdr_ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>large_pool_ptr<sp/>next_lhdr_ptr<sp/>=<sp/>lhdr_ptr-&gt;hdr.next;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>space_freed<sp/>=<sp/>lhdr_ptr-&gt;hdr.bytes_used<sp/>+</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhdr_ptr-&gt;hdr.bytes_left<sp/>+</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="unionlarge__pool__struct" kindref="compound">large_pool_hdr</ref>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_free_large(cinfo,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>lhdr_ptr,<sp/>space_freed);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;total_space_allocated<sp/>-=<sp/>space_freed;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>lhdr_ptr<sp/>=<sp/>next_lhdr_ptr;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>small<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>shdr_ptr<sp/>=<sp/>mem-&gt;small_list[pool_id];</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>mem-&gt;small_list[pool_id]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(shdr_ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>small_pool_ptr<sp/>next_shdr_ptr<sp/>=<sp/>shdr_ptr-&gt;hdr.next;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>space_freed<sp/>=<sp/>shdr_ptr-&gt;hdr.bytes_used<sp/>+</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr_ptr-&gt;hdr.bytes_left<sp/>+</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(<ref refid="unionsmall__pool__struct" kindref="compound">small_pool_hdr</ref>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_free_small(cinfo,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>shdr_ptr,<sp/>space_freed);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;total_space_allocated<sp/>-=<sp/>space_freed;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>shdr_ptr<sp/>=<sp/>next_shdr_ptr;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/>*<sp/>Close<sp/>up<sp/>shop<sp/>entirely.</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>cannot<sp/>be<sp/>called<sp/>unless<sp/>cinfo-&gt;mem<sp/>is<sp/>non-NULL.</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal">self_destruct<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>all<sp/>backing<sp/>store,<sp/>release<sp/>all<sp/>memory.</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Releasing<sp/>pools<sp/>in<sp/>reverse<sp/>order<sp/>might<sp/>help<sp/>avoid<sp/>fragmentation</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/>*<sp/>with<sp/>some<sp/>(brain-damaged)<sp/>malloc<sp/>libraries.</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pool<sp/>=<sp/>JPOOL_NUMPOOLS-1;<sp/>pool<sp/>&gt;=<sp/>JPOOL_PERMANENT;<sp/>pool--)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>free_pool(cinfo,<sp/>pool);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>the<sp/>memory<sp/>manager<sp/>control<sp/>block<sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>jpeg_free_small(cinfo,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>cinfo-&gt;mem,<sp/>SIZEOF(<ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref>));</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>cinfo-&gt;mem<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensures<sp/>I<sp/>will<sp/>be<sp/>called<sp/>only<sp/>once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>jpeg_mem_term(cinfo);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-dependent<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*<sp/>Memory<sp/>manager<sp/>initialization.</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>When<sp/>this<sp/>is<sp/>called,<sp/>only<sp/>the<sp/>error<sp/>manager<sp/>pointer<sp/>is<sp/>valid<sp/>in<sp/>cinfo!</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">jinit_memory_mgr<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>my_mem_ptr<sp/>mem;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_to_use;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pool;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>test_mac;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>cinfo-&gt;mem<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>safety<sp/>if<sp/>init<sp/>fails<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>configuration<sp/>errors.</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/>*<sp/>SIZEOF(ALIGN_TYPE)<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>2;<sp/>otherwise,<sp/>it<sp/>probably</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/>*<sp/>doesn&apos;t<sp/>reflect<sp/>any<sp/>real<sp/>hardware<sp/>alignment<sp/>requirement.</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>test<sp/>is<sp/>a<sp/>little<sp/>tricky:<sp/>for<sp/>X&gt;0,<sp/>X<sp/>and<sp/>X-1<sp/>have<sp/>no<sp/>one-bits</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>common<sp/>if<sp/>and<sp/>only<sp/>if<sp/>X<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2,<sp/>ie<sp/>has<sp/>only<sp/>one<sp/>one-bit.</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Some<sp/>compilers<sp/>may<sp/>give<sp/>an<sp/>&quot;unreachable<sp/>code&quot;<sp/>warning<sp/>here;<sp/>ignore<sp/>it.</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SIZEOF(ALIGN_TYPE)<sp/>&amp;<sp/>(SIZEOF(ALIGN_TYPE)-1))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_ALIGN_TYPE);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>MAX_ALLOC_CHUNK<sp/>must<sp/>be<sp/>representable<sp/>as<sp/>type<sp/>size_t,<sp/>and<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/>*<sp/>a<sp/>multiple<sp/>of<sp/>SIZEOF(ALIGN_TYPE).</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Again,<sp/>an<sp/>&quot;unreachable<sp/>code&quot;<sp/>warning<sp/>may<sp/>be<sp/>ignored<sp/>here.</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/><sp/>*<sp/>But<sp/>a<sp/>&quot;constant<sp/>too<sp/>large&quot;<sp/>warning<sp/>means<sp/>you<sp/>need<sp/>to<sp/>fix<sp/>MAX_ALLOC_CHUNK.</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>test_mac<sp/>=<sp/>(size_t)<sp/>MAX_ALLOC_CHUNK;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>test_mac<sp/>!=<sp/>MAX_ALLOC_CHUNK<sp/>||</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(MAX_ALLOC_CHUNK<sp/>%<sp/>SIZEOF(ALIGN_TYPE))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_BAD_ALLOC_CHUNK);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>max_to_use<sp/>=<sp/>jpeg_mem_init(cinfo);<sp/></highlight><highlight class="comment">/*<sp/>system-dependent<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attempt<sp/>to<sp/>allocate<sp/>memory<sp/>manager&apos;s<sp/>control<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>mem<sp/>=<sp/>(my_mem_ptr)<sp/>jpeg_get_small(cinfo,<sp/>SIZEOF(<ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref>));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>jpeg_mem_term(cinfo);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-dependent<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_OUT_OF_MEMORY,<sp/>0);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>OK,<sp/>fill<sp/>in<sp/>the<sp/>method<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>mem-&gt;pub.alloc_small<sp/>=<sp/>alloc_small;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>mem-&gt;pub.alloc_large<sp/>=<sp/>alloc_large;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>mem-&gt;pub.alloc_sarray<sp/>=<sp/>alloc_sarray;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>mem-&gt;pub.alloc_barray<sp/>=<sp/>alloc_barray;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>mem-&gt;pub.request_virt_sarray<sp/>=<sp/>request_virt_sarray;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>mem-&gt;pub.request_virt_barray<sp/>=<sp/>request_virt_barray;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>mem-&gt;pub.realize_virt_arrays<sp/>=<sp/>realize_virt_arrays;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>mem-&gt;pub.access_virt_sarray<sp/>=<sp/>access_virt_sarray;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>mem-&gt;pub.access_virt_barray<sp/>=<sp/>access_virt_barray;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>mem-&gt;pub.free_pool<sp/>=<sp/>free_pool;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>mem-&gt;pub.self_destruct<sp/>=<sp/>self_destruct;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>working<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>mem-&gt;pub.max_memory_to_use<sp/>=<sp/>max_to_use;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pool<sp/>=<sp/>JPOOL_NUMPOOLS-1;<sp/>pool<sp/>&gt;=<sp/>JPOOL_PERMANENT;<sp/>pool--)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;small_list[pool]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;large_list[pool]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>mem-&gt;virt_sarray_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>mem-&gt;virt_barray_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>mem-&gt;total_space_allocated<sp/>=<sp/>SIZEOF(<ref refid="structmy__memory__mgr" kindref="compound">my_memory_mgr</ref>);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declare<sp/>ourselves<sp/>open<sp/>for<sp/>business<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>cinfo-&gt;mem<sp/>=<sp/>&amp;<sp/>mem-&gt;pub;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>an<sp/>environment<sp/>variable<sp/>JPEGMEM;<sp/>if<sp/>found,<sp/>override<sp/>the</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/>*<sp/>default<sp/>max_memory<sp/>setting<sp/>from<sp/>jpeg_mem_init.<sp/><sp/>Note<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/>*<sp/>surrounding<sp/>application<sp/>may<sp/>again<sp/>override<sp/>this<sp/>value.</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>your<sp/>system<sp/>doesn&apos;t<sp/>support<sp/>getenv(),<sp/>define<sp/>NO_GETENV<sp/>to<sp/>disable</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>feature.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_GETENV</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>memenv;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((memenv<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;JPEGMEM&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(memenv,<sp/></highlight><highlight class="stringliteral">&quot;%ld%c&quot;</highlight><highlight class="normal">,<sp/>&amp;max_to_use,<sp/>&amp;ch)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_to_use<sp/>*=<sp/>1000L;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>mem-&gt;pub.max_memory_to_use<sp/>=<sp/>max_to_use<sp/>*<sp/>1000L;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1114"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c"/>
  </compounddef>
</doxygen>
