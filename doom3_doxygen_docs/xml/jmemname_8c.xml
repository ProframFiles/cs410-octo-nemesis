<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jmemname_8c" kind="file">
    <compoundname>jmemname.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jmemsys_8h" local="yes">jmemsys.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jmemname_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="15" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1a0d112bae8fd35be772185b6ec6bcbe64" prot="public" static="no">
        <name>SEEK_SET</name>
        <initializer>0		/* if not, assume 0 is correct */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="26" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1a7032a5e02e3a69b9bb87efd768bffabc" prot="public" static="no">
        <name>READ_BINARY</name>
        <initializer>&quot;rb&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="33" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1af1650f336de06c6dd67b8b822c418ece" prot="public" static="no">
        <name>RW_BINARY</name>
        <initializer>&quot;w+b&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="34" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1a13c4b6983edd68ea90f2f6526e963251" prot="public" static="no">
        <name>TEMP_DIRECTORY</name>
        <initializer>&quot;/usr/tmp/&quot; /* recommended setting for Unix */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="65" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1a7762274c16200afb71f56323d31b9090" prot="public" static="no">
        <name>TEMP_FILE_NAME</name>
        <initializer>&quot;%sJPG%dXXXXXX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="117" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemname_8c_1a10b62c1c6a13b239af27ba97e17ce763" prot="public" static="no">
        <name>DEFAULT_MAX_MEM</name>
        <initializer>1000000L /* default: one megabyte */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="179" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="jmemname_8c_1a1eda1bdcfef380fae5b4e9e791a920da" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int next_file_num</definition>
        <argsstring></argsstring>
        <name>next_file_num</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jmemname_8c_1a2369fe08a7d4ae92fe95ada3d2abdce9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void select_file_name</definition>
        <argsstring>(char *fname)</argsstring>
        <name>select_file_name</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="121" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1ab60e1599069962f06594912a1dfe07a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* jpeg_get_small</definition>
        <argsstring>(j_common_ptr cinfo, size_t sizeofobject)</argsstring>
        <name>jpeg_get_small</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="138" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a4548fda4b8765bdaac9f94021e5653d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_free_small</definition>
        <argsstring>(j_common_ptr cinfo, void *object, size_t sizeofobject)</argsstring>
        <name>jpeg_free_small</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="144" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a5cd972eb6ff2e180a2fa41e1da4176af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* jpeg_get_large</definition>
        <argsstring>(j_common_ptr cinfo, size_t sizeofobject)</argsstring>
        <name>jpeg_get_large</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="158" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1af71475763ddc75f28c3b6efc3ad212b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_free_large</definition>
        <argsstring>(j_common_ptr cinfo, void *object, size_t sizeofobject)</argsstring>
        <name>jpeg_free_large</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="164" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1ab589c9da269700f0a3462475c782d7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long jpeg_mem_available</definition>
        <argsstring>(j_common_ptr cinfo, long min_bytes_needed, long max_bytes_needed, long already_allocated)</argsstring>
        <name>jpeg_mem_available</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>min_bytes_needed</declname>
        </param>
        <param>
          <type>long</type>
          <declname>max_bytes_needed</declname>
        </param>
        <param>
          <type>long</type>
          <declname>already_allocated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="183" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="183" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a61fe3c0899a8622e5ce72ed28c454ccd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void read_backing_store</definition>
        <argsstring>(j_common_ptr cinfo, backing_store_ptr info, void *buffer_address, long file_offset, long byte_count)</argsstring>
        <name>read_backing_store</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref></type>
          <declname>info</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer_address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>file_offset</declname>
        </param>
        <param>
          <type>long</type>
          <declname>byte_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="199" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="199" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a30799962c653bd1e304eeebc5c83e663" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void write_backing_store</definition>
        <argsstring>(j_common_ptr cinfo, backing_store_ptr info, void *buffer_address, long file_offset, long byte_count)</argsstring>
        <name>write_backing_store</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref></type>
          <declname>info</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer_address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>file_offset</declname>
        </param>
        <param>
          <type>long</type>
          <declname>byte_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="212" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="212" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1ab57e4bddc9e8df8b9eac3378a771bb1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void close_backing_store</definition>
        <argsstring>(j_common_ptr cinfo, backing_store_ptr info)</argsstring>
        <name>close_backing_store</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="225" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a7845a6361a93c91fb4ec22b5ab20b0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_open_backing_store</definition>
        <argsstring>(j_common_ptr cinfo, backing_store_ptr info, long total_bytes_needed)</argsstring>
        <name>jpeg_open_backing_store</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref></type>
          <declname>info</declname>
        </param>
        <param>
          <type>long</type>
          <declname>total_bytes_needed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="242" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="242" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1ad0cdf8a11eca62091fc8c1ca0aa12168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long jpeg_mem_init</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>jpeg_mem_init</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="261" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="jmemname_8c_1a37ea2756f17c1fe8eac98dee4e2a6106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_mem_term</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>jpeg_mem_term</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" line="268" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c" bodystart="268" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jmemname.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1992-1994,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>provides<sp/>a<sp/>generic<sp/>implementation<sp/>of<sp/>the<sp/>system-dependent</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>portion<sp/>of<sp/>the<sp/>JPEG<sp/>memory<sp/>manager.<sp/><sp/>This<sp/>implementation<sp/>assumes<sp/>that</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>you<sp/>must<sp/>explicitly<sp/>construct<sp/>a<sp/>name<sp/>for<sp/>each<sp/>temp<sp/>file.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Also,<sp/>the<sp/>problem<sp/>of<sp/>determining<sp/>the<sp/>amount<sp/>of<sp/>memory<sp/>available</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>is<sp/>shoved<sp/>onto<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jmemsys.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>import<sp/>the<sp/>system-dependent<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_STDLIB_H<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;stdlib.h&gt;<sp/>should<sp/>declare<sp/>malloc(),free()<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>malloc<sp/>JPP((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free<sp/>JPP((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEEK_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pre-ANSI<sp/>systems<sp/>may<sp/>not<sp/>define<sp/>this;<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SEEK_SET<sp/><sp/>0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not,<sp/>assume<sp/>0<sp/>is<sp/>correct<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DONT_USE_B_MODE<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>define<sp/>mode<sp/>parameters<sp/>for<sp/>fopen()<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>READ_BINARY<sp/>&quot;r&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RW_BINARY<sp/><sp/><sp/>&quot;w+&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>READ_BINARY<sp/>&quot;rb&quot;</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RW_BINARY<sp/><sp/><sp/>&quot;w+b&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Selection<sp/>of<sp/>a<sp/>file<sp/>name<sp/>for<sp/>a<sp/>temporary<sp/>file.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>system-dependent!</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>The<sp/>code<sp/>as<sp/>given<sp/>is<sp/>suitable<sp/>for<sp/>most<sp/>Unix<sp/>systems,<sp/>and<sp/>it<sp/>is<sp/>easily</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>modified<sp/>for<sp/>most<sp/>non-Unix<sp/>systems.<sp/><sp/>Some<sp/>notes:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>1.<sp/><sp/>The<sp/>temp<sp/>file<sp/>is<sp/>created<sp/>in<sp/>the<sp/>directory<sp/>named<sp/>by<sp/>TEMP_DIRECTORY.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>default<sp/>value<sp/>is<sp/>/usr/tmp,<sp/>which<sp/>is<sp/>the<sp/>conventional<sp/>place<sp/>for</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>creating<sp/>large<sp/>temp<sp/>files<sp/>on<sp/>Unix.<sp/><sp/>On<sp/>other<sp/>systems<sp/>you&apos;ll<sp/>probably</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>want<sp/>to<sp/>change<sp/>the<sp/>file<sp/>location.<sp/><sp/>You<sp/>can<sp/>do<sp/>this<sp/>by<sp/>editing<sp/>the</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>#define,<sp/>or<sp/>(preferred)<sp/>by<sp/>defining<sp/>TEMP_DIRECTORY<sp/>in<sp/>jconfig.h.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>2.<sp/><sp/>If<sp/>you<sp/>need<sp/>to<sp/>change<sp/>the<sp/>file<sp/>name<sp/>as<sp/>well<sp/>as<sp/>its<sp/>location,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>you<sp/>can<sp/>override<sp/>the<sp/>TEMP_FILE_NAME<sp/>macro.<sp/><sp/>(Note<sp/>that<sp/>this<sp/>is</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>actually<sp/>a<sp/>printf<sp/>format<sp/>string;<sp/>it<sp/>must<sp/>contain<sp/>%s<sp/>and<sp/>%d.)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Few<sp/>people<sp/>should<sp/>need<sp/>to<sp/>do<sp/>this.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>3.<sp/><sp/>mktemp()<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>multiple<sp/>processes<sp/>running</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>simultaneously<sp/>won&apos;t<sp/>select<sp/>the<sp/>same<sp/>file<sp/>names.<sp/><sp/>If<sp/>your<sp/>system</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>doesn&apos;t<sp/>have<sp/>mktemp(),<sp/>define<sp/>NO_MKTEMP<sp/>to<sp/>do<sp/>it<sp/>the<sp/>hard<sp/>way.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(If<sp/>you<sp/>don&apos;t<sp/>have<sp/>&lt;errno.h&gt;,<sp/>also<sp/>define<sp/>NO_ERRNO_H.)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>4.<sp/><sp/>You<sp/>probably<sp/>want<sp/>to<sp/>define<sp/>NEED_SIGNAL_CATCHER<sp/>so<sp/>that<sp/>cjpeg.c/djpeg.c</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>cause<sp/>the<sp/>temp<sp/>files<sp/>to<sp/>be<sp/>removed<sp/>if<sp/>you<sp/>stop<sp/>the<sp/>program<sp/>early.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TEMP_DIRECTORY<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>override<sp/>from<sp/>jconfig.h<sp/>or<sp/>Makefile<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TEMP_DIRECTORY<sp/><sp/>&quot;/usr/tmp/&quot;<sp/></highlight><highlight class="comment">/*<sp/>recommended<sp/>setting<sp/>for<sp/>Unix<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_file_num;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>distinguish<sp/>among<sp/>several<sp/>temp<sp/>files<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NO_MKTEMP</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TEMP_FILE_NAME<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>override<sp/>from<sp/>jconfig.h<sp/>or<sp/>Makefile<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TEMP_FILE_NAME<sp/><sp/>&quot;%sJPG%03d.TMP&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_ERRNO_H</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>define<sp/>ENOENT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ANSI<sp/>C<sp/>specifies<sp/>that<sp/>errno<sp/>is<sp/>a<sp/>macro,<sp/>but<sp/>on<sp/>older<sp/>systems<sp/>it&apos;s<sp/>more</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>likely<sp/>to<sp/>be<sp/>a<sp/>plain<sp/>int<sp/>variable.<sp/><sp/>And<sp/>not<sp/>all<sp/>versions<sp/>of<sp/>errno.h</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>bother<sp/>to<sp/>declare<sp/>it,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>in<sp/>order<sp/>to<sp/>be<sp/>most<sp/>portable.<sp/><sp/>Thus:</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>errno</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errno;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">select_file_name<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>fname)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>FILE<sp/>*<sp/>tfile;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>generating<sp/>file<sp/>names<sp/>till<sp/>we<sp/>find<sp/>one<sp/>that&apos;s<sp/>not<sp/>in<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>next_file_num++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fname,<sp/>TEMP_FILE_NAME,<sp/>TEMP_DIRECTORY,<sp/>next_file_num);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tfile<sp/>=<sp/>fopen(fname,<sp/>READ_BINARY))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fopen<sp/>could<sp/>have<sp/>failed<sp/>for<sp/>a<sp/>reason<sp/>other<sp/>than<sp/>the<sp/>file<sp/>not</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>being<sp/>there;<sp/>for<sp/>example,<sp/>file<sp/>there<sp/>but<sp/>unreadable.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>&lt;errno.h&gt;<sp/>isn&apos;t<sp/>available,<sp/>then<sp/>we<sp/>cannot<sp/>test<sp/>the<sp/>cause.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENOENT</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errno<sp/>!=<sp/>ENOENT)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(tfile);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>oops,<sp/>it&apos;s<sp/>there;<sp/>close<sp/>tfile<sp/>&amp;<sp/>try<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!<sp/>NO_MKTEMP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>mktemp()<sp/>requires<sp/>the<sp/>initial<sp/>filename<sp/>to<sp/>end<sp/>in<sp/>six<sp/>X&apos;s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TEMP_FILE_NAME<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>override<sp/>from<sp/>jconfig.h<sp/>or<sp/>Makefile<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TEMP_FILE_NAME<sp/><sp/>&quot;%sJPG%dXXXXXX&quot;</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">select_file_name<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>fname)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>next_file_num++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>sprintf(fname,<sp/>TEMP_FILE_NAME,<sp/>TEMP_DIRECTORY,<sp/>next_file_num);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>mktemp(fname);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>file<sp/>name<sp/>is<sp/>unique<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mktemp<sp/>replaces<sp/>the<sp/>trailing<sp/>XXXXXX<sp/>with<sp/>a<sp/>unique<sp/>string<sp/>of<sp/>characters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MKTEMP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>Memory<sp/>allocation<sp/>and<sp/>freeing<sp/>are<sp/>controlled<sp/>by<sp/>the<sp/>regular<sp/>library</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>routines<sp/>malloc()<sp/>and<sp/>free().</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="normal">jpeg_get_small<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeofobject);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">jpeg_free_small<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>&quot;Large&quot;<sp/>objects<sp/>are<sp/>treated<sp/>the<sp/>same<sp/>as<sp/>&quot;small&quot;<sp/>ones.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>NB:<sp/>although<sp/>we<sp/>include<sp/>FAR<sp/>keywords<sp/>in<sp/>the<sp/>routine<sp/>declarations,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>this<sp/>file<sp/>won&apos;t<sp/>actually<sp/>work<sp/>in<sp/>80x86<sp/>small/medium<sp/>model;<sp/>at<sp/>least,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>you<sp/>probably<sp/>won&apos;t<sp/>be<sp/>able<sp/>to<sp/>process<sp/>useful-size<sp/>images<sp/>in<sp/>only<sp/>64KB.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="normal">jpeg_get_large<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>malloc(sizeofobject);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">jpeg_free_large<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>This<sp/>routine<sp/>computes<sp/>the<sp/>total<sp/>memory<sp/>space<sp/>available<sp/>for<sp/>allocation.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>It&apos;s<sp/>impossible<sp/>to<sp/>do<sp/>this<sp/>in<sp/>a<sp/>portable<sp/>way;<sp/>our<sp/>current<sp/>solution<sp/>is</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>to<sp/>make<sp/>the<sp/>user<sp/>tell<sp/>us<sp/>(with<sp/>a<sp/>default<sp/>value<sp/>set<sp/>at<sp/>compile<sp/>time).</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>can<sp/>actually<sp/>get<sp/>the<sp/>available<sp/>space,<sp/>it&apos;s<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>subtract</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>a<sp/>slop<sp/>factor<sp/>of<sp/>5%<sp/>or<sp/>so.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEFAULT_MAX_MEM<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>so<sp/>can<sp/>override<sp/>from<sp/>makefile<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_MAX_MEM<sp/><sp/><sp/><sp/><sp/>1000000L<sp/></highlight><highlight class="comment">/*<sp/>default:<sp/>one<sp/>megabyte<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">jpeg_mem_available<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min_bytes_needed,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_bytes_needed,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>already_allocated)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cinfo-&gt;mem-&gt;max_memory_to_use<sp/>-<sp/>already_allocated;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Backing<sp/>store<sp/>(temporary<sp/>file)<sp/>management.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>Backing<sp/>store<sp/>objects<sp/>are<sp/>only<sp/>used<sp/>when<sp/>the<sp/>value<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>jpeg_mem_available<sp/>is<sp/>less<sp/>than<sp/>the<sp/>total<sp/>space<sp/>needed.<sp/><sp/>You<sp/>can<sp/>dispense</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>with<sp/>these<sp/>routines<sp/>if<sp/>you<sp/>have<sp/>plenty<sp/>of<sp/>virtual<sp/>memory;<sp/>see<sp/>jmemnobs.c.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">read_backing_store<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref><sp/>info,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>buffer_address,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>file_offset,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>byte_count)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(info-&gt;temp_file,<sp/>file_offset,<sp/>SEEK_SET))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_TFILE_SEEK);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(JFREAD(info-&gt;temp_file,<sp/>buffer_address,<sp/>byte_count)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>byte_count)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_TFILE_READ);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">write_backing_store<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref><sp/>info,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>buffer_address,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>file_offset,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>byte_count)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(info-&gt;temp_file,<sp/>file_offset,<sp/>SEEK_SET))</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_TFILE_SEEK);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(JFWRITE(info-&gt;temp_file,<sp/>buffer_address,<sp/>byte_count)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>byte_count)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_TFILE_WRITE);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">close_backing_store<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref><sp/>info)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>fclose(info-&gt;temp_file);<sp/><sp/></highlight><highlight class="comment">/*<sp/>close<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>unlink(info-&gt;temp_name);<sp/><sp/></highlight><highlight class="comment">/*<sp/>delete<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>your<sp/>system<sp/>doesn&apos;t<sp/>have<sp/>unlink(),<sp/>use<sp/>remove()<sp/>instead.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>remove()<sp/>is<sp/>the<sp/>ANSI-standard<sp/>name<sp/>for<sp/>this<sp/>function,<sp/>but<sp/>if</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>your<sp/>system<sp/>was<sp/>ANSI<sp/>you&apos;d<sp/>be<sp/>using<sp/>jmemansi.c,<sp/>right?</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>TRACEMSS(cinfo,<sp/>1,<sp/>JTRC_TFILE_CLOSE,<sp/>info-&gt;temp_name);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>Initial<sp/>opening<sp/>of<sp/>a<sp/>backing-store<sp/>object.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">jpeg_open_backing_store<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref><sp/>info,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total_bytes_needed)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>select_file_name(info-&gt;temp_name);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((info-&gt;temp_file<sp/>=<sp/>fopen(info-&gt;temp_name,<sp/>RW_BINARY))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXITS(cinfo,<sp/>JERR_TFILE_CREATE,<sp/>info-&gt;temp_name);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>info-&gt;read_backing_store<sp/>=<sp/>read_backing_store;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>info-&gt;write_backing_store<sp/>=<sp/>write_backing_store;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>info-&gt;close_backing_store<sp/>=<sp/>close_backing_store;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>TRACEMSS(cinfo,<sp/>1,<sp/>JTRC_TFILE_OPEN,<sp/>info-&gt;temp_name);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>These<sp/>routines<sp/>take<sp/>care<sp/>of<sp/>any<sp/>system-dependent<sp/>initialization<sp/>and</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>cleanup<sp/>required.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">jpeg_mem_init<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>next_file_num<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>temp<sp/>file<sp/>name<sp/>generator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DEFAULT_MAX_MEM;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>for<sp/>max_memory_to_use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">jpeg_mem_term<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c"/>
  </compounddef>
</doxygen>
