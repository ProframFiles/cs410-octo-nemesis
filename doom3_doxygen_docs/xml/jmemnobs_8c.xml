<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jmemnobs_8c" kind="file">
    <compoundname>jmemnobs.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
    <includes refid="jmemsys_8h" local="yes">jmemsys.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jmemnobs_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="18" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jmemnobs_8c_1ab60e1599069962f06594912a1dfe07a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* jpeg_get_small</definition>
        <argsstring>(j_common_ptr cinfo, size_t sizeofobject)</argsstring>
        <name>jpeg_get_small</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="29" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1a4548fda4b8765bdaac9f94021e5653d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_free_small</definition>
        <argsstring>(j_common_ptr cinfo, void *object, size_t sizeofobject)</argsstring>
        <name>jpeg_free_small</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1a5cd972eb6ff2e180a2fa41e1da4176af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* jpeg_get_large</definition>
        <argsstring>(j_common_ptr cinfo, size_t sizeofobject)</argsstring>
        <name>jpeg_get_large</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1af71475763ddc75f28c3b6efc3ad212b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_free_large</definition>
        <argsstring>(j_common_ptr cinfo, void *object, size_t sizeofobject)</argsstring>
        <name>jpeg_free_large</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofobject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1ab589c9da269700f0a3462475c782d7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long jpeg_mem_available</definition>
        <argsstring>(j_common_ptr cinfo, long min_bytes_needed, long max_bytes_needed, long already_allocated)</argsstring>
        <name>jpeg_mem_available</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type>long</type>
          <declname>min_bytes_needed</declname>
        </param>
        <param>
          <type>long</type>
          <declname>max_bytes_needed</declname>
        </param>
        <param>
          <type>long</type>
          <declname>already_allocated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1a7845a6361a93c91fb4ec22b5ab20b0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_open_backing_store</definition>
        <argsstring>(j_common_ptr cinfo, backing_store_ptr info, long total_bytes_needed)</argsstring>
        <name>jpeg_open_backing_store</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <param>
          <type><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref></type>
          <declname>info</declname>
        </param>
        <param>
          <type>long</type>
          <declname>total_bytes_needed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1ad0cdf8a11eca62091fc8c1ca0aa12168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long jpeg_mem_init</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>jpeg_mem_init</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="94" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="jmemnobs_8c_1a37ea2756f17c1fe8eac98dee4e2a6106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jpeg_mem_term</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>jpeg_mem_term</name>
        <param>
          <type><ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref></type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c" bodystart="100" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jmemnobs.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1992-1994,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>provides<sp/>a<sp/>really<sp/>simple<sp/>implementation<sp/>of<sp/>the<sp/>system-</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>dependent<sp/>portion<sp/>of<sp/>the<sp/>JPEG<sp/>memory<sp/>manager.<sp/><sp/>This<sp/>implementation</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>assumes<sp/>that<sp/>no<sp/>backing-store<sp/>files<sp/>are<sp/>needed:<sp/>all<sp/>required<sp/>space</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>obtained<sp/>from<sp/>ri.Malloc().</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>very<sp/>portable<sp/>in<sp/>the<sp/>sense<sp/>that<sp/>it&apos;ll<sp/>compile<sp/>on<sp/>almost<sp/>anything,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>you&apos;d<sp/>better<sp/>have<sp/>lots<sp/>of<sp/>main<sp/>memory<sp/>(or<sp/>virtual<sp/>memory)<sp/>if<sp/>you<sp/>want</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>to<sp/>process<sp/>big<sp/>images.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>max_memory_to_use<sp/>option<sp/>is<sp/>ignored<sp/>by<sp/>this<sp/>implementation.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jmemsys.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>import<sp/>the<sp/>system-dependent<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Memory<sp/>allocation<sp/>and<sp/>ri.Freeing<sp/>are<sp/>controlled<sp/>by<sp/>the<sp/>regular<sp/>library</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>routines<sp/>ri.Malloc()<sp/>and<sp/>ri.Free().</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="normal">jpeg_get_small<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(sizeofobject);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">jpeg_free_small<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>&quot;Large&quot;<sp/>objects<sp/>are<sp/>treated<sp/>the<sp/>same<sp/>as<sp/>&quot;small&quot;<sp/>ones.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>NB:<sp/>although<sp/>we<sp/>include<sp/>FAR<sp/>keywords<sp/>in<sp/>the<sp/>routine<sp/>declarations,</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>this<sp/>file<sp/>won&apos;t<sp/>actually<sp/>work<sp/>in<sp/>80x86<sp/>small/medium<sp/>model;<sp/>at<sp/>least,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>you<sp/>probably<sp/>won&apos;t<sp/>be<sp/>able<sp/>to<sp/>process<sp/>useful-size<sp/>images<sp/>in<sp/>only<sp/>64KB.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="normal">jpeg_get_large<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>malloc(sizeofobject);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">jpeg_free_large<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>free(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>This<sp/>routine<sp/>computes<sp/>the<sp/>total<sp/>memory<sp/>space<sp/>available<sp/>for<sp/>allocation.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Here<sp/>we<sp/>always<sp/>say,<sp/>&quot;we<sp/>got<sp/>all<sp/>you<sp/>want<sp/>bud!&quot;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">jpeg_mem_available<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min_bytes_needed,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_bytes_needed,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>already_allocated)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_bytes_needed;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Backing<sp/>store<sp/>(temporary<sp/>file)<sp/>management.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Since<sp/>jpeg_mem_available<sp/>always<sp/>promised<sp/>the<sp/>moon,</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>this<sp/>should<sp/>never<sp/>be<sp/>called<sp/>and<sp/>we<sp/>can<sp/>just<sp/>error<sp/>out.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">jpeg_open_backing_store<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref><sp/>info,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total_bytes_needed)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_NO_BACKING_STORE);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>These<sp/>routines<sp/>take<sp/>care<sp/>of<sp/>any<sp/>system-dependent<sp/>initialization<sp/>and</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>cleanup<sp/>required.<sp/><sp/>Here,<sp/>there<sp/>isn&apos;t<sp/>any.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">jpeg_mem_init<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>set<sp/>max_memory_to_use<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">jpeg_mem_term<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c"/>
  </compounddef>
</doxygen>
