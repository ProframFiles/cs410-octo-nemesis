<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jmemsys_8h" kind="file">
    <compoundname>jmemsys.h</compoundname>
    <includedby refid="jmemansi_8c" local="yes">E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemansi.c</includedby>
    <includedby refid="jmemdos_8c" local="yes">E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemdos.c</includedby>
    <includedby refid="jmemmgr_8c" local="yes">E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemmgr.c</includedby>
    <includedby refid="jmemname_8c" local="yes">E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemname.c</includedby>
    <includedby refid="jmemnobs_8c" local="yes">E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemnobs.c</includedby>
    <innerclass refid="structbacking__store__struct" prot="public">backing_store_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jmemsys_8h_1a7b31776a5d7d5be0ab44c4993a174434" prot="public" static="no">
        <name>MAX_ALLOC_CHUNK</name>
        <initializer>1000000000L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="76" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jmemsys_8h_1a83c496c242b727d7c2def22f79f75d1a" prot="public" static="no">
        <name>TEMP_NAME_LENGTH</name>
        <initializer>64	/* max length of a temporary file&apos;s name */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="114" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jmemsys_8h_1a2e08364903e928910fa9b65ea16c19f9" prot="public" static="no">
        <type>struct <ref refid="structbacking__store__struct" kindref="compound">backing_store_struct</ref> *</type>
        <definition>typedef struct backing_store_struct* backing_store_ptr</definition>
        <argsstring></argsstring>
        <name>backing_store_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="129" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jmemsys_8h_1a053e143ffd76dfe3b362c09f7019ea93" prot="public" static="no">
        <type>struct <ref refid="structbacking__store__struct" kindref="compound">backing_store_struct</ref></type>
        <definition>typedef struct backing_store_struct  backing_store_info</definition>
        <argsstring></argsstring>
        <name>backing_store_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jmemsys_8h_1a40a032fe6ff5712b1041402aad601775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void *jpeg_get_small</type>
        <definition>EXTERN void FAR *jpeg_get_large JPP</definition>
        <argsstring>((j_common_ptr cinfo, size_t sizeofobject))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo, size_t sizeofobject)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="jmemsys_8h_1a3805ab7430688b546e958d890923e916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void jpeg_free_small</type>
        <definition>EXTERN void jpeg_free_small JPP</definition>
        <argsstring>((j_common_ptr cinfo, void *object, size_t sizeofobject))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo, void *object, size_t sizeofobject)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="jmemsys_8h_1a33cf6216380a08d2771fef40cf761229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void jpeg_free_large</type>
        <definition>EXTERN void jpeg_free_large JPP</definition>
        <argsstring>((j_common_ptr cinfo, void FAR *object, size_t sizeofobject))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo, void FAR *object, size_t sizeofobject)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="jmemsys_8h_1a68b86f8c09bb2b200946ccc54cb6b4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN long jpeg_mem_available</type>
        <definition>EXTERN long jpeg_mem_available JPP</definition>
        <argsstring>((j_common_ptr cinfo, long min_bytes_needed, long max_bytes_needed, long already_allocated))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo, long min_bytes_needed, long max_bytes_needed, long already_allocated)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="jmemsys_8h_1a75a6ae5e6cba0d2dd60b27ab35ad8787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN void jpeg_open_backing_store</type>
        <definition>EXTERN void jpeg_open_backing_store JPP</definition>
        <argsstring>((j_common_ptr cinfo, backing_store_ptr info, long total_bytes_needed))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo, <ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref> info, long total_bytes_needed)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="jmemsys_8h_1af11bb982288559afc37b86c1284e75c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXTERN long jpeg_mem_init</type>
        <definition>EXTERN void jpeg_mem_term JPP</definition>
        <argsstring>((j_common_ptr cinfo))</argsstring>
        <name>JPP</name>
        <param>
          <type>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref> cinfo)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h" line="181" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jmemsys.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1992-1994,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>include<sp/>file<sp/>defines<sp/>the<sp/>interface<sp/>between<sp/>the<sp/>system-independent</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>and<sp/>system-dependent<sp/>portions<sp/>of<sp/>the<sp/>JPEG<sp/>memory<sp/>manager.<sp/><sp/>No<sp/>other</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modules<sp/>need<sp/>include<sp/>it.<sp/><sp/>(The<sp/>system-independent<sp/>portion<sp/>is<sp/>jmemmgr.c;</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>there<sp/>are<sp/>several<sp/>different<sp/>versions<sp/>of<sp/>the<sp/>system-dependent<sp/>portion.)</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>works<sp/>as-is<sp/>for<sp/>the<sp/>system-dependent<sp/>memory<sp/>managers<sp/>supplied</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>IJG<sp/>distribution.<sp/><sp/>You<sp/>may<sp/>need<sp/>to<sp/>modify<sp/>it<sp/>if<sp/>you<sp/>write<sp/>a</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>custom<sp/>memory<sp/>manager.<sp/><sp/>If<sp/>system-dependent<sp/>changes<sp/>are<sp/>needed<sp/>in</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>this<sp/>file,<sp/>the<sp/>best<sp/>method<sp/>is<sp/>to<sp/>#ifdef<sp/>them<sp/>based<sp/>on<sp/>a<sp/>configuration</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>symbol<sp/>supplied<sp/>in<sp/>jconfig.h,<sp/>as<sp/>we<sp/>have<sp/>done<sp/>with<sp/>USE_MSDOS_MEMMGR.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Short<sp/>forms<sp/>of<sp/>external<sp/>names<sp/>for<sp/>systems<sp/>with<sp/>brain-damaged<sp/>linkers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEED_SHORT_EXTERNAL_NAMES</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_get_small<sp/><sp/><sp/><sp/><sp/><sp/>jGetSmall</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_free_small<sp/><sp/><sp/><sp/><sp/>jFreeSmall</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_get_large<sp/><sp/><sp/><sp/><sp/><sp/>jGetLarge</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_free_large<sp/><sp/><sp/><sp/><sp/>jFreeLarge</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_mem_available<sp/><sp/>jMemAvail</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_open_backing_store<sp/>jOpenBackStore</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_mem_init<sp/><sp/><sp/><sp/><sp/><sp/><sp/>jMemInit</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>jpeg_mem_term<sp/><sp/><sp/><sp/><sp/><sp/><sp/>jMemTerm</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NEED_SHORT_EXTERNAL_NAMES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>These<sp/>two<sp/>functions<sp/>are<sp/>used<sp/>to<sp/>allocate<sp/>and<sp/>release<sp/>small<sp/>chunks<sp/>of</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>memory.<sp/><sp/>(Typically<sp/>the<sp/>total<sp/>amount<sp/>requested<sp/>through<sp/>jpeg_get_small<sp/>is</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>no<sp/>more<sp/>than<sp/>20K<sp/>or<sp/>so;<sp/>this<sp/>will<sp/>be<sp/>requested<sp/>in<sp/>chunks<sp/>of<sp/>a<sp/>few<sp/>K<sp/>each.)</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Behavior<sp/>should<sp/>be<sp/>the<sp/>same<sp/>as<sp/>for<sp/>the<sp/>standard<sp/>library<sp/>functions<sp/>malloc</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>and<sp/>free;<sp/>in<sp/>particular,<sp/>jpeg_get_small<sp/>must<sp/>return<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>On<sp/>most<sp/>systems,<sp/>these<sp/>ARE<sp/>malloc<sp/>and<sp/>free.<sp/><sp/>jpeg_free_small<sp/>is<sp/>passed<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>size<sp/>of<sp/>the<sp/>object<sp/>being<sp/>freed,<sp/>just<sp/>in<sp/>case<sp/>it&apos;s<sp/>needed.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>On<sp/>an<sp/>80x86<sp/>machine<sp/>using<sp/>small-data<sp/>memory<sp/>model,<sp/>these<sp/>manage<sp/>near<sp/>heap.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>jpeg_get_small<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject));</highlight></codeline>
<codeline lineno="47"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>jpeg_free_small<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>These<sp/>two<sp/>functions<sp/>are<sp/>used<sp/>to<sp/>allocate<sp/>and<sp/>release<sp/>large<sp/>chunks<sp/>of</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>memory<sp/>(up<sp/>to<sp/>the<sp/>total<sp/>free<sp/>space<sp/>designated<sp/>by<sp/>jpeg_mem_available).</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>interface<sp/>is<sp/>the<sp/>same<sp/>as<sp/>above,<sp/>except<sp/>that<sp/>on<sp/>an<sp/>80x86<sp/>machine,</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>far<sp/>pointers<sp/>are<sp/>used.<sp/><sp/>On<sp/>most<sp/>other<sp/>machines<sp/>these<sp/>are<sp/>identical<sp/>to</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>the<sp/>jpeg_get/free_small<sp/>routines;<sp/>but<sp/>we<sp/>keep<sp/>them<sp/>separate<sp/>anyway,</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>in<sp/>case<sp/>a<sp/>different<sp/>allocation<sp/>strategy<sp/>is<sp/>desirable<sp/>for<sp/>large<sp/>chunks.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>jpeg_get_large<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject));</highlight></codeline>
<codeline lineno="60"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>jpeg_free_large<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofobject));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>The<sp/>macro<sp/>MAX_ALLOC_CHUNK<sp/>designates<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>may</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>be<sp/>requested<sp/>in<sp/>a<sp/>single<sp/>call<sp/>to<sp/>jpeg_get_large<sp/>(and<sp/>jpeg_get_small<sp/>for<sp/>that</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>matter,<sp/>but<sp/>that<sp/>case<sp/>should<sp/>never<sp/>come<sp/>into<sp/>play).<sp/><sp/>This<sp/>macro<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>to<sp/>model<sp/>the<sp/>64Kb-segment-size<sp/>limit<sp/>of<sp/>far<sp/>addressing<sp/>on<sp/>80x86<sp/>machines.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>On<sp/>those<sp/>machines,<sp/>we<sp/>expect<sp/>that<sp/>jconfig.h<sp/>will<sp/>provide<sp/>a<sp/>proper<sp/>value.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>On<sp/>machines<sp/>with<sp/>32-bit<sp/>flat<sp/>address<sp/>spaces,<sp/>any<sp/>large<sp/>constant<sp/>may<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>NB:<sp/>jmemmgr.c<sp/>expects<sp/>that<sp/>MAX_ALLOC_CHUNK<sp/>will<sp/>be<sp/>representable<sp/>as<sp/>type</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>size_t<sp/>and<sp/>will<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>sizeof(align_type).</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_ALLOC_CHUNK<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>may<sp/>be<sp/>overridden<sp/>in<sp/>jconfig.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_ALLOC_CHUNK<sp/><sp/>1000000000L</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>This<sp/>routine<sp/>computes<sp/>the<sp/>total<sp/>space<sp/>still<sp/>available<sp/>for<sp/>allocation<sp/>by</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>jpeg_get_large.<sp/><sp/>If<sp/>more<sp/>space<sp/>than<sp/>this<sp/>is<sp/>needed,<sp/>backing<sp/>store<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>used.<sp/><sp/>NOTE:<sp/>any<sp/>memory<sp/>already<sp/>allocated<sp/>must<sp/>not<sp/>be<sp/>counted.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>There<sp/>is<sp/>a<sp/>minimum<sp/>space<sp/>requirement,<sp/>corresponding<sp/>to<sp/>the<sp/>minimum</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>feasible<sp/>buffer<sp/>sizes;<sp/>jmemmgr.c<sp/>will<sp/>request<sp/>that<sp/>much<sp/>space<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>jpeg_mem_available<sp/>returns<sp/>zero.<sp/><sp/>The<sp/>maximum<sp/>space<sp/>needed,<sp/>enough<sp/>to<sp/>hold</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>all<sp/>working<sp/>storage<sp/>in<sp/>memory,<sp/>is<sp/>also<sp/>passed<sp/>in<sp/>case<sp/>it<sp/>is<sp/>useful.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>Finally,<sp/>the<sp/>total<sp/>space<sp/>already<sp/>allocated<sp/>is<sp/>passed.<sp/><sp/>If<sp/>no<sp/>better</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>method<sp/>is<sp/>available,<sp/>cinfo-&gt;mem-&gt;max_memory_to_use<sp/>-<sp/>already_allocated</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>is<sp/>often<sp/>a<sp/>suitable<sp/>calculation.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>OK<sp/>for<sp/>jpeg_mem_available<sp/>to<sp/>underestimate<sp/>the<sp/>space<sp/>available</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>(that&apos;ll<sp/>just<sp/>lead<sp/>to<sp/>more<sp/>backing-store<sp/>access<sp/>than<sp/>is<sp/>really<sp/>necessary).</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>However,<sp/>an<sp/>overestimate<sp/>will<sp/>lead<sp/>to<sp/>failure.<sp/><sp/>Hence<sp/>it&apos;s<sp/>wise<sp/>to<sp/>subtract</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>a<sp/>slop<sp/>factor<sp/>from<sp/>the<sp/>true<sp/>available<sp/>space.<sp/><sp/>5%<sp/>should<sp/>be<sp/>enough.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>On<sp/>machines<sp/>with<sp/>lots<sp/>of<sp/>virtual<sp/>memory,<sp/>any<sp/>large<sp/>constant<sp/>may<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>Conversely,<sp/>zero<sp/>may<sp/>be<sp/>returned<sp/>to<sp/>always<sp/>use<sp/>the<sp/>minimum<sp/>amount<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>jpeg_mem_available<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min_bytes_needed,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_bytes_needed,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>already_allocated));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>This<sp/>structure<sp/>holds<sp/>whatever<sp/>state<sp/>is<sp/>needed<sp/>to<sp/>access<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>backing-store<sp/>object.<sp/><sp/>The<sp/>read/write/close<sp/>method<sp/>pointers<sp/>are<sp/>called</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>by<sp/>jmemmgr.c<sp/>to<sp/>manipulate<sp/>the<sp/>backing-store<sp/>object;<sp/>all<sp/>other<sp/>fields</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>are<sp/>private<sp/>to<sp/>the<sp/>system-dependent<sp/>backing<sp/>store<sp/>routines.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMP_NAME_LENGTH<sp/><sp/><sp/>64<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>length<sp/>of<sp/>a<sp/>temporary<sp/>file&apos;s<sp/>name<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_MSDOS_MEMMGR<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DOS-specific<sp/>junk<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>XMSH;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>type<sp/>of<sp/>extended-memory<sp/>handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>EMSH;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>type<sp/>of<sp/>expanded-memory<sp/>handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>file_handle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DOS<sp/>file<sp/>handle<sp/>if<sp/>it&apos;s<sp/>a<sp/>temp<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>XMSH<sp/>xms_handle;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>if<sp/>it&apos;s<sp/>a<sp/>chunk<sp/>of<sp/>XMS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>EMSH<sp/>ems_handle;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>if<sp/>it&apos;s<sp/>a<sp/>chunk<sp/>of<sp/>EMS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/>handle_union;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_MSDOS_MEMMGR<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbacking__store__struct" kindref="compound">backing_store_struct</ref><sp/>*<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_ptr</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structbacking__store__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbacking__store__struct" kindref="compound">backing_store_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Methods<sp/>for<sp/>reading/writing/closing<sp/>this<sp/>backing-store<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>JMETHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>read_backing_store,<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backing_store_ptr<sp/>info,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>buffer_address,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>file_offset,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>byte_count));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>JMETHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>write_backing_store,<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backing_store_ptr<sp/>info,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*<sp/>buffer_address,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>file_offset,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>byte_count));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>JMETHOD(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>close_backing_store,<sp/>(<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backing_store_ptr<sp/>info));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Private<sp/>fields<sp/>for<sp/>system-dependent<sp/>backing-store<sp/>management<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_MSDOS_MEMMGR</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>the<sp/>MS-DOS<sp/>manager<sp/>(jmemdos.c),<sp/>we<sp/>need:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>handle_union<sp/>handle;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reference<sp/>to<sp/>backing-store<sp/>storage<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_name[TEMP_NAME_LENGTH];<sp/></highlight><highlight class="comment">/*<sp/>name<sp/>if<sp/>it&apos;s<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>a<sp/>typical<sp/>implementation<sp/>with<sp/>temp<sp/>files,<sp/>we<sp/>need:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>FILE<sp/>*<sp/>temp_file;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stdio<sp/>reference<sp/>to<sp/>temp<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_name[TEMP_NAME_LENGTH];<sp/></highlight><highlight class="comment">/*<sp/>name<sp/>of<sp/>temp<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/><ref refid="structbacking__store__struct" kindref="compound">backing_store_info</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>Initial<sp/>opening<sp/>of<sp/>a<sp/>backing-store<sp/>object.<sp/><sp/>This<sp/>must<sp/>fill<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>read/write/close<sp/>pointers<sp/>in<sp/>the<sp/>object.<sp/><sp/>The<sp/>read/write<sp/>routines</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>may<sp/>take<sp/>an<sp/>error<sp/>exit<sp/>if<sp/>the<sp/>specified<sp/>maximum<sp/>file<sp/>size<sp/>is<sp/>exceeded.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>(If<sp/>jpeg_mem_available<sp/>always<sp/>returns<sp/>a<sp/>large<sp/>value,<sp/>this<sp/>routine<sp/>can</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>just<sp/>take<sp/>an<sp/>error<sp/>exit.)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>jpeg_open_backing_store<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backing_store_ptr<sp/>info,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total_bytes_needed));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>These<sp/>routines<sp/>take<sp/>care<sp/>of<sp/>any<sp/>system-dependent<sp/>initialization<sp/>and</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>cleanup<sp/>required.<sp/><sp/>jpeg_mem_init<sp/>will<sp/>be<sp/>called<sp/>before<sp/>anything<sp/>is</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>allocated<sp/>(and,<sp/>therefore,<sp/>nothing<sp/>in<sp/>cinfo<sp/>is<sp/>of<sp/>use<sp/>except<sp/>the<sp/>error</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>manager<sp/>pointer).<sp/><sp/>It<sp/>should<sp/>return<sp/>a<sp/>suitable<sp/>default<sp/>value<sp/>for</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>max_memory_to_use;<sp/>this<sp/>may<sp/>subsequently<sp/>be<sp/>overridden<sp/>by<sp/>the<sp/>surrounding</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>application.<sp/><sp/>(Note<sp/>that<sp/>max_memory_to_use<sp/>is<sp/>only<sp/>important<sp/>if</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>jpeg_mem_available<sp/>chooses<sp/>to<sp/>consult<sp/>it<sp/>...<sp/>no<sp/>one<sp/>else<sp/>will.)</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>jpeg_mem_term<sp/>may<sp/>assume<sp/>that<sp/>all<sp/>requested<sp/>memory<sp/>has<sp/>been<sp/>freed<sp/>and<sp/>that</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>all<sp/>opened<sp/>backing-store<sp/>objects<sp/>have<sp/>been<sp/>closed.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>jpeg_mem_init<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo));</highlight></codeline>
<codeline lineno="182"><highlight class="normal">EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>jpeg_mem_term<sp/>JPP((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref><sp/>cinfo));</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jmemsys.h"/>
  </compounddef>
</doxygen>
