<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="jquant1_8c" kind="file">
    <compoundname>jquant1.c</compoundname>
    <includes refid="jinclude_8h" local="yes">jinclude.h</includes>
    <includes refid="jpeglib_8h" local="yes">jpeglib.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="jquant1_8c_1ad5c3cdfae3019b8223973041a2a1304b" prot="public" static="no">
        <name>JPEG_INTERNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jquant1.c" line="13" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jquant1.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>jquant1.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1991-1995,<sp/>Thomas<sp/>G.<sp/>Lane.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Independent<sp/>JPEG<sp/>Group&apos;s<sp/>software.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>the<sp/>accompanying<sp/>README<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>1-pass<sp/>color<sp/>quantization<sp/>(color<sp/>mapping)<sp/>routines.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>These<sp/>routines<sp/>provide<sp/>mapping<sp/>to<sp/>a<sp/>fixed<sp/>color<sp/>map<sp/>using<sp/>equally<sp/>spaced</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>color<sp/>values.<sp/><sp/>Optional<sp/>Floyd-Steinberg<sp/>or<sp/>ordered<sp/>dithering<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JPEG_INTERNALS</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;jinclude.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jpeglib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QUANT_1PASS_SUPPORTED</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>The<sp/>main<sp/>purpose<sp/>of<sp/>1-pass<sp/>quantization<sp/>is<sp/>to<sp/>provide<sp/>a<sp/>fast,<sp/>if<sp/>not<sp/>very</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>high<sp/>quality,<sp/>colormapped<sp/>output<sp/>capability.<sp/><sp/>A<sp/>2-pass<sp/>quantizer<sp/>usually</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>gives<sp/>better<sp/>visual<sp/>quality;<sp/>however,<sp/>for<sp/>quantized<sp/>grayscale<sp/>output<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>quantizer<sp/>is<sp/>perfectly<sp/>adequate.<sp/><sp/>Dithering<sp/>is<sp/>highly<sp/>recommended<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>quantizer,<sp/>though<sp/>you<sp/>can<sp/>turn<sp/>it<sp/>off<sp/>if<sp/>you<sp/>really<sp/>want<sp/>to.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>In<sp/>1-pass<sp/>quantization<sp/>the<sp/>colormap<sp/>must<sp/>be<sp/>chosen<sp/>in<sp/>advance<sp/>of<sp/>seeing<sp/>the</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>image.<sp/><sp/>We<sp/>use<sp/>a<sp/>map<sp/>consisting<sp/>of<sp/>all<sp/>combinations<sp/>of<sp/>Ncolors[i]<sp/>color</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>values<sp/>for<sp/>the<sp/>i&apos;th<sp/>component.<sp/><sp/>The<sp/>Ncolors[]<sp/>values<sp/>are<sp/>chosen<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>their<sp/>product,<sp/>the<sp/>total<sp/>number<sp/>of<sp/>colors,<sp/>is<sp/>no<sp/>more<sp/>than<sp/>that<sp/>requested.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(In<sp/>most<sp/>cases,<sp/>the<sp/>product<sp/>will<sp/>be<sp/>somewhat<sp/>less.)</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Since<sp/>the<sp/>colormap<sp/>is<sp/>orthogonal,<sp/>the<sp/>representative<sp/>value<sp/>for<sp/>each<sp/>color</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>component<sp/>can<sp/>be<sp/>determined<sp/>without<sp/>considering<sp/>the<sp/>other<sp/>components;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>then<sp/>these<sp/>indexes<sp/>can<sp/>be<sp/>combined<sp/>into<sp/>a<sp/>colormap<sp/>index<sp/>by<sp/>a<sp/>standard</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>N-dimensional-array-subscript<sp/>calculation.<sp/><sp/>Most<sp/>of<sp/>the<sp/>arithmetic<sp/>involved</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>precalculated<sp/>and<sp/>stored<sp/>in<sp/>the<sp/>lookup<sp/>table<sp/>colorindex[].</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>colorindex[i][j]<sp/>maps<sp/>pixel<sp/>value<sp/>j<sp/>in<sp/>component<sp/>i<sp/>to<sp/>the<sp/>nearest</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>representative<sp/>value<sp/>(grid<sp/>plane)<sp/>for<sp/>that<sp/>component;<sp/>this<sp/>index<sp/>is</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>multiplied<sp/>by<sp/>the<sp/>array<sp/>stride<sp/>for<sp/>component<sp/>i,<sp/>so<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>index<sp/>of<sp/>the<sp/>colormap<sp/>entry<sp/>closest<sp/>to<sp/>a<sp/>given<sp/>pixel<sp/>value<sp/>is<sp/>just</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>sum(<sp/>colorindex[component-number][pixel-component-value]<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Aside<sp/>from<sp/>being<sp/>fast,<sp/>this<sp/>scheme<sp/>allows<sp/>for<sp/>variable<sp/>spacing<sp/>between</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>representative<sp/>values<sp/>with<sp/>no<sp/>additional<sp/>lookup<sp/>cost.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>If<sp/>gamma<sp/>correction<sp/>has<sp/>been<sp/>applied<sp/>in<sp/>color<sp/>conversion,<sp/>it<sp/>might<sp/>be<sp/>wise</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>to<sp/>adjust<sp/>the<sp/>color<sp/>grid<sp/>spacing<sp/>so<sp/>that<sp/>the<sp/>representative<sp/>colors<sp/>are</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>equidistant<sp/>in<sp/>linear<sp/>space.<sp/><sp/>At<sp/>this<sp/>writing,<sp/>gamma<sp/>correction<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>implemented<sp/>by<sp/>jdcolor,<sp/>so<sp/>nothing<sp/>is<sp/>done<sp/>here.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declarations<sp/>for<sp/>ordered<sp/>dithering.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>We<sp/>use<sp/>a<sp/>standard<sp/>16x16<sp/>ordered<sp/>dither<sp/>array.<sp/><sp/>The<sp/>basic<sp/>concept<sp/>of<sp/>ordered</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>dithering<sp/>is<sp/>described<sp/>in<sp/>many<sp/>references,<sp/>for<sp/>instance<sp/>Dale<sp/>Schumacher&apos;s</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>chapter<sp/>II.2<sp/>of<sp/>Graphics<sp/>Gems<sp/>II<sp/>(James<sp/>Arvo,<sp/>ed.<sp/>Academic<sp/>Press,<sp/>1991).</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>In<sp/>place<sp/>of<sp/>Schumacher&apos;s<sp/>comparisons<sp/>against<sp/>a<sp/>&quot;threshold&quot;<sp/>value,<sp/>we<sp/>add<sp/>a</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>&quot;dither&quot;<sp/>value<sp/>to<sp/>the<sp/>input<sp/>pixel<sp/>and<sp/>then<sp/>round<sp/>the<sp/>result<sp/>to<sp/>the<sp/>nearest</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>output<sp/>value.<sp/><sp/>The<sp/>dither<sp/>value<sp/>is<sp/>equivalent<sp/>to<sp/>(0.5<sp/>-<sp/>threshold)<sp/>times</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>the<sp/>distance<sp/>between<sp/>output<sp/>values.<sp/><sp/>For<sp/>ordered<sp/>dithering,<sp/>we<sp/>assume<sp/>that</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>the<sp/>output<sp/>colors<sp/>are<sp/>equally<sp/>spaced;<sp/>if<sp/>not,<sp/>results<sp/>will<sp/>probably<sp/>be</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>worse,<sp/>since<sp/>the<sp/>dither<sp/>may<sp/>be<sp/>too<sp/>much<sp/>or<sp/>too<sp/>little<sp/>at<sp/>a<sp/>given<sp/>point.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>The<sp/>normal<sp/>calculation<sp/>would<sp/>be<sp/>to<sp/>form<sp/>pixel<sp/>value<sp/>+<sp/>dither,<sp/>range-limit</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>this<sp/>to<sp/>0..MAXJSAMPLE,<sp/>and<sp/>then<sp/>index<sp/>into<sp/>the<sp/>colorindex<sp/>table<sp/>as<sp/>usual.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>We<sp/>can<sp/>skip<sp/>the<sp/>separate<sp/>range-limiting<sp/>step<sp/>by<sp/>extending<sp/>the<sp/>colorindex</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>table<sp/>in<sp/>both<sp/>directions.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ODITHER_SIZE<sp/><sp/>16<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dimension<sp/>of<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>NB:<sp/>if<sp/>ODITHER_SIZE<sp/>is<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2,<sp/>ODITHER_MASK<sp/>uses<sp/>will<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ODITHER_CELLS<sp/>(ODITHER_SIZE*ODITHER_SIZE)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#<sp/>cells<sp/>in<sp/>matrix<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ODITHER_MASK<sp/><sp/>(ODITHER_SIZE-1)<sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>wrapping<sp/>around<sp/>counters<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ODITHER_MATRIX_PTR)[ODITHER_SIZE];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8<sp/>base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bayer&apos;s<sp/>order-4<sp/>dither<sp/>array.<sp/><sp/>Generated<sp/>by<sp/>the<sp/>code<sp/>given<sp/>in</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Stephen<sp/>Hawley&apos;s<sp/>article<sp/>&quot;Ordered<sp/>Dithering&quot;<sp/>in<sp/>Graphics<sp/>Gems<sp/>I.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>values<sp/>in<sp/>this<sp/>array<sp/>must<sp/>range<sp/>from<sp/>0<sp/>to<sp/>ODITHER_CELLS-1.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/>0,192,<sp/>48,240,<sp/>12,204,<sp/>60,252,<sp/><sp/>3,195,<sp/>51,243,<sp/>15,207,<sp/>63,255<sp/>},</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{<sp/>128,<sp/>64,176,112,140,<sp/>76,188,124,131,<sp/>67,179,115,143,<sp/>79,191,127<sp/>},</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{<sp/><sp/>32,224,<sp/>16,208,<sp/>44,236,<sp/>28,220,<sp/>35,227,<sp/>19,211,<sp/>47,239,<sp/>31,223<sp/>},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{<sp/>160,<sp/>96,144,<sp/>80,172,108,156,<sp/>92,163,<sp/>99,147,<sp/>83,175,111,159,<sp/>95<sp/>},</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/>8,200,<sp/>56,248,<sp/><sp/>4,196,<sp/>52,244,<sp/>11,203,<sp/>59,251,<sp/><sp/>7,199,<sp/>55,247<sp/>},</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>{<sp/>136,<sp/>72,184,120,132,<sp/>68,180,116,139,<sp/>75,187,123,135,<sp/>71,183,119<sp/>},</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{<sp/><sp/>40,232,<sp/>24,216,<sp/>36,228,<sp/>20,212,<sp/>43,235,<sp/>27,219,<sp/>39,231,<sp/>23,215<sp/>},</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{<sp/>168,104,152,<sp/>88,164,100,148,<sp/>84,171,107,155,<sp/>91,167,103,151,<sp/>87<sp/>},</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/>2,194,<sp/>50,242,<sp/>14,206,<sp/>62,254,<sp/><sp/>1,193,<sp/>49,241,<sp/>13,205,<sp/>61,253<sp/>},</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{<sp/>130,<sp/>66,178,114,142,<sp/>78,190,126,129,<sp/>65,177,113,141,<sp/>77,189,125<sp/>},</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{<sp/><sp/>34,226,<sp/>18,210,<sp/>46,238,<sp/>30,222,<sp/>33,225,<sp/>17,209,<sp/>45,237,<sp/>29,221<sp/>},</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>{<sp/>162,<sp/>98,146,<sp/>82,174,110,158,<sp/>94,161,<sp/>97,145,<sp/>81,173,109,157,<sp/>93<sp/>},</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{<sp/><sp/>10,202,<sp/>58,250,<sp/><sp/>6,198,<sp/>54,246,<sp/><sp/>9,201,<sp/>57,249,<sp/><sp/>5,197,<sp/>53,245<sp/>},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{<sp/>138,<sp/>74,186,122,134,<sp/>70,182,118,137,<sp/>73,185,121,133,<sp/>69,181,117<sp/>},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>{<sp/><sp/>42,234,<sp/>26,218,<sp/>38,230,<sp/>22,214,<sp/>41,233,<sp/>25,217,<sp/>37,229,<sp/>21,213<sp/>},</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>{<sp/>170,106,154,<sp/>90,166,102,150,<sp/>86,169,105,153,<sp/>89,165,101,149,<sp/>85<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declarations<sp/>for<sp/>Floyd-Steinberg<sp/>dithering.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>Errors<sp/>are<sp/>accumulated<sp/>into<sp/>the<sp/>array<sp/>fserrors[],<sp/>at<sp/>a<sp/>resolution<sp/>of</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>1/16th<sp/>of<sp/>a<sp/>pixel<sp/>count.<sp/><sp/>The<sp/>error<sp/>at<sp/>a<sp/>given<sp/>pixel<sp/>is<sp/>propagated</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>to<sp/>its<sp/>not-yet-processed<sp/>neighbors<sp/>using<sp/>the<sp/>standard<sp/>F-S<sp/>fractions,</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>(here)<sp/><sp/>7/16</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>3/16<sp/><sp/><sp/><sp/>5/16<sp/><sp/><sp/><sp/>1/16</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>We<sp/>work<sp/>left-to-right<sp/>on<sp/>even<sp/>rows,<sp/>right-to-left<sp/>on<sp/>odd<sp/>rows.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>We<sp/>can<sp/>get<sp/>away<sp/>with<sp/>a<sp/>single<sp/>array<sp/>(holding<sp/>one<sp/>row&apos;s<sp/>worth<sp/>of<sp/>errors)</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>by<sp/>using<sp/>it<sp/>to<sp/>store<sp/>the<sp/>current<sp/>row&apos;s<sp/>errors<sp/>at<sp/>pixel<sp/>columns<sp/>not<sp/>yet</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>processed,<sp/>but<sp/>the<sp/>next<sp/>row&apos;s<sp/>errors<sp/>at<sp/>columns<sp/>already<sp/>processed.<sp/><sp/>We</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>need<sp/>only<sp/>a<sp/>few<sp/>extra<sp/>variables<sp/>to<sp/>hold<sp/>the<sp/>errors<sp/>immediately<sp/>around<sp/>the</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>current<sp/>column.<sp/><sp/>(If<sp/>we<sp/>are<sp/>lucky,<sp/>those<sp/>variables<sp/>are<sp/>in<sp/>registers,<sp/>but</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>even<sp/>if<sp/>not,<sp/>they&apos;re<sp/>probably<sp/>cheaper<sp/>to<sp/>access<sp/>than<sp/>array<sp/>elements<sp/>are.)</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>The<sp/>fserrors[]<sp/>array<sp/>is<sp/>indexed<sp/>[component#][position].</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>We<sp/>provide<sp/>(#columns<sp/>+<sp/>2)<sp/>entries<sp/>per<sp/>component;<sp/>the<sp/>extra<sp/>entry<sp/>at<sp/>each</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>end<sp/>saves<sp/>us<sp/>from<sp/>special-casing<sp/>the<sp/>first<sp/>and<sp/>last<sp/>pixels.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>Note:<sp/>on<sp/>a<sp/>wide<sp/>image,<sp/>we<sp/>might<sp/>not<sp/>have<sp/>enough<sp/>room<sp/>in<sp/>a<sp/>PC&apos;s<sp/>near<sp/>data</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>segment<sp/>to<sp/>hold<sp/>the<sp/>error<sp/>array;<sp/>so<sp/>it<sp/>is<sp/>allocated<sp/>with<sp/>alloc_large.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BITS_IN_JSAMPLE<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>INT16<sp/>FSERROR;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>16<sp/>bits<sp/>should<sp/>be<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LOCFSERROR;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>&apos;int&apos;<sp/>for<sp/>calculation<sp/>temps<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>INT32<sp/>FSERROR;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>may<sp/>need<sp/>more<sp/>than<sp/>16<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>INT32<sp/>LOCFSERROR;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>be<sp/>sure<sp/>calculation<sp/>temps<sp/>are<sp/>big<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FSERROR<sp/>FAR<sp/>*FSERRPTR;<sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>error<sp/>array<sp/>(in<sp/>FAR<sp/>storage!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>subobject<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_Q_COMPS<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>components<sp/>I<sp/>can<sp/>handle<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__color__quantizer" kindref="compound">jpeg_color_quantizer</ref><sp/>pub;<sp/></highlight><highlight class="comment">/*<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initially<sp/>allocated<sp/>colormap<sp/>is<sp/>saved<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>sv_colormap;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>color<sp/>map<sp/>as<sp/>a<sp/>2-D<sp/>pixel<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sv_actual;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>colorindex;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Precomputed<sp/>mapping<sp/>for<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>colorindex[i][j]<sp/>=<sp/>index<sp/>of<sp/>color<sp/>closest<sp/>to<sp/>pixel<sp/>value<sp/>j<sp/>in<sp/>component<sp/>i,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>*<sp/>premultiplied<sp/>as<sp/>described<sp/>above.<sp/><sp/>Since<sp/>colormap<sp/>indexes<sp/>must<sp/>fit<sp/>into</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*<sp/>JSAMPLEs,<sp/>the<sp/>entries<sp/>of<sp/>this<sp/>array<sp/>will<sp/>too.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_padded;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>the<sp/>colorindex<sp/>padded<sp/>for<sp/>odither?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ncolors[MAX_Q_COMPS];<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>values<sp/>alloced<sp/>to<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Variables<sp/>for<sp/>ordered<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cur<sp/>row&apos;s<sp/>vertical<sp/>index<sp/>in<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>ODITHER_MATRIX_PTR<sp/>odither[MAX_Q_COMPS];<sp/></highlight><highlight class="comment">/*<sp/>one<sp/>dither<sp/>array<sp/>per<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Variables<sp/>for<sp/>Floyd-Steinberg<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>FSERRPTR<sp/>fserrors[MAX_Q_COMPS];<sp/></highlight><highlight class="comment">/*<sp/>accumulated<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>on_odd_row;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>to<sp/>remember<sp/>which<sp/>row<sp/>we<sp/>are<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/>my_cquantizer;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>my_cquantizer<sp/>*<sp/>my_cquantize_ptr;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>Policy-making<sp/>subroutines<sp/>for<sp/>create_colormap<sp/>and<sp/>create_colorindex.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>These<sp/>routines<sp/>determine<sp/>the<sp/>colormap<sp/>to<sp/>be<sp/>used.<sp/><sp/>The<sp/>rest<sp/>of<sp/>the<sp/>module</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>only<sp/>assumes<sp/>that<sp/>the<sp/>colormap<sp/>is<sp/>orthogonal.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>select_ncolors<sp/>decides<sp/>how<sp/>to<sp/>divvy<sp/>up<sp/>the<sp/>available<sp/>colors</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>among<sp/>the<sp/>components.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>output_value<sp/>defines<sp/>the<sp/>set<sp/>of<sp/>representative<sp/>values<sp/>for<sp/>a<sp/>component.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/>largest_input_value<sp/>defines<sp/>the<sp/>mapping<sp/>from<sp/>input<sp/>values<sp/>to</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>representative<sp/>values<sp/>for<sp/>a<sp/>component.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>latter<sp/>two<sp/>routines<sp/>may<sp/>impose<sp/>different<sp/>policies<sp/>for</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>different<sp/>components,<sp/>though<sp/>this<sp/>is<sp/>not<sp/>currently<sp/>done.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">select_ncolors<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ncolors[])</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Determine<sp/>allocation<sp/>of<sp/>desired<sp/>colors<sp/>to<sp/>components,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>fill<sp/>in<sp/>Ncolors[]<sp/>array<sp/>to<sp/>indicate<sp/>choice.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>value<sp/>is<sp/>total<sp/>number<sp/>of<sp/>colors<sp/>(product<sp/>of<sp/>Ncolors[]<sp/>values).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>cinfo-&gt;out_color_components;<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>color<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_colors<sp/>=<sp/>cinfo-&gt;desired_number_of_colors;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_colors,<sp/>iroot,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RGB_order[3]<sp/>=<sp/>{<sp/>RGB_GREEN,<sp/>RGB_RED,<sp/>RGB_BLUE<sp/>};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can<sp/>allocate<sp/>at<sp/>least<sp/>the<sp/>nc&apos;th<sp/>root<sp/>of<sp/>max_colors<sp/>per<sp/>component.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>floor(nc&apos;th<sp/>root<sp/>of<sp/>max_colors).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>iroot<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>iroot++;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>iroot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>temp<sp/>=<sp/>iroot<sp/>**<sp/>nc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nc;<sp/>i++)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>*=<sp/>iroot;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>max_colors);<sp/></highlight><highlight class="comment">/*<sp/>repeat<sp/>till<sp/>iroot<sp/>exceeds<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>iroot--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>iroot<sp/>=<sp/>floor(root)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>have<sp/>at<sp/>least<sp/>2<sp/>color<sp/>values<sp/>per<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iroot<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_QUANT_FEW_COLORS,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>temp);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>to<sp/>iroot<sp/>color<sp/>values<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>total_colors<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>Ncolors[i]<sp/>=<sp/>iroot;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>total_colors<sp/>*=<sp/>iroot;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>may<sp/>be<sp/>able<sp/>to<sp/>increment<sp/>the<sp/>count<sp/>for<sp/>one<sp/>or<sp/>more<sp/>components<sp/>without</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>*<sp/>exceeding<sp/>max_colors,<sp/>though<sp/>we<sp/>know<sp/>not<sp/>all<sp/>can<sp/>be<sp/>incremented.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Sometimes,<sp/>the<sp/>first<sp/>component<sp/>can<sp/>be<sp/>incremented<sp/>more<sp/>than<sp/>once!</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(Example:<sp/>for<sp/>16<sp/>colors,<sp/>we<sp/>start<sp/>at<sp/>2*2*2,<sp/>go<sp/>to<sp/>3*2*2,<sp/>then<sp/>4*2*2.)</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>RGB<sp/>colorspace,<sp/>try<sp/>to<sp/>increment<sp/>G<sp/>first,<sp/>then<sp/>R,<sp/>then<sp/>B.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(cinfo-&gt;out_color_space<sp/>==<sp/>JCS_RGB<sp/>?<sp/>RGB_order[i]<sp/>:<sp/>i);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>new<sp/>total_colors<sp/>if<sp/>Ncolors[j]<sp/>is<sp/>incremented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>total_colors<sp/>/<sp/>Ncolors[j];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>*=<sp/>Ncolors[j]+1;<sp/></highlight><highlight class="comment">/*<sp/>done<sp/>in<sp/>long<sp/>arith<sp/>to<sp/>avoid<sp/>oflo<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>max_colors)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>won&apos;t<sp/>fit,<sp/>done<sp/>with<sp/>this<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ncolors[j]++;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OK,<sp/>apply<sp/>the<sp/>increment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_colors<sp/>=<sp/>(int)<sp/>temp;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(changed);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_colors;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">output_value<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxj)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>j&apos;th<sp/>output<sp/>value,<sp/>where<sp/>j<sp/>will<sp/>range<sp/>from<sp/>0<sp/>to<sp/>maxj<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>output<sp/>values<sp/>must<sp/>fall<sp/>in<sp/>0..MAXJSAMPLE<sp/>in<sp/>increasing<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>always<sp/>provide<sp/>values<sp/>0<sp/>and<sp/>MAXJSAMPLE<sp/>for<sp/>each<sp/>component;</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>*<sp/>any<sp/>additional<sp/>values<sp/>are<sp/>equally<sp/>spaced<sp/>between<sp/>these<sp/>limits.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(Forcing<sp/>the<sp/>upper<sp/>and<sp/>lower<sp/>values<sp/>to<sp/>the<sp/>limits<sp/>ensures<sp/>that</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dithering<sp/>can&apos;t<sp/>produce<sp/>a<sp/>color<sp/>outside<sp/>the<sp/>selected<sp/>gamut.)</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((INT32)<sp/>j<sp/>*<sp/>MAXJSAMPLE<sp/>+<sp/>maxj/2)<sp/>/<sp/>maxj);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">largest_input_value<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxj)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>largest<sp/>input<sp/>value<sp/>that<sp/>should<sp/>map<sp/>to<sp/>j&apos;th<sp/>output<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Must<sp/>have<sp/>largest(j=0)<sp/>&gt;=<sp/>0,<sp/>and<sp/>largest(j=maxj)<sp/>&gt;=<sp/>MAXJSAMPLE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Breakpoints<sp/>are<sp/>halfway<sp/>between<sp/>values<sp/>returned<sp/>by<sp/>output_value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((INT32)<sp/>(2*j<sp/>+<sp/>1)<sp/>*<sp/>MAXJSAMPLE<sp/>+<sp/>maxj)<sp/>/<sp/>(2*maxj));</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>Create<sp/>the<sp/>colormap.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">create_colormap<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>colormap;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Created<sp/>colormap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_colors;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>distinct<sp/>output<sp/>colors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,<sp/>nci,<sp/>blksize,<sp/>blkdist,<sp/>ptr,<sp/>val;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>number<sp/>of<sp/>colors<sp/>for<sp/>each<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>total_colors<sp/>=<sp/>select_ncolors(cinfo,<sp/>cquantize-&gt;Ncolors);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>selected<sp/>color<sp/>counts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;out_color_components<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>TRACEMS4(cinfo,<sp/>1,<sp/>JTRC_QUANT_3_NCOLORS,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_colors,<sp/>cquantize-&gt;Ncolors[0],</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;Ncolors[1],<sp/>cquantize-&gt;Ncolors[2]);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>TRACEMS1(cinfo,<sp/>1,<sp/>JTRC_QUANT_NCOLORS,<sp/>total_colors);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>and<sp/>fill<sp/>in<sp/>the<sp/>colormap.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>colors<sp/>are<sp/>ordered<sp/>in<sp/>the<sp/>map<sp/>in<sp/>standard<sp/>row-major<sp/>order,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>i.e.<sp/>rightmost<sp/>(highest-indexed)<sp/>color<sp/>changes<sp/>most<sp/>rapidly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>colormap<sp/>=<sp/>(*cinfo-&gt;mem-&gt;alloc_sarray)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(JDIMENSION)<sp/>total_colors,<sp/>(JDIMENSION)<sp/>cinfo-&gt;out_color_components);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>blksize<sp/>is<sp/>number<sp/>of<sp/>adjacent<sp/>repeated<sp/>entries<sp/>for<sp/>a<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>blkdist<sp/>is<sp/>distance<sp/>between<sp/>groups<sp/>of<sp/>identical<sp/>entries<sp/>for<sp/>a<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>blkdist<sp/>=<sp/>total_colors;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cinfo-&gt;out_color_components;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>colormap<sp/>entries<sp/>for<sp/>i&apos;th<sp/>color<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>nci<sp/>=<sp/>cquantize-&gt;Ncolors[i];<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>distinct<sp/>values<sp/>for<sp/>this<sp/>color<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>blksize<sp/>=<sp/>blkdist<sp/>/<sp/>nci;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nci;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>j&apos;th<sp/>output<sp/>value<sp/>(out<sp/>of<sp/>nci)<sp/>for<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>output_value(cinfo,<sp/>i,<sp/>j,<sp/>nci-1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>all<sp/>colormap<sp/>entries<sp/>that<sp/>have<sp/>this<sp/>value<sp/>of<sp/>this<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ptr<sp/>=<sp/>j<sp/>*<sp/>blksize;<sp/>ptr<sp/>&lt;<sp/>total_colors;<sp/>ptr<sp/>+=<sp/>blkdist)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>blksize<sp/>entries<sp/>beginning<sp/>at<sp/>ptr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>blksize;<sp/>k++)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colormap[i][ptr+k]<sp/>=<sp/>(JSAMPLE)<sp/>val;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>blkdist<sp/>=<sp/>blksize;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>blksize<sp/>of<sp/>this<sp/>color<sp/>is<sp/>blkdist<sp/>of<sp/>next<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>colormap<sp/>in<sp/>private<sp/>storage,</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>*<sp/>where<sp/>it<sp/>will<sp/>survive<sp/>color<sp/>quantization<sp/>mode<sp/>changes.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>cquantize-&gt;sv_colormap<sp/>=<sp/>colormap;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>cquantize-&gt;sv_actual<sp/>=<sp/>total_colors;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>Create<sp/>the<sp/>color<sp/>index<sp/>table.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">create_colorindex<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>indexptr;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,<sp/>nci,<sp/>blksize,<sp/>val,<sp/>pad;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>ordered<sp/>dither,<sp/>we<sp/>pad<sp/>the<sp/>color<sp/>index<sp/>tables<sp/>by<sp/>MAXJSAMPLE<sp/>in</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>*<sp/>each<sp/>direction<sp/>(input<sp/>index<sp/>values<sp/>can<sp/>be<sp/>-MAXJSAMPLE<sp/>..<sp/>2*MAXJSAMPLE).</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>not<sp/>necessary<sp/>in<sp/>the<sp/>other<sp/>dithering<sp/>modes.<sp/><sp/>However,<sp/>we</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*<sp/>flag<sp/>whether<sp/>it<sp/>was<sp/>done<sp/>in<sp/>case<sp/>user<sp/>changes<sp/>dithering<sp/>mode.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>if<sp/>(cinfo-&gt;dither_mode<sp/>==<sp/>JDITHER_ORDERED)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>MAXJSAMPLE*2;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;is_padded<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;is_padded<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>cquantize-&gt;colorindex<sp/>=<sp/>(*cinfo-&gt;mem-&gt;alloc_sarray)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(JDIMENSION)<sp/>(MAXJSAMPLE+1<sp/>+<sp/>pad),</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(JDIMENSION)<sp/>cinfo-&gt;out_color_components);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>blksize<sp/>is<sp/>number<sp/>of<sp/>adjacent<sp/>repeated<sp/>entries<sp/>for<sp/>a<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>blksize<sp/>=<sp/>cquantize-&gt;sv_actual;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cinfo-&gt;out_color_components;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>colorindex<sp/>entries<sp/>for<sp/>i&apos;th<sp/>color<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>nci<sp/>=<sp/>cquantize-&gt;Ncolors[i];<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>distinct<sp/>values<sp/>for<sp/>this<sp/>color<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>blksize<sp/>=<sp/>blksize<sp/>/<sp/>nci;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>adjust<sp/>colorindex<sp/>pointers<sp/>to<sp/>provide<sp/>padding<sp/>at<sp/>negative<sp/>indexes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pad)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;colorindex[i]<sp/>+=<sp/>MAXJSAMPLE;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>loop,<sp/>val<sp/>=<sp/>index<sp/>of<sp/>current<sp/>output<sp/>value,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>k<sp/>=<sp/>largest<sp/>j<sp/>that<sp/>maps<sp/>to<sp/>current<sp/>val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>indexptr<sp/>=<sp/>cquantize-&gt;colorindex[i];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>largest_input_value(cinfo,<sp/>i,<sp/>0,<sp/>nci-1);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>MAXJSAMPLE;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>k)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>val<sp/>if<sp/>past<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>largest_input_value(cinfo,<sp/>i,<sp/>++val,<sp/>nci-1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>premultiply<sp/>so<sp/>that<sp/>no<sp/>multiplication<sp/>needed<sp/>in<sp/>main<sp/>processing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indexptr[j]<sp/>=<sp/>(JSAMPLE)<sp/>(val<sp/>*<sp/>blksize);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>at<sp/>both<sp/>ends<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pad)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>MAXJSAMPLE;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>indexptr[-j]<sp/>=<sp/>indexptr[0];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>indexptr[MAXJSAMPLE+j]<sp/>=<sp/>indexptr[MAXJSAMPLE];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>Create<sp/>an<sp/>ordered-dither<sp/>array<sp/>for<sp/>a<sp/>component<sp/>having<sp/>ncolors</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>distinct<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">LOCAL<sp/>ODITHER_MATRIX_PTR</highlight></codeline>
<codeline lineno="396"><highlight class="normal">make_odither_array<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncolors)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>ODITHER_MATRIX_PTR<sp/>odither;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,k;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>INT32<sp/>num,den;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>odither<sp/>=<sp/>(ODITHER_MATRIX_PTR)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(ODITHER_MATRIX));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>inter-value<sp/>distance<sp/>for<sp/>this<sp/>color<sp/>is<sp/>MAXJSAMPLE/(ncolors-1).</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Hence<sp/>the<sp/>dither<sp/>value<sp/>for<sp/>the<sp/>matrix<sp/>cell<sp/>with<sp/>fill<sp/>order<sp/>f</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(f=0..N-1)<sp/>should<sp/>be<sp/>(N-1-2*f)/(2*N)<sp/>*<sp/>MAXJSAMPLE/(ncolors-1).</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>*<sp/>On<sp/>16-bit-int<sp/>machine,<sp/>be<sp/>careful<sp/>to<sp/>avoid<sp/>overflow.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>den<sp/>=<sp/>2<sp/>*<sp/>ODITHER_CELLS<sp/>*<sp/>((INT32)<sp/>(ncolors<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ODITHER_SIZE;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>ODITHER_SIZE;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>((INT32)<sp/>(ODITHER_CELLS-1<sp/>-<sp/>2*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)base_dither_matrix[j][k])))</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>MAXJSAMPLE;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>round<sp/>towards<sp/>zero<sp/>despite<sp/>C&apos;s<sp/>lack<sp/>of<sp/>consistency</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>about<sp/>rounding<sp/>negative<sp/>values<sp/>in<sp/>integer<sp/>division...</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>odither[j][k]<sp/>=<sp/>(int)<sp/>(num&lt;0<sp/>?<sp/>-((-num)/den)<sp/>:<sp/>num/den);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>odither;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>Create<sp/>the<sp/>ordered-dither<sp/>tables.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>Components<sp/>having<sp/>the<sp/>same<sp/>number<sp/>of<sp/>representative<sp/>colors<sp/>may<sp/></highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>share<sp/>a<sp/>dither<sp/>table.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">create_odither_tables<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>ODITHER_MATRIX_PTR<sp/>odither;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>nci;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cinfo-&gt;out_color_components;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>nci<sp/>=<sp/>cquantize-&gt;Ncolors[i];<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>distinct<sp/>values<sp/>for<sp/>this<sp/>color<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>odither<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>for<sp/>matching<sp/>prior<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nci<sp/>==<sp/>cquantize-&gt;Ncolors[j])<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>odither<sp/>=<sp/>cquantize-&gt;odither[j];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(odither<sp/>==<sp/>NULL)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>a<sp/>new<sp/>table?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>odither<sp/>=<sp/>make_odither_array(cinfo,<sp/>nci);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;odither[i]<sp/>=<sp/>odither;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>Map<sp/>some<sp/>rows<sp/>of<sp/>pixels<sp/>to<sp/>the<sp/>output<sp/>colormapped<sp/>representation.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">color_quantize<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JSAMPARRAY<sp/>input_buf,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>case,<sp/>no<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>JSAMPARRAY<sp/>colorindex<sp/>=<sp/>cquantize-&gt;colorindex;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixcode,<sp/>ci;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>ptrin,<sp/>ptrout;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>col;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>width<sp/>=<sp/>cinfo-&gt;output_width;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>cinfo-&gt;out_color_components;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>num_rows;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrin<sp/>=<sp/>input_buf[row];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrout<sp/>=<sp/>output_buf[row];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(col<sp/>=<sp/>width;<sp/>col<sp/>&gt;<sp/>0;<sp/>col--)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>nc;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>pixcode<sp/>+=<sp/>GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ptrout++<sp/>=<sp/>(JSAMPLE)<sp/>pixcode;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">color_quantize3<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JSAMPARRAY<sp/>input_buf,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fast<sp/>path<sp/>for<sp/>out_color_components==3,<sp/>no<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixcode;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>ptrin,<sp/>ptrout;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex0<sp/>=<sp/>cquantize-&gt;colorindex[0];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex1<sp/>=<sp/>cquantize-&gt;colorindex[1];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex2<sp/>=<sp/>cquantize-&gt;colorindex[2];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>col;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>width<sp/>=<sp/>cinfo-&gt;output_width;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>num_rows;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrin<sp/>=<sp/>input_buf[row];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrout<sp/>=<sp/>output_buf[row];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(col<sp/>=<sp/>width;<sp/>col<sp/>&gt;<sp/>0;<sp/>col--)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/><sp/>=<sp/>GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/>+=<sp/>GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/>+=<sp/>GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ptrout++<sp/>=<sp/>(JSAMPLE)<sp/>pixcode;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">quantize_ord_dither<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JSAMPARRAY<sp/>input_buf,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>case,<sp/>with<sp/>ordered<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>input_ptr;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>output_ptr;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex_ci;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dither;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>active<sp/>row<sp/>of<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_index,<sp/>col_index;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>indexes<sp/>into<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>cinfo-&gt;out_color_components;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>col;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>width<sp/>=<sp/>cinfo-&gt;output_width;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>num_rows;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>output<sp/>values<sp/>to<sp/>0<sp/>so<sp/>can<sp/>process<sp/>components<sp/>separately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>jzero_far((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>output_buf[row],</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(width<sp/>*<sp/>SIZEOF(JSAMPLE)));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>row_index<sp/>=<sp/>cquantize-&gt;row_index;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>nc;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input_ptr<sp/>=<sp/>input_buf[row]<sp/>+<sp/>ci;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_ptr<sp/>=<sp/>output_buf[row];</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorindex_ci<sp/>=<sp/>cquantize-&gt;colorindex[ci];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dither<sp/>=<sp/>cquantize-&gt;odither[ci][row_index];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(col<sp/>=<sp/>width;<sp/>col<sp/>&gt;<sp/>0;<sp/>col--)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Form<sp/>pixel<sp/>value<sp/>+<sp/>dither,<sp/>range-limit<sp/>to<sp/>0..MAXJSAMPLE,</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>select<sp/>output<sp/>value,<sp/>accumulate<sp/>into<sp/>output<sp/>code<sp/>for<sp/>this<sp/>pixel.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Range-limiting<sp/>need<sp/>not<sp/>be<sp/>done<sp/>explicitly,<sp/>as<sp/>we<sp/>have<sp/>extended</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>colorindex<sp/>table<sp/>to<sp/>produce<sp/>the<sp/>right<sp/>answers<sp/>for<sp/>out-of-range</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>inputs.<sp/><sp/>The<sp/>maximum<sp/>dither<sp/>is<sp/>+-<sp/>MAXJSAMPLE;<sp/>this<sp/>sets<sp/>the</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>required<sp/>amount<sp/>of<sp/>padding.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_ptr<sp/>+=<sp/>colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>input_ptr<sp/>+=<sp/>nc;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>output_ptr++;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>col_index<sp/>=<sp/>(col_index<sp/>+<sp/>1)<sp/>&amp;<sp/>ODITHER_MASK;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>row<sp/>index<sp/>for<sp/>next<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>row_index<sp/>=<sp/>(row_index<sp/>+<sp/>1)<sp/>&amp;<sp/>ODITHER_MASK;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;row_index<sp/>=<sp/>row_index;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">quantize3_ord_dither<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JSAMPARRAY<sp/>input_buf,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fast<sp/>path<sp/>for<sp/>out_color_components==3,<sp/>with<sp/>ordered<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixcode;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>input_ptr;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>output_ptr;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex0<sp/>=<sp/>cquantize-&gt;colorindex[0];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex1<sp/>=<sp/>cquantize-&gt;colorindex[1];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex2<sp/>=<sp/>cquantize-&gt;colorindex[2];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dither0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>active<sp/>row<sp/>of<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dither1;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dither2;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_index,<sp/>col_index;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>indexes<sp/>into<sp/>dither<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>col;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>width<sp/>=<sp/>cinfo-&gt;output_width;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>num_rows;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>row_index<sp/>=<sp/>cquantize-&gt;row_index;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>input_ptr<sp/>=<sp/>input_buf[row];</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>output_ptr<sp/>=<sp/>output_buf[row];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>dither0<sp/>=<sp/>cquantize-&gt;odither[0][row_index];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>dither1<sp/>=<sp/>cquantize-&gt;odither[1][row_index];</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>dither2<sp/>=<sp/>cquantize-&gt;odither[2][row_index];</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>col_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(col<sp/>=<sp/>width;<sp/>col<sp/>&gt;<sp/>0;<sp/>col--)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/><sp/>=<sp/>GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++)<sp/>+</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dither0[col_index]]);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/>+=<sp/>GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++)<sp/>+</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dither1[col_index]]);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pixcode<sp/>+=<sp/>GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++)<sp/>+</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dither2[col_index]]);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*output_ptr++<sp/>=<sp/>(JSAMPLE)<sp/>pixcode;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col_index<sp/>=<sp/>(col_index<sp/>+<sp/>1)<sp/>&amp;<sp/>ODITHER_MASK;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>row_index<sp/>=<sp/>(row_index<sp/>+<sp/>1)<sp/>&amp;<sp/>ODITHER_MASK;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;row_index<sp/>=<sp/>row_index;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">quantize_fs_dither<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/>JSAMPARRAY<sp/>input_buf,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSAMPARRAY<sp/>output_buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>case,<sp/>with<sp/>Floyd-Steinberg<sp/>dithering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>LOCFSERROR<sp/>cur;<sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>error<sp/>or<sp/>pixel<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>LOCFSERROR<sp/>belowerr;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>for<sp/>pixel<sp/>below<sp/>cur<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>LOCFSERROR<sp/>bpreverr;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>for<sp/>below/prev<sp/>col<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>LOCFSERROR<sp/>bnexterr;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>for<sp/>below/next<sp/>col<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>LOCFSERROR<sp/>delta;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>FSERRPTR<sp/>errorptr;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>fserrors[]<sp/>at<sp/>column<sp/>before<sp/>current<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>input_ptr;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>JSAMPROW<sp/>output_ptr;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colorindex_ci;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>JSAMPROW<sp/>colormap_ci;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixcode;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>cinfo-&gt;out_color_components;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>for<sp/>left-to-right,<sp/>-1<sp/>for<sp/>right-to-left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirnc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dir<sp/>*<sp/>nc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>col;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>JDIMENSION<sp/>width<sp/>=<sp/>cinfo-&gt;output_width;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>JSAMPLE<sp/>*range_limit<sp/>=<sp/>cinfo-&gt;sample_range_limit;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>SHIFT_TEMPS</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>num_rows;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>output<sp/>values<sp/>to<sp/>0<sp/>so<sp/>can<sp/>process<sp/>components<sp/>separately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>jzero_far((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>output_buf[row],</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(width<sp/>*<sp/>SIZEOF(JSAMPLE)));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci<sp/>=<sp/>0;<sp/>ci<sp/>&lt;<sp/>nc;<sp/>ci++)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input_ptr<sp/>=<sp/>input_buf[row]<sp/>+<sp/>ci;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_ptr<sp/>=<sp/>output_buf[row];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cquantize-&gt;on_odd_row)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>right<sp/>to<sp/>left<sp/>in<sp/>this<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>input_ptr<sp/>+=<sp/>(width-1)<sp/>*<sp/>nc;<sp/></highlight><highlight class="comment">/*<sp/>so<sp/>point<sp/>to<sp/>rightmost<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>output_ptr<sp/>+=<sp/>width-1;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>dirnc<sp/>=<sp/>-nc;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>errorptr<sp/>=<sp/>cquantize-&gt;fserrors[ci]<sp/>+<sp/>(width+1);<sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>entry<sp/>after<sp/>last<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>left<sp/>to<sp/>right<sp/>in<sp/>this<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>dirnc<sp/>=<sp/>nc;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>errorptr<sp/>=<sp/>cquantize-&gt;fserrors[ci];<sp/></highlight><highlight class="comment">/*<sp/>=&gt;<sp/>entry<sp/>before<sp/>first<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorindex_ci<sp/>=<sp/>cquantize-&gt;colorindex[ci];</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colormap_ci<sp/>=<sp/>cquantize-&gt;sv_colormap[ci];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preset<sp/>error<sp/>values:<sp/>no<sp/>error<sp/>propagated<sp/>to<sp/>first<sp/>pixel<sp/>from<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>no<sp/>error<sp/>propagated<sp/>to<sp/>row<sp/>below<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>belowerr<sp/>=<sp/>bpreverr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(col<sp/>=<sp/>width;<sp/>col<sp/>&gt;<sp/>0;<sp/>col--)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cur<sp/>holds<sp/>the<sp/>error<sp/>propagated<sp/>from<sp/>the<sp/>previous<sp/>pixel<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>current<sp/>line.<sp/><sp/>Add<sp/>the<sp/>error<sp/>propagated<sp/>from<sp/>the<sp/>previous<sp/>line</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>form<sp/>the<sp/>complete<sp/>error<sp/>correction<sp/>term<sp/>for<sp/>this<sp/>pixel,<sp/>and</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>round<sp/>the<sp/>error<sp/>term<sp/>(which<sp/>is<sp/>expressed<sp/>*<sp/>16)<sp/>to<sp/>an<sp/>integer.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>RIGHT_SHIFT<sp/>rounds<sp/>towards<sp/>minus<sp/>infinity,<sp/>so<sp/>adding<sp/>8<sp/>is<sp/>correct</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>either<sp/>sign<sp/>of<sp/>the<sp/>error<sp/>value.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>errorptr<sp/>points<sp/>to<sp/>*previous*<sp/>column&apos;s<sp/>array<sp/>entry.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>RIGHT_SHIFT(cur<sp/>+<sp/>errorptr[dir]<sp/>+<sp/>8,<sp/>4);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Form<sp/>pixel<sp/>value<sp/>+<sp/>error,<sp/>and<sp/>range-limit<sp/>to<sp/>0..MAXJSAMPLE.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>maximum<sp/>error<sp/>is<sp/>+-<sp/>MAXJSAMPLE;<sp/>this<sp/>sets<sp/>the<sp/>required<sp/>size</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>range_limit<sp/>array.</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>+=<sp/>GETJSAMPLE(*input_ptr);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>GETJSAMPLE(range_limit[cur]);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>output<sp/>value,<sp/>accumulate<sp/>into<sp/>output<sp/>code<sp/>for<sp/>this<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>pixcode<sp/>=<sp/>GETJSAMPLE(colorindex_ci[cur]);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_ptr<sp/>+=<sp/>(JSAMPLE)<sp/>pixcode;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>actual<sp/>representation<sp/>error<sp/>at<sp/>this<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>we<sp/>can<sp/>do<sp/>this<sp/>even<sp/>though<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>final<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pixel<sp/>code,<sp/>because<sp/>the<sp/>colormap<sp/>is<sp/>orthogonal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>-=<sp/>GETJSAMPLE(colormap_ci[pixcode]);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>error<sp/>fractions<sp/>to<sp/>be<sp/>propagated<sp/>to<sp/>adjacent<sp/>pixels.</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>these<sp/>into<sp/>the<sp/>running<sp/>sums,<sp/>and<sp/>simultaneously<sp/>shift<sp/>the</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>next-line<sp/>error<sp/>sums<sp/>left<sp/>by<sp/>1<sp/>column.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>bnexterr<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>cur<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>+=<sp/>delta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>error<sp/>*<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>errorptr[0]<sp/>=<sp/>(FSERROR)<sp/>(bpreverr<sp/>+<sp/>cur);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>+=<sp/>delta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>error<sp/>*<sp/>5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>bpreverr<sp/>=<sp/>belowerr<sp/>+<sp/>cur;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>belowerr<sp/>=<sp/>bnexterr;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>+=<sp/>delta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>error<sp/>*<sp/>7<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>this<sp/>point<sp/>cur<sp/>contains<sp/>the<sp/>7/16<sp/>error<sp/>value<sp/>to<sp/>be<sp/>propagated</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>next<sp/>pixel<sp/>on<sp/>the<sp/>current<sp/>line,<sp/>and<sp/>all<sp/>the<sp/>errors<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>next<sp/>line<sp/>have<sp/>been<sp/>shifted<sp/>over.<sp/>We<sp/>are<sp/>therefore<sp/>ready<sp/>to<sp/>move<sp/>on.</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>input_ptr<sp/>+=<sp/>dirnc;<sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>input<sp/>ptr<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>output_ptr<sp/>+=<sp/>dir;<sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>output<sp/>ptr<sp/>to<sp/>next<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>errorptr<sp/>+=<sp/>dir;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>advance<sp/>errorptr<sp/>to<sp/>current<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Post-loop<sp/>cleanup:<sp/>we<sp/>must<sp/>unload<sp/>the<sp/>final<sp/>error<sp/>value<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>final<sp/>fserrors[]<sp/>entry.<sp/><sp/>Note<sp/>we<sp/>need<sp/>not<sp/>unload<sp/>belowerr<sp/>because</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>is<sp/>for<sp/>the<sp/>dummy<sp/>column<sp/>before<sp/>or<sp/>after<sp/>the<sp/>actual<sp/>array.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errorptr[0]<sp/>=<sp/>(FSERROR)<sp/>bpreverr;<sp/></highlight><highlight class="comment">/*<sp/>unload<sp/>prev<sp/>err<sp/>into<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;on_odd_row<sp/>=<sp/>(cquantize-&gt;on_odd_row<sp/>?<sp/>FALSE<sp/>:<sp/>TRUE);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>Allocate<sp/>workspace<sp/>for<sp/>Floyd-Steinberg<sp/>errors.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">LOCAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">alloc_fs_workspace<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arraysize;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>arraysize<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>((cinfo-&gt;output_width<sp/>+<sp/>2)<sp/>*<sp/>SIZEOF(FSERROR));</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cinfo-&gt;out_color_components;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;fserrors[i]<sp/>=<sp/>(FSERRPTR)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_large)((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,<sp/>arraysize);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>for<sp/>one-pass<sp/>color<sp/>quantization.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">start_pass_1_quant<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>is_pre_scan)</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)<sp/>cinfo-&gt;cquantize;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arraysize;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Install<sp/>my<sp/>colormap.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>cinfo-&gt;colormap<sp/>=<sp/>cquantize-&gt;sv_colormap;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>cinfo-&gt;actual_number_of_colors<sp/>=<sp/>cquantize-&gt;sv_actual;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>for<sp/>desired<sp/>dithering<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>switch<sp/>(cinfo-&gt;dither_mode)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JDITHER_NONE:</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;out_color_components<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;pub.color_quantize<sp/>=<sp/>color_quantize3;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;pub.color_quantize<sp/>=<sp/>color_quantize;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JDITHER_ORDERED:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;out_color_components<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;pub.color_quantize<sp/>=<sp/>quantize3_ord_dither;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cquantize-&gt;pub.color_quantize<sp/>=<sp/>quantize_ord_dither;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;row_index<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>state<sp/>for<sp/>ordered<sp/>dither<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>user<sp/>changed<sp/>to<sp/>ordered<sp/>dither<sp/>from<sp/>another<sp/>mode,</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>must<sp/>recreate<sp/>the<sp/>color<sp/>index<sp/>table<sp/>with<sp/>padding.</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>will<sp/>cost<sp/>extra<sp/>space,<sp/>but<sp/>probably<sp/>isn&apos;t<sp/>very<sp/>likely.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cquantize-&gt;is_padded)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>create_colorindex(cinfo);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>ordered-dither<sp/>tables<sp/>if<sp/>we<sp/>didn&apos;t<sp/>already.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cquantize-&gt;odither[0]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>create_odither_tables(cinfo);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JDITHER_FS:</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;pub.color_quantize<sp/>=<sp/>quantize_fs_dither;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>cquantize-&gt;on_odd_row<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>state<sp/>for<sp/>F-S<sp/>dither<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>Floyd-Steinberg<sp/>workspace<sp/>if<sp/>didn&apos;t<sp/>already.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cquantize-&gt;fserrors[0]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_fs_workspace(cinfo);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>propagated<sp/>errors<sp/>to<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>arraysize<sp/>=<sp/>(size_t)<sp/>((cinfo-&gt;output_width<sp/>+<sp/>2)<sp/>*<sp/>SIZEOF(FSERROR));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cinfo-&gt;out_color_components;<sp/>i++)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jzero_far((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FAR<sp/>*)<sp/>cquantize-&gt;fserrors[i],<sp/>arraysize);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_NOT_COMPILED);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>Finish<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>pass.</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">finish_pass_1_quant<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>work<sp/>in<sp/>1-pass<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>a<sp/>new<sp/>external<sp/>colormap<sp/>between<sp/>output<sp/>passes.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>Shouldn&apos;t<sp/>get<sp/>to<sp/>this<sp/>module!</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">METHODDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">new_color_map_1_quant<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>ERREXIT(cinfo,<sp/>JERR_MODE_CHANGE);</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>Module<sp/>initialization<sp/>routine<sp/>for<sp/>1-pass<sp/>color<sp/>quantization.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">GLOBAL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">jinit_1pass_quantizer<sp/>(<ref refid="structjpeg__decompress__struct" kindref="compound">j_decompress_ptr</ref><sp/>cinfo)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>my_cquantize_ptr<sp/>cquantize;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>cquantize<sp/>=<sp/>(my_cquantize_ptr)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>(*cinfo-&gt;mem-&gt;alloc_small)<sp/>((<ref refid="structjpeg__common__struct" kindref="compound">j_common_ptr</ref>)<sp/>cinfo,<sp/>JPOOL_IMAGE,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEOF(my_cquantizer));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>cinfo-&gt;cquantize<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjpeg__color__quantizer" kindref="compound">jpeg_color_quantizer</ref><sp/>*)<sp/>cquantize;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>cquantize-&gt;pub.start_pass<sp/>=<sp/>start_pass_1_quant;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>cquantize-&gt;pub.finish_pass<sp/>=<sp/>finish_pass_1_quant;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>cquantize-&gt;pub.new_color_map<sp/>=<sp/>new_color_map_1_quant;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>cquantize-&gt;fserrors[0]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>Flag<sp/>FS<sp/>workspace<sp/>not<sp/>allocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>cquantize-&gt;odither[0]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>Also<sp/>flag<sp/>odither<sp/>arrays<sp/>not<sp/>allocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>my<sp/>internal<sp/>arrays<sp/>won&apos;t<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;out_color_components<sp/>&gt;<sp/>MAX_Q_COMPS)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_QUANT_COMPONENTS,<sp/>MAX_Q_COMPS);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>colormap<sp/>indexes<sp/>can<sp/>be<sp/>represented<sp/>by<sp/>JSAMPLEs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;desired_number_of_colors<sp/>&gt;<sp/>(MAXJSAMPLE+1))</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>ERREXIT1(cinfo,<sp/>JERR_QUANT_MANY_COLORS,<sp/>MAXJSAMPLE+1);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>colormap<sp/>and<sp/>color<sp/>index<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>create_colormap(cinfo);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>create_colorindex(cinfo);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>Floyd-Steinberg<sp/>workspace<sp/>now<sp/>if<sp/>requested.</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>do<sp/>this<sp/>now<sp/>since<sp/>it<sp/>is<sp/>FAR<sp/>storage<sp/>and<sp/>may<sp/>affect<sp/>the<sp/>memory</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/>*<sp/>manager&apos;s<sp/>space<sp/>calculations.<sp/><sp/>If<sp/>the<sp/>user<sp/>changes<sp/>to<sp/>FS<sp/>dither</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/>*<sp/>mode<sp/>in<sp/>a<sp/>later<sp/>pass,<sp/>we<sp/>will<sp/>allocate<sp/>the<sp/>space<sp/>then,<sp/>and<sp/>will</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/>*<sp/>possibly<sp/>overrun<sp/>the<sp/>max_memory_to_use<sp/>setting.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cinfo-&gt;dither_mode<sp/>==<sp/>JDITHER_FS)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_fs_workspace(cinfo);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>QUANT_1PASS_SUPPORTED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/jpeg-6/jquant1.c"/>
  </compounddef>
</doxygen>
