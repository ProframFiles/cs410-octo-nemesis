<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="mdct_8c" kind="file">
    <compoundname>mdct.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_math_8h" local="no">math.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbis_2codec_8h" local="yes">../vorbis/codec.h</includes>
    <includes refid="mdct_8h" local="yes">mdct.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbissrc_2_misc_8h" local="yes">misc.h</includes>
    <incdepgraph>
      <node id="2082">
        <label>stdlib.h</label>
      </node>
      <node id="2083">
        <label>string.h</label>
      </node>
      <node id="2080">
        <label>E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c</label>
        <link refid="mdct.c"/>
        <childnode refid="2081" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2081">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="mdct_8c_1a634a9bdaede2031e443d3f2c52eb3363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdct_init</definition>
        <argsstring>(mdct_lookup *lookup, int n)</argsstring>
        <name>mdct_init</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>lookup</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="52" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a6970ed7e7f7f1d6ae82021a2acf32c3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterfly_8</definition>
        <argsstring>(float *x)</argsstring>
        <name>mdct_butterfly_8</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="94" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="94" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a43a1d6142f0599e6c6451e9e3e95a6ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterfly_16</definition>
        <argsstring>(float *x)</argsstring>
        <name>mdct_butterfly_16</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="118" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="118" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1adde3d27c98a0f1e2b9a688898d5bb99d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterfly_32</definition>
        <argsstring>(float *x)</argsstring>
        <name>mdct_butterfly_32</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="153" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="153" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a6899154222d43883f3b4fed7c3d22f69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterfly_first</definition>
        <argsstring>(float *T, float *x, int points)</argsstring>
        <name>mdct_butterfly_first</name>
        <param>
          <type>float *</type>
          <declname>T</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="217" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="217" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1ab097032e0d1bdc99a87325cd2b6405e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterfly_generic</definition>
        <argsstring>(float *T, float *x, int points, int trigint)</argsstring>
        <name>mdct_butterfly_generic</name>
        <param>
          <type>float *</type>
          <declname>T</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>trigint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="264" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="264" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a84a5377878ac0b7da0181776fad82bd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_butterflies</definition>
        <argsstring>(mdct_lookup *init, float *x, int points)</argsstring>
        <name>mdct_butterflies</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="317" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="317" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a7d04c801e7732490ec2924cd72b1503f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdct_clear</definition>
        <argsstring>(mdct_lookup *l)</argsstring>
        <name>mdct_clear</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="339" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="339" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a6832edfb71a9c4246b907c3c031b529b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mdct_bitreverse</definition>
        <argsstring>(mdct_lookup *init, float *x)</argsstring>
        <name>mdct_bitreverse</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="347" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="347" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a1a2085c5efb9e044b392a4f83c1f1a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdct_backward</definition>
        <argsstring>(mdct_lookup *init, float *in, float *out)</argsstring>
        <name>mdct_backward</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="397" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="397" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="mdct_8c_1a92756d3e3ae997d2b878361953eed0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdct_forward</definition>
        <argsstring>(mdct_lookup *init, float *in, float *out)</argsstring>
        <name>mdct_forward</name>
        <param>
          <type><ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref> *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" line="493" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c" bodystart="493" bodyend="563"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FILE<sp/>IS<sp/>PART<sp/>OF<sp/>THE<sp/>OggVorbis<sp/>SOFTWARE<sp/>CODEC<sp/>SOURCE<sp/>CODE.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DISTRIBUTION<sp/>AND<sp/>REPRODUCTION<sp/>OF<sp/>THIS<sp/>LIBRARY<sp/>SOURCE<sp/>IS<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>GOVERNED<sp/>BY<sp/>A<sp/>BSD-STYLE<sp/>SOURCE<sp/>LICENSE<sp/>INCLUDED<sp/>WITH<sp/>THIS<sp/>SOURCE<sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>IN<sp/>&apos;COPYING&apos;.<sp/>PLEASE<sp/>READ<sp/>THESE<sp/>TERMS<sp/>BEFORE<sp/>DISTRIBUTING.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>OggVorbis<sp/>SOURCE<sp/>CODE<sp/>IS<sp/>(C)<sp/>COPYRIGHT<sp/>1994-2002<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>XIPHOPHORUS<sp/>Company<sp/>http://www.xiph.org/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>********************************************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>function:<sp/>normalized<sp/>modified<sp/>discrete<sp/>cosine<sp/>transform</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>of<sp/>two<sp/>length<sp/>transform<sp/>only<sp/>[64<sp/>&lt;=<sp/>n<sp/>]</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>last<sp/>mod:<sp/>$Id:<sp/>mdct.c,v<sp/>1.32<sp/>2002/10/16<sp/>02:43:48<sp/>xiphmont<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>Original<sp/>algorithm<sp/>adapted<sp/>long<sp/>ago<sp/>from<sp/>_The<sp/>use<sp/>of<sp/>multirate<sp/>filter</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>banks<sp/>for<sp/>coding<sp/>of<sp/>high<sp/>quality<sp/>digital<sp/>audio_,<sp/>by<sp/>T.<sp/>Sporer,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>K.<sp/>Brandenburg<sp/>and<sp/>B.<sp/>Edler,<sp/>collection<sp/>of<sp/>the<sp/>European<sp/>Signal</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>Processing<sp/>Conference<sp/>(EUSIPCO),<sp/>Amsterdam,<sp/>June<sp/>1992,<sp/>Vol.1,<sp/>pp</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>211-214</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>The<sp/>below<sp/>code<sp/>implements<sp/>an<sp/>algorithm<sp/>that<sp/>no<sp/>longer<sp/>looks<sp/>much<sp/>like</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>that<sp/>presented<sp/>in<sp/>the<sp/>paper,<sp/>but<sp/>the<sp/>basic<sp/>structure<sp/>remains<sp/>if<sp/>you</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>dig<sp/>deep<sp/>enough<sp/>to<sp/>see<sp/>it.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>This<sp/>module<sp/>DOES<sp/>NOT<sp/>INCLUDE<sp/>code<sp/>to<sp/>generate/apply<sp/>the<sp/>window</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>function.<sp/><sp/>Everybody<sp/>has<sp/>their<sp/>own<sp/>weird<sp/>favorite<sp/>including<sp/>me...<sp/>I</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>happen<sp/>to<sp/>like<sp/>the<sp/>properties<sp/>of<sp/>y=sin(.5PI*sin^2(x)),<sp/>but<sp/>others<sp/>may</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>vehemently<sp/>disagree.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>can<sp/>also<sp/>be<sp/>run<sp/>as<sp/>an<sp/>integer<sp/>transform<sp/>by<sp/>uncommenting<sp/>a</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>define<sp/>in<sp/>mdct.h;<sp/>the<sp/>integerization<sp/>is<sp/>a<sp/>first<sp/>pass<sp/>and<sp/>although</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>it&apos;s<sp/>likely<sp/>stable<sp/>for<sp/>Vorbis,<sp/>the<sp/>dynamic<sp/>range<sp/>is<sp/>constrained<sp/>and</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>roundoff<sp/>isn&apos;t<sp/>done<sp/>(so<sp/>it&apos;s<sp/>noisy).<sp/><sp/>Consider<sp/>it<sp/>functional,<sp/>but</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>only<sp/>a<sp/>starting<sp/>point.<sp/><sp/>There&apos;s<sp/>no<sp/>point<sp/>on<sp/>a<sp/>machine<sp/>with<sp/>an<sp/>FPU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../vorbis/codec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mdct.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>build<sp/>lookups<sp/>for<sp/>trig<sp/>functions;<sp/>also<sp/>pre-figure<sp/>scaling<sp/>and</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>some<sp/>window<sp/>function<sp/>algebra.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_init(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*lookup,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*bitrev=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bitrev)*(n/4));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*T=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*T)*(n+n/4));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2=n&gt;&gt;1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2n=lookup-&gt;log2n=rint(log((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)n)/log(2.f));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>lookup-&gt;n=n;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>lookup-&gt;trig=T;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>lookup-&gt;bitrev=bitrev;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>trig<sp/>lookups...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n/4;i++){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>T[i*2]=FLOAT_CONV(cos((M_PI/n)*(4*i)));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>T[i*2+1]=FLOAT_CONV(-sin((M_PI/n)*(4*i)));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>T[n2+i*2]=FLOAT_CONV(cos((M_PI/(2*n))*(2*i+1)));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>T[n2+i*2+1]=FLOAT_CONV(sin((M_PI/(2*n))*(2*i+1)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n/8;i++){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>T[n+i*2]=FLOAT_CONV(cos((M_PI/n)*(4*i+2))*.5);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>T[n+i*2+1]=FLOAT_CONV(-sin((M_PI/n)*(4*i+2))*.5);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bitreverse<sp/>lookup...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask=(1&lt;&lt;(log2n-1))-1,i,j;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msb=1&lt;&lt;(log2n-2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n/8;i++){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acc=0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;msb&gt;&gt;j;j++)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((msb&gt;&gt;j)&amp;i)acc|=1&lt;&lt;j;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitrev[i*2]=((~acc)&amp;mask)-1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitrev[i*2+1]=acc;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>lookup-&gt;scale=FLOAT_CONV(4.f/n);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>8<sp/>point<sp/>butterfly<sp/>(in<sp/>place,<sp/>4<sp/>register)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterfly_8(DATA_TYPE<sp/>*x){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r0<sp/><sp/><sp/>=<sp/>x[6]<sp/>+<sp/>x[2];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r1<sp/><sp/><sp/>=<sp/>x[6]<sp/>-<sp/>x[2];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r2<sp/><sp/><sp/>=<sp/>x[4]<sp/>+<sp/>x[0];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r3<sp/><sp/><sp/>=<sp/>x[4]<sp/>-<sp/>x[0];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[6]<sp/>=<sp/>r0<sp/><sp/><sp/>+<sp/>r2;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[4]<sp/>=<sp/>r0<sp/><sp/><sp/>-<sp/>r2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/>=<sp/>x[5]<sp/>-<sp/>x[1];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/><sp/><sp/>=<sp/>x[7]<sp/>-<sp/>x[3];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/>=<sp/>r1<sp/><sp/><sp/>+<sp/>r0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[2]<sp/>=<sp/>r1<sp/><sp/><sp/>-<sp/>r0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/>=<sp/>x[5]<sp/>+<sp/>x[1];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/>=<sp/>x[7]<sp/>+<sp/>x[3];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[3]<sp/>=<sp/>r2<sp/><sp/><sp/>+<sp/>r3;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[1]<sp/>=<sp/>r2<sp/><sp/><sp/>-<sp/>r3;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[7]<sp/>=<sp/>r1<sp/><sp/><sp/>+<sp/>r0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[5]<sp/>=<sp/>r1<sp/><sp/><sp/>-<sp/>r0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>16<sp/>point<sp/>butterfly<sp/>(in<sp/>place,<sp/>4<sp/>register)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterfly_16(DATA_TYPE<sp/>*x){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[1]<sp/><sp/>-<sp/>x[9];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[0]<sp/><sp/>-<sp/>x[8];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[8]<sp/><sp/>+=<sp/>x[0];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[9]<sp/><sp/>+=<sp/>x[1];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/><sp/><sp/>=<sp/>MULT_NORM((r0<sp/><sp/><sp/>+<sp/>r1)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[1]<sp/><sp/><sp/>=<sp/>MULT_NORM((r0<sp/><sp/><sp/>-<sp/>r1)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[3]<sp/><sp/>-<sp/>x[11];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[10]<sp/>-<sp/>x[2];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[10]<sp/>+=<sp/>x[2];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[11]<sp/>+=<sp/>x[3];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[2]<sp/><sp/><sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[3]<sp/><sp/><sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[12]<sp/>-<sp/>x[4];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[13]<sp/>-<sp/>x[5];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[12]<sp/>+=<sp/>x[4];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[13]<sp/>+=<sp/>x[5];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[4]<sp/><sp/><sp/>=<sp/>MULT_NORM((r0<sp/><sp/><sp/>-<sp/>r1)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[5]<sp/><sp/><sp/>=<sp/>MULT_NORM((r0<sp/><sp/><sp/>+<sp/>r1)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[14]<sp/>-<sp/>x[6];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[15]<sp/>-<sp/>x[7];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[14]<sp/>+=<sp/>x[6];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[15]<sp/>+=<sp/>x[7];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[6]<sp/><sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[7]<sp/><sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdct_butterfly_8(x);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdct_butterfly_8(x+8);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>32<sp/>point<sp/>butterfly<sp/>(in<sp/>place,<sp/>4<sp/>register)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterfly_32(DATA_TYPE<sp/>*x){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[30]<sp/>-<sp/>x[14];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[31]<sp/>-<sp/>x[15];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[30]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[14];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[31]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[15];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[14]<sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[15]<sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[28]<sp/>-<sp/>x[12];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[29]<sp/>-<sp/>x[13];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[28]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[12];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[29]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[13];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[12]<sp/><sp/>=<sp/>MULT_NORM(<sp/>r0<sp/>*<sp/>cPI1_8<sp/><sp/>-<sp/><sp/>r1<sp/>*<sp/>cPI3_8<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[13]<sp/><sp/>=<sp/>MULT_NORM(<sp/>r0<sp/>*<sp/>cPI3_8<sp/><sp/>+<sp/><sp/>r1<sp/>*<sp/>cPI1_8<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[26]<sp/>-<sp/>x[10];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[27]<sp/>-<sp/>x[11];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[26]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[10];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[27]<sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[11];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[10]<sp/><sp/>=<sp/>MULT_NORM((<sp/>r0<sp/><sp/>-<sp/>r1<sp/>)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[11]<sp/><sp/>=<sp/>MULT_NORM((<sp/>r0<sp/><sp/>+<sp/>r1<sp/>)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[24]<sp/>-<sp/>x[8];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[25]<sp/>-<sp/>x[9];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[24]<sp/>+=<sp/>x[8];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[25]<sp/>+=<sp/>x[9];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[8]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r0<sp/>*<sp/>cPI3_8<sp/><sp/>-<sp/><sp/>r1<sp/>*<sp/>cPI1_8<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[9]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r1<sp/>*<sp/>cPI3_8<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>cPI1_8<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[22]<sp/>-<sp/>x[6];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[7]<sp/><sp/>-<sp/>x[23];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[22]<sp/>+=<sp/>x[6];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[23]<sp/>+=<sp/>x[7];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[6]<sp/><sp/><sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[7]<sp/><sp/><sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[4]<sp/><sp/>-<sp/>x[20];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[5]<sp/><sp/>-<sp/>x[21];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[20]<sp/>+=<sp/>x[4];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[21]<sp/>+=<sp/>x[5];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[4]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r1<sp/>*<sp/>cPI1_8<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>cPI3_8<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[5]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r1<sp/>*<sp/>cPI3_8<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>cPI1_8<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[2]<sp/><sp/>-<sp/>x[18];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[3]<sp/><sp/>-<sp/>x[19];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[18]<sp/>+=<sp/>x[2];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[19]<sp/>+=<sp/>x[3];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[2]<sp/><sp/><sp/>=<sp/>MULT_NORM((<sp/>r1<sp/><sp/>+<sp/>r0<sp/>)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[3]<sp/><sp/><sp/>=<sp/>MULT_NORM((<sp/>r1<sp/><sp/>-<sp/>r0<sp/>)<sp/>*<sp/>cPI2_8);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x[0]<sp/><sp/>-<sp/>x[16];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x[1]<sp/><sp/>-<sp/>x[17];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[16]<sp/>+=<sp/>x[0];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[17]<sp/>+=<sp/>x[1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r1<sp/>*<sp/>cPI3_8<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>cPI1_8<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[1]<sp/><sp/><sp/>=<sp/>MULT_NORM(<sp/>r1<sp/>*<sp/>cPI1_8<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>cPI3_8<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdct_butterfly_16(x);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdct_butterfly_16(x+16);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>N<sp/>point<sp/>first<sp/>stage<sp/>butterfly<sp/>(in<sp/>place,<sp/>2<sp/>register)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterfly_first(DATA_TYPE<sp/>*T,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points){</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>points<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(points&gt;&gt;1)<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/><sp/><sp/>r0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/><sp/><sp/>r1;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[6]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[6];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[7]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[7];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[6]<sp/><sp/>+=<sp/>x2[6];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[7]<sp/><sp/>+=<sp/>x2[7];</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[6]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[1]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[7]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[0]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[4]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[4];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[5]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[5];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[4]<sp/><sp/>+=<sp/>x2[4];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[5]<sp/><sp/>+=<sp/>x2[5];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[4]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[5]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[4]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[5]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[4]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[5]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[2]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[2];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[3]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[3];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[2]<sp/><sp/>+=<sp/>x2[2];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[3]<sp/><sp/>+=<sp/>x2[3];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[2]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[9]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[8]);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[3]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[8]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[9]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[0]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[0];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[1]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[1];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[0]<sp/><sp/>+=<sp/>x2[0];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[1]<sp/><sp/>+=<sp/>x2[1];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[0]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[13]<sp/>+<sp/><sp/>r0<sp/>*<sp/>T[12]);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[1]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[12]<sp/>-<sp/><sp/>r0<sp/>*<sp/>T[13]);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>x1-=8;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>x2-=8;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>T+=16;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(x2&gt;=x);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>N/stage<sp/>point<sp/>generic<sp/>N<sp/>stage<sp/>butterfly<sp/>(in<sp/>place,<sp/>2<sp/>register)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterfly_generic(DATA_TYPE<sp/>*T,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trigint){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>points<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(points&gt;&gt;1)<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/><sp/><sp/>r0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/><sp/><sp/>r1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[6]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[6];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[7]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[7];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[6]<sp/><sp/>+=<sp/>x2[6];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[7]<sp/><sp/>+=<sp/>x2[7];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[6]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[1]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[7]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[0]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T+=trigint;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[4]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[4];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[5]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[5];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[4]<sp/><sp/>+=<sp/>x2[4];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[5]<sp/><sp/>+=<sp/>x2[5];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[4]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[1]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[5]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[0]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T+=trigint;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[2]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[2];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[3]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[3];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[2]<sp/><sp/>+=<sp/>x2[2];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[3]<sp/><sp/>+=<sp/>x2[3];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[2]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[1]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[3]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[0]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T+=trigint;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[0]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[0];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x1[1]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>x2[1];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[0]<sp/><sp/>+=<sp/>x2[0];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1[1]<sp/><sp/>+=<sp/>x2[1];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[0]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[1]<sp/><sp/>+<sp/><sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2[1]<sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/>*<sp/>T[0]<sp/><sp/>-<sp/><sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T+=trigint;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>x1-=8;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>x2-=8;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(x2&gt;=x);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_butterflies(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*init,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points){</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*T=init-&gt;trig;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stages=init-&gt;log2n-5;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(--stages&gt;0){</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>mdct_butterfly_first(T,x,points);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;--stages&gt;0;i++){</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;(1&lt;&lt;i);j++)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdct_butterfly_generic(T,x+(points&gt;&gt;i)*j,points&gt;&gt;i,4&lt;&lt;i);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;points;j+=32)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>mdct_butterfly_32(x+j);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_clear(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*l){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l){</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l-&gt;trig)_ogg_free(l-&gt;trig);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l-&gt;bitrev)_ogg_free(l-&gt;bitrev);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(l,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*l));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_bitreverse(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*init,<sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>init-&gt;n;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bit<sp/><sp/><sp/><sp/><sp/>=<sp/>init-&gt;bitrev;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*w0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*w1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x<sp/>=<sp/>w0+(n&gt;&gt;1);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*T<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>init-&gt;trig+n;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x0<sp/><sp/><sp/><sp/>=<sp/>x+bit[0];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*x1<sp/><sp/><sp/><sp/>=<sp/>x+bit[1];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_TYPE<sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x0[1]<sp/><sp/>-<sp/>x1[1];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_TYPE<sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x0[0]<sp/><sp/>+<sp/>x1[0];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_TYPE<sp/><sp/>r2<sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/><sp/><sp/><sp/><sp/>*<sp/>T[0]<sp/><sp/><sp/>+<sp/>r0<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_TYPE<sp/><sp/>r3<sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/><sp/><sp/><sp/><sp/>*<sp/>T[1]<sp/><sp/><sp/>-<sp/>r0<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/><sp/><sp/><sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>HALVE(x0[1]<sp/>+<sp/>x1[1]);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>HALVE(x0[0]<sp/>-<sp/>x1[0]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w0[0]<sp/><sp/>=<sp/>r0<sp/><sp/><sp/><sp/><sp/>+<sp/>r2;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[2]<sp/><sp/>=<sp/>r0<sp/><sp/><sp/><sp/><sp/>-<sp/>r2;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w0[1]<sp/><sp/>=<sp/>r1<sp/><sp/><sp/><sp/><sp/>+<sp/>r3;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[3]<sp/><sp/>=<sp/>r3<sp/><sp/><sp/><sp/><sp/>-<sp/>r1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/><sp/><sp/><sp/><sp/>=<sp/>x+bit[2];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/><sp/><sp/><sp/><sp/>=<sp/>x+bit[3];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>x0[1]<sp/><sp/>-<sp/>x1[1];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>x0[0]<sp/><sp/>+<sp/>x1[0];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/><sp/><sp/><sp/><sp/>*<sp/>T[2]<sp/><sp/><sp/>+<sp/>r0<sp/>*<sp/>T[3]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r3<sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(r1<sp/><sp/><sp/><sp/><sp/>*<sp/>T[3]<sp/><sp/><sp/>-<sp/>r0<sp/>*<sp/>T[2]);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/><sp/><sp/>=<sp/>HALVE(x0[1]<sp/>+<sp/>x1[1]);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/><sp/><sp/>=<sp/>HALVE(x0[0]<sp/>-<sp/>x1[0]);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w0[2]<sp/><sp/>=<sp/>r0<sp/><sp/><sp/><sp/><sp/>+<sp/>r2;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[0]<sp/><sp/>=<sp/>r0<sp/><sp/><sp/><sp/><sp/>-<sp/>r2;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w0[3]<sp/><sp/>=<sp/>r1<sp/><sp/><sp/><sp/><sp/>+<sp/>r3;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[1]<sp/><sp/>=<sp/>r3<sp/><sp/><sp/><sp/><sp/>-<sp/>r1;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w0<sp/><sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(w0&lt;w1);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_backward(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*init,<sp/>DATA_TYPE<sp/>*in,<sp/>DATA_TYPE<sp/>*out){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=init-&gt;n;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2=n&gt;&gt;1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4=n&gt;&gt;2;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*iX<sp/>=<sp/>in+n2-7;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*oX<sp/>=<sp/>out+n2+n4;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*T<sp/><sp/>=<sp/>init-&gt;trig+n4;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>oX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(-iX[2]<sp/>*<sp/>T[3]<sp/>-<sp/>iX[0]<sp/><sp/>*<sp/>T[2]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM<sp/>(iX[0]<sp/>*<sp/>T[3]<sp/>-<sp/>iX[2]<sp/><sp/>*<sp/>T[2]);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM(-iX[6]<sp/>*<sp/>T[1]<sp/>-<sp/>iX[4]<sp/><sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[3]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MULT_NORM<sp/>(iX[4]<sp/>*<sp/>T[1]<sp/>-<sp/>iX[6]<sp/><sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>iX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(iX&gt;=in);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>iX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>in+n2-8;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>oX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>out+n2+n4;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>init-&gt;trig+n4;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[4]<sp/>*<sp/>T[3]<sp/>+<sp/>iX[6]<sp/>*<sp/>T[2]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[4]<sp/>*<sp/>T[2]<sp/>-<sp/>iX[6]<sp/>*<sp/>T[3]);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[0]<sp/>*<sp/>T[1]<sp/>+<sp/>iX[2]<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>oX[3]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[0]<sp/>*<sp/>T[0]<sp/>-<sp/>iX[2]<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>iX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>oX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(iX&gt;=in);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>mdct_butterflies(init,out+n2,n2);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>mdct_bitreverse(init,out);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>roatate<sp/>+<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*oX1=out+n2+n4;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*oX2=out+n2+n4;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>DATA_TYPE<sp/>*iX<sp/>=out;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=init-&gt;trig+n2;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1-=4;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[3]<sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[0]<sp/>*<sp/>T[1]<sp/>-<sp/>iX[1]<sp/>*<sp/>T[0]);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[0]<sp/><sp/>=<sp/>-MULT_NORM<sp/>(iX[0]<sp/>*<sp/>T[0]<sp/>+<sp/>iX[1]<sp/>*<sp/>T[1]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[2]<sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[2]<sp/>*<sp/>T[3]<sp/>-<sp/>iX[3]<sp/>*<sp/>T[2]);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[1]<sp/><sp/>=<sp/>-MULT_NORM<sp/>(iX[2]<sp/>*<sp/>T[2]<sp/>+<sp/>iX[3]<sp/>*<sp/>T[3]);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[1]<sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[4]<sp/>*<sp/>T[5]<sp/>-<sp/>iX[5]<sp/>*<sp/>T[4]);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[2]<sp/><sp/>=<sp/>-MULT_NORM<sp/>(iX[4]<sp/>*<sp/>T[4]<sp/>+<sp/>iX[5]<sp/>*<sp/>T[5]);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[0]<sp/><sp/>=<sp/><sp/>MULT_NORM<sp/>(iX[6]<sp/>*<sp/>T[7]<sp/>-<sp/>iX[7]<sp/>*<sp/>T[6]);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[3]<sp/><sp/>=<sp/>-MULT_NORM<sp/>(iX[6]<sp/>*<sp/>T[6]<sp/>+<sp/>iX[7]<sp/>*<sp/>T[7]);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2+=4;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iX<sp/><sp/><sp/><sp/>+=<sp/><sp/><sp/>8;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/>+=<sp/><sp/><sp/>8;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(iX&lt;oX1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>iX=out+n2+n4;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>oX1=out+n4;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>oX2=oX1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1-=4;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iX-=4;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[0]<sp/>=<sp/>-(oX1[3]<sp/>=<sp/>iX[3]);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[1]<sp/>=<sp/>-(oX1[2]<sp/>=<sp/>iX[2]);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[2]<sp/>=<sp/>-(oX1[1]<sp/>=<sp/>iX[1]);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2[3]<sp/>=<sp/>-(oX1[0]<sp/>=<sp/>iX[0]);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX2+=4;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(oX2&lt;iX);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>iX=out+n2+n4;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>oX1=out+n2+n4;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>oX2=out+n2;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1-=4;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[0]=<sp/>iX[3];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[1]=<sp/>iX[2];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[2]=<sp/>iX[1];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oX1[3]=<sp/>iX[0];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iX+=4;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(oX1&gt;oX2);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mdct_forward(<ref refid="structmdct__lookup" kindref="compound">mdct_lookup</ref><sp/>*init,<sp/>DATA_TYPE<sp/>*in,<sp/>DATA_TYPE<sp/>*out){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=init-&gt;n;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2=n&gt;&gt;1;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n4=n&gt;&gt;2;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n8=n&gt;&gt;3;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*w=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*w));<sp/></highlight><highlight class="comment">/*<sp/>forward<sp/>needs<sp/>working<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*w2=w+n2;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>+<sp/>rotate<sp/>+<sp/>step<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>REG_TYPE<sp/>r1;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x0=in+n2+n4;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*x1=x0+1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>DATA_TYPE<sp/>*T=init-&gt;trig+n2;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n8;i+=2){</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>x0<sp/>-=4;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>T-=2;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>r0=<sp/>x0[2]<sp/>+<sp/>x1[0];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>r1=<sp/>x0[0]<sp/>+<sp/>x1[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i]=<sp/><sp/><sp/>MULT_NORM(r1*T[1]<sp/>+<sp/>r0*T[0]);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i+1]=<sp/>MULT_NORM(r1*T[0]<sp/>-<sp/>r0*T[1]);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>+=4;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>x1=in+1;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;n2-n8;i+=2){</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>T-=2;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>x0<sp/>-=4;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>r0=<sp/>x0[2]<sp/>-<sp/>x1[0];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>r1=<sp/>x0[0]<sp/>-<sp/>x1[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i]=<sp/><sp/><sp/>MULT_NORM(r1*T[1]<sp/>+<sp/>r0*T[0]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i+1]=<sp/>MULT_NORM(r1*T[0]<sp/>-<sp/>r0*T[1]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>+=4;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>x0=in+n;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;n2;i+=2){</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>T-=2;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>x0<sp/>-=4;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>r0=<sp/>-x0[2]<sp/>-<sp/>x1[0];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>r1=<sp/>-x0[0]<sp/>-<sp/>x1[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i]=<sp/><sp/><sp/>MULT_NORM(r1*T[1]<sp/>+<sp/>r0*T[0]);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>w2[i+1]=<sp/>MULT_NORM(r1*T[0]<sp/>-<sp/>r0*T[1]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>+=4;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>mdct_butterflies(init,w+n2,n2);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>mdct_bitreverse(init,w);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>roatate<sp/>+<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>T=init-&gt;trig+n2;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>x0=out+n2;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n4;i++){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>x0--;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=MULT_NORM((w[0]*T[0]+w[1]*T[1])*init-&gt;scale);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>x0[0]<sp/><sp/>=MULT_NORM((w[0]*T[1]-w[1]*T[0])*init-&gt;scale);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>w+=2;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>T+=2;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/mdct.c"/>
  </compounddef>
</doxygen>
