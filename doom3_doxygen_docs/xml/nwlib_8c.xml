<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="nwlib_8c" kind="file">
    <compoundname>nwlib.c</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">library.h</includes>
    <includes local="no">netware.h</includes>
    <includes local="no">screen.h</includes>
    <includes local="no">nks/thread.h</includes>
    <includes local="no">nks/synch.h</includes>
    <incdepgraph>
      <node id="437">
        <label>library.h</label>
      </node>
      <node id="433">
        <label>E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c</label>
        <link refid="nwlib.c"/>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
      </node>
      <node id="436">
        <label>stdlib.h</label>
      </node>
      <node id="434">
        <label>errno.h</label>
      </node>
      <node id="435">
        <label>string.h</label>
      </node>
      <node id="440">
        <label>nks/thread.h</label>
      </node>
      <node id="441">
        <label>nks/synch.h</label>
      </node>
      <node id="438">
        <label>netware.h</label>
      </node>
      <node id="439">
        <label>screen.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structlibthreaddata__t" prot="public">libthreaddata_t</innerclass>
    <innerclass refid="structlibdata__t" prot="public">libdata_t</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="nwlib_8c_1a46b9eb87e97061bade6fd03e5004ebda" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int gLibId</definition>
        <argsstring></argsstring>
        <name>gLibId</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="nwlib_8c_1a1925dc48c4bc9211a4f7808a776e48e8" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* gLibHandle</definition>
        <argsstring></argsstring>
        <name>gLibHandle</name>
        <initializer>= (void *) NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="nwlib_8c_1abe190993f0dca1c0887da4256f527a0a" prot="public" static="no" mutable="no">
        <type>rtag_t</type>
        <definition>rtag_t gAllocTag</definition>
        <argsstring></argsstring>
        <name>gAllocTag</name>
        <initializer>= (rtag_t) NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="nwlib_8c_1adf6148095c426611341c4a39011f0675" prot="public" static="no" mutable="no">
        <type>NXMutex_t *</type>
        <definition>NXMutex_t* gLibLock</definition>
        <argsstring></argsstring>
        <name>gLibLock</name>
        <initializer>= (NXMutex_t *) NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="nwlib_8c_1afe2742c2b5b8ccad4194ac2736d046ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DisposeLibraryData</definition>
        <argsstring>(void *)</argsstring>
        <name>DisposeLibraryData</name>
        <param>
          <type>void *</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="293" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="nwlib_8c_1ab4614f92fa76712a366993c06cbf1d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DisposeThreadData</definition>
        <argsstring>(void *)</argsstring>
        <name>DisposeThreadData</name>
        <param>
          <type>void *</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="311" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="nwlib_8c_1a14df552e33ca9d1e67cde7f3163414bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetOrSetUpData</definition>
        <argsstring>(int id, libdata_t **data, libthreaddata_t **threaddata)</argsstring>
        <name>GetOrSetUpData</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="structlibdata__t" kindref="compound">libdata_t</ref> **</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref> **</type>
          <declname>threaddata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="155" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="nwlib_8c_1aa3da8ffffe9847c3dcd26133e0cdf28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _NonAppStart</definition>
        <argsstring>(void *NLMHandle, void *errorScreen, const char *cmdLine, const char *loadDirPath, size_t uninitializedDataLength, void *NLMFileHandle, int(*readRoutineP)(int conn, void *fileHandle, size_t offset, size_t nbytes, size_t *bytesRead, void *buffer), size_t customDataOffset, size_t customDataSize, int messageCount, const char **messages)</argsstring>
        <name>_NonAppStart</name>
        <param>
          <type>void *</type>
          <declname>NLMHandle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>errorScreen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmdLine</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>loadDirPath</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>uninitializedDataLength</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>NLMFileHandle</declname>
        </param>
        <param>
          <type>int(*)(int conn, void *fileHandle, size_t offset, size_t nbytes, size_t *bytesRead, void *buffer)</type>
          <declname>readRoutineP</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>customDataOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>customDataSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>messageCount</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>messages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="62" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="nwlib_8c_1a14626c442ef3ad1fbc6142e62104e0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _NonAppStop</definition>
        <argsstring>(void)</argsstring>
        <name>_NonAppStop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="132" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="nwlib_8c_1ab90d965ec0efdce2c74f3031859491be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _NonAppCheckUnload</definition>
        <argsstring>(void)</argsstring>
        <name>_NonAppCheckUnload</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" line="149" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c" bodystart="149" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/>_<sp/>____<sp/><sp/>_</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>Project<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___|<sp/>|<sp/>|<sp/>|<sp/><sp/>_<sp/>\|<sp/>|</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>__|<sp/>|<sp/>|<sp/>|<sp/>|_)<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(__|<sp/>|_|<sp/>|<sp/><sp/>_<sp/>&lt;|<sp/>|___</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\___|\___/|_|<sp/>\_\_____|</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1998<sp/>-<sp/>2004,<sp/>Daniel<sp/>Stenberg,<sp/>&lt;daniel@haxx.se&gt;,<sp/>et<sp/>al.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>licensed<sp/>as<sp/>described<sp/>in<sp/>the<sp/>file<sp/>COPYING,<sp/>which</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>you<sp/>should<sp/>have<sp/>received<sp/>as<sp/>part<sp/>of<sp/>this<sp/>distribution.<sp/>The<sp/>terms</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>are<sp/>also<sp/>available<sp/>at<sp/>http://curl.haxx.se/docs/copyright.html.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>opt<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>COPYING<sp/>file.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>basis,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>nwlib.c,v<sp/>1.2<sp/>2004/03/17<sp/>13:36:45<sp/>bagder<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;library.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netware.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;screen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nks/thread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nks/synch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structlibthreaddata__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>_errno;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*twentybytes;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structlibdata__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tenbytes;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>NXKey_t<sp/><sp/><sp/><sp/><sp/>perthreadkey;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>-1,<sp/>no<sp/>key<sp/>obtained...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>NXMutex_t<sp/><sp/><sp/>*lock;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}<sp/><ref refid="structlibdata__t" kindref="compound">libdata_t</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gLibId<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gLibHandle<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">rtag_t<sp/><sp/><sp/><sp/><sp/><sp/>gAllocTag<sp/><sp/><sp/>=<sp/>(rtag_t)<sp/>NULL;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">NXMutex_t<sp/><sp/><sp/>*gLibLock<sp/><sp/><sp/>=<sp/>(NXMutex_t<sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>internal<sp/>library<sp/>function<sp/>prototypes...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DisposeLibraryData<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>DisposeThreadData<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>GetOrSetUpData<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>**data,<sp/><ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>**threaddata<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_NonAppStart</highlight></codeline>
<codeline lineno="62"><highlight class="normal">(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*NLMHandle,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*errorScreen,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*cmdLine,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*loadDirPath,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uninitializedDataLength,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*NLMFileHandle,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*readRoutineP)(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>conn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fileHandle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesRead,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer<sp/>),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>customDataOffset,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>customDataSize,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageCount,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**messages</highlight></codeline>
<codeline lineno="75"><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>NX_LOCK_INFO_ALLOC(liblock,<sp/></highlight><highlight class="stringliteral">&quot;Per-Application<sp/>Data<sp/>Lock&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__GNUC__</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(cmdLine)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(loadDirPath)</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(uninitializedDataLength)</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(NLMFileHandle)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(readRoutineP)</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(customDataOffset)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(customDataSize)</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(messageCount)</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>unused(messages)</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment">**<sp/>Here<sp/>we<sp/>process<sp/>our<sp/>command<sp/>line,<sp/>post<sp/>errors<sp/>(to<sp/>the<sp/>error<sp/>screen),</highlight></codeline>
<codeline lineno="93"><highlight class="comment">**<sp/>perform<sp/>initializations<sp/>and<sp/>anything<sp/>else<sp/>we<sp/>need<sp/>to<sp/>do<sp/>before<sp/>being<sp/>able</highlight></codeline>
<codeline lineno="94"><highlight class="comment">**<sp/>to<sp/>accept<sp/>calls<sp/>into<sp/>us.<sp/>If<sp/>we<sp/>succeed,<sp/>we<sp/>return<sp/>non-zero<sp/>and<sp/>the<sp/>NetWare</highlight></codeline>
<codeline lineno="95"><highlight class="comment">**<sp/>Loader<sp/>will<sp/>leave<sp/>us<sp/>up,<sp/>otherwise<sp/>we<sp/>fail<sp/>to<sp/>load<sp/>and<sp/>get<sp/>dumped.</highlight></codeline>
<codeline lineno="96"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>gAllocTag<sp/>=<sp/>AllocateResourceTag(NLMHandle,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;library-name&gt;<sp/>memory<sp/>allocations&quot;</highlight><highlight class="normal">,<sp/>AllocSignature);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gAllocTag)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputToScreen(errorScreen,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>allocate<sp/>resource<sp/>tag<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;library<sp/>memory<sp/>allocations.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>gLibId<sp/>=<sp/>register_library(DisposeLibraryData);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gLibId<sp/>&lt;<sp/>-1)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputToScreen(errorScreen,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>register<sp/>library<sp/>with<sp/>kernel.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>gLibHandle<sp/>=<sp/>NLMHandle;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>gLibLock<sp/>=<sp/>NXMutexAlloc(0,<sp/>0,<sp/>&amp;liblock);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gLibLock)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputToScreen(errorScreen,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>allocate<sp/>library<sp/>data<sp/>lock.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="129"><highlight class="comment">**<sp/>Here<sp/>we<sp/>clean<sp/>up<sp/>any<sp/>resources<sp/>we<sp/>allocated.<sp/>Resource<sp/>tags<sp/>is<sp/>a<sp/>big<sp/>part</highlight></codeline>
<codeline lineno="130"><highlight class="comment">**<sp/>of<sp/>what<sp/>we<sp/>created,<sp/>but<sp/>NetWare<sp/>doesn&apos;t<sp/>ask<sp/>us<sp/>to<sp/>free<sp/>those.</highlight></codeline>
<codeline lineno="131"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_NonAppStop(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>unregister_library(gLibId);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>NXMutexFree(gLibLock);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="139"><highlight class="comment">**<sp/>This<sp/>function<sp/>cannot<sp/>be<sp/>the<sp/>first<sp/>in<sp/>the<sp/>file<sp/>for<sp/>if<sp/>the<sp/>file<sp/>is<sp/>linked</highlight></codeline>
<codeline lineno="140"><highlight class="comment">**<sp/>first,<sp/>then<sp/>the<sp/>check-unload<sp/>function&apos;s<sp/>offset<sp/>will<sp/>be<sp/>nlmname.nlm+0</highlight></codeline>
<codeline lineno="141"><highlight class="comment">**<sp/>which<sp/>is<sp/>how<sp/>to<sp/>tell<sp/>that<sp/>there<sp/>isn&apos;t<sp/>one.<sp/>When<sp/>the<sp/>check<sp/>function<sp/>is</highlight></codeline>
<codeline lineno="142"><highlight class="comment">**<sp/>first<sp/>in<sp/>the<sp/>linked<sp/>objects,<sp/>it<sp/>is<sp/>ambiguous.<sp/>For<sp/>this<sp/>reason,<sp/>we<sp/>will</highlight></codeline>
<codeline lineno="143"><highlight class="comment">**<sp/>put<sp/>it<sp/>inside<sp/>this<sp/>file<sp/>after<sp/>the<sp/>stop<sp/>function.</highlight></codeline>
<codeline lineno="144"><highlight class="comment">**</highlight></codeline>
<codeline lineno="145"><highlight class="comment">**<sp/>Here<sp/>we<sp/>check<sp/>to<sp/>see<sp/>if<sp/>it&apos;s<sp/>alright<sp/>to<sp/>ourselves<sp/>to<sp/>be<sp/>unloaded.<sp/>If<sp/>not,</highlight></codeline>
<codeline lineno="146"><highlight class="comment">**<sp/>we<sp/>return<sp/>a<sp/>non-zero<sp/>value.<sp/>Right<sp/>now,<sp/>there<sp/>isn&apos;t<sp/>any<sp/>reason<sp/>not<sp/>to<sp/>allow</highlight></codeline>
<codeline lineno="147"><highlight class="comment">**<sp/>it.</highlight></codeline>
<codeline lineno="148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>_NonAppCheckUnload(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetOrSetUpData</highlight></codeline>
<codeline lineno="155"><highlight class="normal">(</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**appData,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>**threadData</highlight></codeline>
<codeline lineno="159"><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*app_data;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*<ref refid="structthread__data" kindref="compound">thread_data</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>NXKey_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>NX_LOCK_INFO_ALLOC(liblock,<sp/></highlight><highlight class="stringliteral">&quot;Application<sp/>Data<sp/>Lock&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_data<sp/>=<sp/>(<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment">**<sp/>Attempt<sp/>to<sp/>get<sp/>our<sp/>data<sp/>for<sp/>the<sp/>application<sp/>calling<sp/>us.<sp/>This<sp/>is<sp/>where<sp/>we</highlight></codeline>
<codeline lineno="172"><highlight class="comment">**<sp/>store<sp/>whatever<sp/>application-specific<sp/>information<sp/>we<sp/>need<sp/>to<sp/>carry<sp/>in<sp/>support</highlight></codeline>
<codeline lineno="173"><highlight class="comment">**<sp/>of<sp/>calling<sp/>applications.</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>app_data<sp/>=<sp/>(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>get_app_data(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!app_data)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment">**<sp/>This<sp/>application<sp/>hasn&apos;t<sp/>called<sp/>us<sp/>before;<sp/>set<sp/>up<sp/>application<sp/>AND<sp/>per-thread</highlight></codeline>
<codeline lineno="181"><highlight class="comment">**<sp/>data.<sp/>Of<sp/>course,<sp/>just<sp/>in<sp/>case<sp/>a<sp/>thread<sp/>from<sp/>this<sp/>same<sp/>application<sp/>is<sp/>calling</highlight></codeline>
<codeline lineno="182"><highlight class="comment">**<sp/>us<sp/>simultaneously,<sp/>we<sp/>better<sp/>lock<sp/>our<sp/>application<sp/>data-creation<sp/>mutex.<sp/>We</highlight></codeline>
<codeline lineno="183"><highlight class="comment">**<sp/>also<sp/>need<sp/>to<sp/>recheck<sp/>for<sp/>data<sp/>after<sp/>we<sp/>acquire<sp/>the<sp/>lock<sp/>because<sp/>WE<sp/>might<sp/>be</highlight></codeline>
<codeline lineno="184"><highlight class="comment">**<sp/>that<sp/>other<sp/>thread<sp/>that<sp/>was<sp/>too<sp/>late<sp/>to<sp/>create<sp/>the<sp/>data<sp/>and<sp/>the<sp/>first<sp/>thread</highlight></codeline>
<codeline lineno="185"><highlight class="comment">**<sp/>in<sp/>will<sp/>have<sp/>created<sp/>it.</highlight></codeline>
<codeline lineno="186"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NXLock(gLibLock);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(app_data<sp/>=<sp/>(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>get_app_data(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data<sp/>=<sp/>(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref>));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(app_data)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(app_data,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref>));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data-&gt;tenbytes<sp/>=<sp/>malloc(10);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data-&gt;lock<sp/><sp/><sp/><sp/><sp/>=<sp/>NXMutexAlloc(0,<sp/>0,<sp/>&amp;liblock);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!app_data-&gt;tenbytes<sp/>||<sp/>!app_data-&gt;lock)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(app_data-&gt;lock)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NXMutexFree(app_data-&gt;lock);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(app_data);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data<sp/>=<sp/>(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(app_data)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="213"><highlight class="comment">**<sp/>Here<sp/>we<sp/>burn<sp/>in<sp/>the<sp/>application<sp/>data<sp/>that<sp/>we<sp/>were<sp/>trying<sp/>to<sp/>get<sp/>by<sp/>calling</highlight></codeline>
<codeline lineno="214"><highlight class="comment">**<sp/>get_app_data().<sp/>Next<sp/>time<sp/>we<sp/>call<sp/>the<sp/>first<sp/>function,<sp/>we&apos;ll<sp/>get<sp/>this<sp/>data</highlight></codeline>
<codeline lineno="215"><highlight class="comment">**<sp/>we&apos;re<sp/>just<sp/>now<sp/>setting.<sp/>We<sp/>also<sp/>go<sp/>on<sp/>here<sp/>to<sp/>establish<sp/>the<sp/>per-thread<sp/>data</highlight></codeline>
<codeline lineno="216"><highlight class="comment">**<sp/>for<sp/>the<sp/>calling<sp/>thread,<sp/>something<sp/>we&apos;ll<sp/>have<sp/>to<sp/>do<sp/>on<sp/>each<sp/>application</highlight></codeline>
<codeline lineno="217"><highlight class="comment">**<sp/>thread<sp/>the<sp/>first<sp/>time<sp/>it<sp/>calls<sp/>us.</highlight></codeline>
<codeline lineno="218"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>set_app_data(gLibId,<sp/>app_data);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(app_data);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data<sp/>=<sp/>(<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>key<sp/>for<sp/>thread-specific<sp/>data...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>NXKeyCreate(DisposeThreadData,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>NULL,<sp/>&amp;key);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(no<sp/>more<sp/>keys<sp/>left?)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_data-&gt;perthreadkey<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NXUnlock(gLibLock);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(app_data)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>app_data-&gt;perthreadkey;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/>key<sp/>!=<sp/>-1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>couldn&apos;t<sp/>create<sp/>a<sp/>key?<sp/>no<sp/>thread<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(err<sp/>=<sp/>NXKeyGetValue(key,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;thread_data))</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!thread_data)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="253"><highlight class="comment">**<sp/>Allocate<sp/>the<sp/>per-thread<sp/>data<sp/>for<sp/>the<sp/>calling<sp/>thread.<sp/>Regardless<sp/>of<sp/>whether</highlight></codeline>
<codeline lineno="254"><highlight class="comment">**<sp/>there<sp/>was<sp/>already<sp/>application<sp/>data<sp/>or<sp/>not,<sp/>this<sp/>may<sp/>be<sp/>the<sp/>first<sp/>call<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="255"><highlight class="comment">**<sp/>a<sp/>new<sp/>thread.<sp/>The<sp/>fact<sp/>that<sp/>we<sp/>allocation<sp/>20<sp/>bytes<sp/>on<sp/>a<sp/>pointer<sp/>is<sp/>not<sp/>very</highlight></codeline>
<codeline lineno="256"><highlight class="comment">**<sp/>important,<sp/>this<sp/>just<sp/>helps<sp/>to<sp/>demonstrate<sp/>that<sp/>we<sp/>can<sp/>have<sp/>arbitrarily</highlight></codeline>
<codeline lineno="257"><highlight class="comment">**<sp/>complex<sp/>per-thread<sp/>data.</highlight></codeline>
<codeline lineno="258"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data<sp/>=<sp/>(<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref>));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_data)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data-&gt;_errno<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data-&gt;twentybytes<sp/>=<sp/>malloc(20);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thread_data-&gt;twentybytes)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(thread_data);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data<sp/>=<sp/>(<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>NXKeySetValue(key,<sp/>thread_data)))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(thread_data-&gt;twentybytes);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(thread_data);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data<sp/>=<sp/>(<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(appData)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*appData<sp/>=<sp/>app_data;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threadData)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*threadData<sp/>=<sp/>thread_data;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DisposeLibraryData</highlight></codeline>
<codeline lineno="293"><highlight class="normal">(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*data</highlight></codeline>
<codeline lineno="295"><highlight class="normal">)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*tenbytes<sp/>=<sp/>((<ref refid="structlibdata__t" kindref="compound">libdata_t</ref><sp/>*)<sp/>data)-&gt;tenbytes;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tenbytes)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tenbytes);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DisposeThreadData</highlight></codeline>
<codeline lineno="311"><highlight class="normal">(</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*data</highlight></codeline>
<codeline lineno="313"><highlight class="normal">)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*twentybytes<sp/>=<sp/>((<ref refid="structlibthreaddata__t" kindref="compound">libthreaddata_t</ref><sp/>*)<sp/>data)-&gt;twentybytes;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(twentybytes)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(twentybytes);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/curl/lib/nwlib.c"/>
  </compounddef>
</doxygen>
