<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="posix__input_8cpp" kind="file">
    <compoundname>posix_input.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="posix__public_8h" local="yes">posix_public.h</includes>
    <innerclass refid="structpoll__keyboard__event__s" prot="public">poll_keyboard_event_s</innerclass>
    <innerclass refid="structpoll__mouse__event__s" prot="public">poll_mouse_event_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="posix__input_8cpp_1af4e0a291edbbe00e608b22ec6868fdd1" prot="public" static="no">
        <name>MAX_POLL_EVENTS</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="43" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="posix__input_8cpp_1ac3b38b06b3a83eff07afab4daf238a1f" prot="public" static="no">
        <name>POLL_EVENTS_HEADROOM</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="44" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="posix__input_8cpp_1aa49b413bc487eb1314c88d52289f9109" prot="public" static="no">
        <type>struct <ref refid="structpoll__keyboard__event__s" kindref="compound">poll_keyboard_event_s</ref></type>
        <definition>typedef struct poll_keyboard_event_s  poll_keyboard_event_t</definition>
        <argsstring></argsstring>
        <name>poll_keyboard_event_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="posix__input_8cpp_1a27e5fe0d344b863ea5167c9821661862" prot="public" static="no">
        <type>struct <ref refid="structpoll__mouse__event__s" kindref="compound">poll_mouse_event_s</ref></type>
        <definition>typedef struct poll_mouse_event_s  poll_mouse_event_t</definition>
        <argsstring></argsstring>
        <name>poll_mouse_event_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="41" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="posix__input_8cpp_1aa369d2f821c96c1858b4b9620e159d32" prot="public" static="yes" mutable="no">
        <type><ref refid="structpoll__keyboard__event__s" kindref="compound">poll_keyboard_event_t</ref></type>
        <definition>poll_keyboard_event_t poll_events_keyboard[50+2]</definition>
        <argsstring>[50+2]</argsstring>
        <name>poll_events_keyboard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="posix__input_8cpp_1aea4920b0d131ec8d4331120b36aa118f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int poll_keyboard_event_count</definition>
        <argsstring></argsstring>
        <name>poll_keyboard_event_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="posix__input_8cpp_1acf3f04364692d0adfd0aa29dbb44b459" prot="public" static="yes" mutable="no">
        <type><ref refid="structpoll__mouse__event__s" kindref="compound">poll_mouse_event_t</ref></type>
        <definition>poll_mouse_event_t poll_events_mouse[50+2]</definition>
        <argsstring>[50+2]</argsstring>
        <name>poll_events_mouse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="posix__input_8cpp_1a8be89860a68e29dfdc848d9b1dbc7269" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int poll_mouse_event_count</definition>
        <argsstring></argsstring>
        <name>poll_mouse_event_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="posix__input_8cpp_1af44dd1829c93462213390bfd4f3dec92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Posix_AddKeyboardPollEvent</definition>
        <argsstring>(int key, bool state)</argsstring>
        <name>Posix_AddKeyboardPollEvent</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="55" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1ac3eb6f82455bbc39135072810a58fb51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Posix_AddMousePollEvent</definition>
        <argsstring>(int action, int value)</argsstring>
        <name>Posix_AddMousePollEvent</name>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1ab94cfebb7554eef44f2cde9de84f74ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_PollKeyboardInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_PollKeyboardInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1a7812160b9ac841e89ce0a78c1fac5bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ReturnKeyboardInputEvent</definition>
        <argsstring>(const int n, int &amp;key, bool &amp;state)</argsstring>
        <name>Sys_ReturnKeyboardInputEvent</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="97" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1a988ed695efc34e8260ccdbd195c999fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EndKeyboardInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EndKeyboardInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="106" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1ab2384b248f76156dd6c2cb5f96e6790f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_PollMouseInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_PollMouseInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="111" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1a94a6f9064f6b76dda15b6be6001f912e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ReturnMouseInputEvent</definition>
        <argsstring>(const int n, int &amp;action, int &amp;value)</argsstring>
        <name>Sys_ReturnMouseInputEvent</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="123" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="posix__input_8cpp_1abd3b68499c7c9e9a91860d6967b7db2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EndMouseInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EndMouseInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" line="133" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;posix_public.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structpoll__keyboard__event__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpoll__keyboard__event__s" kindref="compound">poll_keyboard_event_s</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state;<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><ref refid="structpoll__keyboard__event__s" kindref="compound">poll_keyboard_event_t</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structpoll__mouse__event__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpoll__mouse__event__s" kindref="compound">poll_mouse_event_s</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/><ref refid="structpoll__mouse__event__s" kindref="compound">poll_mouse_event_t</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_POLL_EVENTS<sp/>50</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>POLL_EVENTS_HEADROOM<sp/>2<sp/>//<sp/>some<sp/>situations<sp/>require<sp/>to<sp/>add<sp/>several<sp/>events</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpoll__keyboard__event__s" kindref="compound">poll_keyboard_event_t</ref><sp/>poll_events_keyboard[MAX_POLL_EVENTS<sp/>+<sp/>POLL_EVENTS_HEADROOM];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poll_keyboard_event_count;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpoll__mouse__event__s" kindref="compound">poll_mouse_event_t</ref><sp/>poll_events_mouse[MAX_POLL_EVENTS<sp/>+<sp/>POLL_EVENTS_HEADROOM];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poll_mouse_event_count;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="51"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="52"><highlight class="comment">Posix_AddKeyboardPollEvent</highlight></codeline>
<codeline lineno="53"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Posix_AddKeyboardPollEvent(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll_keyboard_event_count<sp/>&gt;=<sp/>MAX_POLL_EVENTS<sp/>+<sp/>POLL_EVENTS_HEADROOM)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;poll_keyboard_event_count<sp/>exceeded<sp/>MAX_POLL_EVENT<sp/>+<sp/>POLL_EVENTS_HEADROOM\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_events_keyboard[poll_keyboard_event_count].key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_events_keyboard[poll_keyboard_event_count++].state<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll_keyboard_event_count<sp/>&gt;=<sp/>MAX_POLL_EVENTS)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>reached<sp/>MAX_POLL_EVENT<sp/>poll_keyboard_event_count\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="69"><highlight class="comment">Posix_AddMousePollEvent</highlight></codeline>
<codeline lineno="70"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Posix_AddMousePollEvent(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll_mouse_event_count<sp/>&gt;=<sp/>MAX_POLL_EVENTS<sp/>+<sp/>POLL_EVENTS_HEADROOM)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;poll_mouse_event_count<sp/>exceeded<sp/>MAX_POLL_EVENT<sp/>+<sp/>POLL_EVENTS_HEADROOM\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_events_mouse[poll_mouse_event_count].action<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_events_mouse[poll_mouse_event_count++].value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll_mouse_event_count<sp/>&gt;=<sp/>MAX_POLL_EVENTS)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>reached<sp/>MAX_POLL_EVENT<sp/>poll_mouse_event_count\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="86"><highlight class="comment">polled<sp/>from<sp/>GetDirectUsercmd</highlight></codeline>
<codeline lineno="87"><highlight class="comment">async<sp/>input<sp/>polling<sp/>is<sp/>obsolete</highlight></codeline>
<codeline lineno="88"><highlight class="comment">we<sp/>have<sp/>a<sp/>single<sp/>entry<sp/>point<sp/>for<sp/>both<sp/>mouse<sp/>and<sp/>keyboard</highlight></codeline>
<codeline lineno="89"><highlight class="comment">the<sp/>mouse/keyboard<sp/>seperation<sp/>is<sp/>API<sp/>legacy</highlight></codeline>
<codeline lineno="90"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="91"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_PollKeyboardInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>poll_keyboard_event_count;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_ReturnKeyboardInputEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;key,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>&gt;=<sp/>poll_keyboard_event_count<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>poll_events_keyboard[n].key;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>poll_events_keyboard[n].state;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_EndKeyboardInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//isn&apos;t<sp/>this<sp/>were<sp/>it&apos;s<sp/>supposed<sp/>to<sp/>be,<sp/>was<sp/>missing<sp/>some<sp/>key<sp/>strokes<sp/>with<sp/>it<sp/>set<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_keyboard_event_count<sp/>=<sp/>0;<sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_PollMouseInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//moved<sp/>to<sp/>the<sp/>Sys_End<sp/>functions</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>poll_keyboard_event_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_mouse_event_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that&apos;s<sp/>OS<sp/>specific,<sp/>implemented<sp/>in<sp/>osx/<sp/>and<sp/>linux/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Posix_PollInput(<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>poll_mouse_event_count;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_ReturnMouseInputEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;value<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n&gt;=poll_mouse_event_count<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>action<sp/>=<sp/>poll_events_mouse[<sp/>n<sp/>].action;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>poll_events_mouse[<sp/>n<sp/>].value;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_EndMouseInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>moved<sp/>out<sp/>of<sp/>the<sp/>Sys_PollMouseInputEvents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_mouse_event_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_input.cpp"/>
  </compounddef>
</doxygen>
