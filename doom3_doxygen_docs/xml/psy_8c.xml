<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="psy_8c" kind="file">
    <compoundname>psy.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_math_8h" local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbis_2codec_8h" local="yes">../vorbis/codec.h</includes>
    <includes refid="codec__internal_8h" local="yes">codec_internal.h</includes>
    <includes refid="masking_8h" local="yes">masking.h</includes>
    <includes refid="psy_8h" local="yes">psy.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="lpc_8h" local="yes">lpc.h</includes>
    <includes refid="smallft_8h" local="yes">smallft.h</includes>
    <includes refid="scales_8h" local="yes">scales.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbissrc_2_misc_8h" local="yes">misc.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="2128">
        <label>stdlib.h</label>
      </node>
      <node id="2127">
        <label>E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c</label>
        <link refid="psy.c"/>
        <childnode refid="2128" relation="include">
        </childnode>
        <childnode refid="2129" relation="include">
        </childnode>
        <childnode refid="2130" relation="include">
        </childnode>
      </node>
      <node id="2129">
        <label>string.h</label>
      </node>
      <node id="2130">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="psy_8c_1a16491ade61903be8dcc456e96c722381" prot="public" static="no">
        <name>NEGINF</name>
        <initializer>-9999.f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="32" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="psy_8c_1ac334ca03f3df816d6d0d6d7d5bf484b1" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double stereo_threshholds[]</definition>
        <argsstring>[]</argsstring>
        <name>stereo_threshholds</name>
        <initializer>={0.0, .5, 1.0, 1.5, 2.5, 4.5, 8.5, 16.5, 9e10}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="33" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="psy_8c_1af82f62447d813782e5c0c4db0a11d0d8" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float FLOOR1_fromdB_INV_LOOKUP[256]</definition>
        <argsstring>[256]</argsstring>
        <name>FLOOR1_fromdB_INV_LOOKUP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="685" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="psy_8c_1a04e90d695df9b7b0943e5427b7d96dc8" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float hypot_lookup[32]</definition>
        <argsstring>[32]</argsstring>
        <name>hypot_lookup</name>
        <initializer>={
  -0.009935, -0.011245, -0.012726, -0.014397, 
  -0.016282, -0.018407, -0.020800, -0.023494, 
  -0.026522, -0.029923, -0.033737, -0.038010, 
  -0.042787, -0.048121, -0.054064, -0.060671, 
  -0.068000, -0.076109, -0.085054, -0.094892, 
  -0.105675, -0.117451, -0.130260, -0.144134, 
  -0.159093, -0.175146, -0.192286, -0.210490, 
  -0.229718, -0.249913, -0.271001, -0.292893}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="892" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="892" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="psy_8c_1afcaeaf1c809309d4f263f40f8b83137f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvorbis__look__psy__global" kindref="compound">vorbis_look_psy_global</ref> *</type>
        <definition>vorbis_look_psy_global* _vp_global_look</definition>
        <argsstring>(vorbis_info *vi)</argsstring>
        <name>_vp_global_look</name>
        <param>
          <type><ref refid="structvorbis__info" kindref="compound">vorbis_info</ref> *</type>
          <declname>vi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a49f7f01467273e321456d340b7ad516a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_global_free</definition>
        <argsstring>(vorbis_look_psy_global *look)</argsstring>
        <name>_vp_global_free</name>
        <param>
          <type><ref refid="structvorbis__look__psy__global" kindref="compound">vorbis_look_psy_global</ref> *</type>
          <declname>look</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1aa0c73f919c99274470693c982aecb60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vi_gpsy_free</definition>
        <argsstring>(vorbis_info_psy_global *i)</argsstring>
        <name>_vi_gpsy_free</name>
        <param>
          <type><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a2be9a7ae18da45f4dd41f742a600cd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vi_psy_free</definition>
        <argsstring>(vorbis_info_psy *i)</argsstring>
        <name>_vi_psy_free</name>
        <param>
          <type><ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1af68e1bc0895ed33efc291c4f9427dc26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void min_curve</definition>
        <argsstring>(float *c, float *c2)</argsstring>
        <name>min_curve</name>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a427a1af01eb50e23ea7b335b23cf1877" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void max_curve</definition>
        <argsstring>(float *c, float *c2)</argsstring>
        <name>max_curve</name>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="73" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a92a89a4bb3701131749ad96c708303af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void attenuate_curve</definition>
        <argsstring>(float *c, float att)</argsstring>
        <name>attenuate_curve</name>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>att</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a7a31d31e367f8930e6d85e514276ba5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float ***</type>
        <definition>static float*** setup_tone_curves</definition>
        <argsstring>(float curveatt_dB[17], float binHz, int n, float center_boost, float center_decay_rate)</argsstring>
        <name>setup_tone_curves</name>
        <param>
          <type>float</type>
          <declname>curveatt_dB</declname>
          <array>[17]</array>
        </param>
        <param>
          <type>float</type>
          <declname>binHz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>center_boost</declname>
        </param>
        <param>
          <type>float</type>
          <declname>center_decay_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="85" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="85" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a807a71364ce536fec54115f82cfac4b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_psy_init</definition>
        <argsstring>(vorbis_look_psy *p, vorbis_info_psy *vi, vorbis_info_psy_global *gi, int n, long rate)</argsstring>
        <name>_vp_psy_init</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref> *</type>
          <declname>gi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="266" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="266" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1affcd0e9240a0429b7507c9dff1cefc71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_psy_clear</definition>
        <argsstring>(vorbis_look_psy *p)</argsstring>
        <name>_vp_psy_clear</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="350" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="350" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1af2dabc2e461078e0f4f7a9fcf47d7d17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void seed_curve</definition>
        <argsstring>(float *seed, const float **curves, float amp, int oc, int n, int linesper, float dBoffset)</argsstring>
        <name>seed_curve</name>
        <param>
          <type>float *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>oc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linesper</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dBoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="376" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="376" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a1b0de732c108be37b6888a0547fa7c13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void seed_loop</definition>
        <argsstring>(vorbis_look_psy *p, const float ***curves, const float *f, const float *flr, float *seed, float specmax)</argsstring>
        <name>seed_loop</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const float ***</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>flr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>specmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="403" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="403" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a5fa4bbf9fccbab33dbf9898f27c62e72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void seed_chase</definition>
        <argsstring>(float *seeds, int linesper, long n)</argsstring>
        <name>seed_chase</name>
        <param>
          <type>float *</type>
          <declname>seeds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linesper</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="440" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="440" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a8773196e23c71f96575fe4f0121efc4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void max_seeds</definition>
        <argsstring>(vorbis_look_psy *p, float *seed, float *flr)</argsstring>
        <name>max_seeds</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>flr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="498" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="498" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1acbb14a86904ebe37602a32b7a5f35e20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bark_noise_hybridmp</definition>
        <argsstring>(int n, const long *b, const float *f, float *noise, const float offset, const int fixed)</argsstring>
        <name>bark_noise_hybridmp</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const long *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>noise</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fixed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="533" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="533" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a2f79d2534338a7e92db0aa1699258171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_remove_floor</definition>
        <argsstring>(vorbis_look_psy *p, float *mdct, int *codedflr, float *residue, int sliding_lowpass)</argsstring>
        <name>_vp_remove_floor</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>mdct</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>codedflr</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sliding_lowpass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="752" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="752" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ac1810545af983f3d7bdcc2279689f533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_noisemask</definition>
        <argsstring>(vorbis_look_psy *p, float *logmdct, float *logmask)</argsstring>
        <name>_vp_noisemask</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logmdct</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="771" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="771" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1aa3b3c37a437296674cca2436dcba809d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_tonemask</definition>
        <argsstring>(vorbis_look_psy *p, float *logfft, float *logmask, float global_specmax, float local_specmax)</argsstring>
        <name>_vp_tonemask</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logfft</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logmask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>global_specmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>local_specmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="819" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="819" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ac21dad3ec2c3a9954482af2846226f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_offset_and_mix</definition>
        <argsstring>(vorbis_look_psy *p, float *noise, float *tone, int offset_select, float *logmask)</argsstring>
        <name>_vp_offset_and_mix</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>noise</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tone</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_select</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>logmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="844" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="844" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1acf2486bf30b03e505305f05fd3107bb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float _vp_ampmax_decay</definition>
        <argsstring>(float amp, vorbis_dsp_state *vd)</argsstring>
        <name>_vp_ampmax_decay</name>
        <param>
          <type>float</type>
          <declname>amp</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref> *</type>
          <declname>vd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="859" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="859" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a8badd98501ef19f3836e236a4a73a85e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void couple_lossless</definition>
        <argsstring>(float A, float B, float *qA, float *qB)</argsstring>
        <name>couple_lossless</name>
        <param>
          <type>float</type>
          <declname>A</declname>
        </param>
        <param>
          <type>float</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>qA</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>qB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="872" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="872" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a6e7bb539f6a9ff7d757620a96fedbda2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void precomputed_couple_point</definition>
        <argsstring>(float premag, int floorA, int floorB, float *mag, float *ang)</argsstring>
        <name>precomputed_couple_point</name>
        <param>
          <type>float</type>
          <declname>premag</declname>
        </param>
        <param>
          <type>int</type>
          <declname>floorA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>floorB</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>mag</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="902" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="902" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ae878c4800962193503a951073bea7aa5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float dipole_hypot</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>dipole_hypot</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="922" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="922" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ac963286be0381f68a445d190010c2a66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float round_hypot</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>round_hypot</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="932" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="932" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1add94366e518cf66bf13014c3db5a1ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float **</type>
        <definition>float** _vp_quantize_couple_memo</definition>
        <argsstring>(vorbis_block *vb, vorbis_info_psy_global *g, vorbis_look_psy *p, vorbis_info_mapping0 *vi, float **mdct)</argsstring>
        <name>_vp_quantize_couple_memo</name>
        <param>
          <type><ref refid="structvorbis__block" kindref="compound">vorbis_block</ref> *</type>
          <declname>vb</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>mdct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="944" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="944" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ae6a9449b97e4a9d4e4d7fc4da22ba70f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int apsort</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>apsort</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="968" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="968" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1aa92c39ea4cd73ff47ada59ff5885802f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int **</type>
        <definition>int** _vp_quantize_couple_sort</definition>
        <argsstring>(vorbis_block *vb, vorbis_look_psy *p, vorbis_info_mapping0 *vi, float **mags)</argsstring>
        <name>_vp_quantize_couple_sort</name>
        <param>
          <type><ref refid="structvorbis__block" kindref="compound">vorbis_block</ref> *</type>
          <declname>vb</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>mags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="974" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="974" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1ae6aeeea3cdcd566846c39af460eab99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_noise_normalize_sort</definition>
        <argsstring>(vorbis_look_psy *p, float *magnitudes, int *sortedindex)</argsstring>
        <name>_vp_noise_normalize_sort</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>magnitudes</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sortedindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="1000" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="1000" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1a730879eae5e43e8c4114b76b7bd2ac01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_noise_normalize</definition>
        <argsstring>(vorbis_look_psy *p, float *in, float *out, int *sortedindex)</argsstring>
        <name>_vp_noise_normalize</name>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sortedindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="1018" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="1018" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="psy_8c_1abe5bf680b564239f1eadbcec762a5bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _vp_couple</definition>
        <argsstring>(int blobno, vorbis_info_psy_global *g, vorbis_look_psy *p, vorbis_info_mapping0 *vi, float **res, float **mag_memo, int **mag_sort, int **ifloor, int *nonzero, int sliding_lowpass)</argsstring>
        <name>_vp_couple</name>
        <param>
          <type>int</type>
          <declname>blobno</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>res</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>mag_memo</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>mag_sort</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>ifloor</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nonzero</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sliding_lowpass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" line="1064" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c" bodystart="1064" bodyend="1147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FILE<sp/>IS<sp/>PART<sp/>OF<sp/>THE<sp/>OggVorbis<sp/>SOFTWARE<sp/>CODEC<sp/>SOURCE<sp/>CODE.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DISTRIBUTION<sp/>AND<sp/>REPRODUCTION<sp/>OF<sp/>THIS<sp/>LIBRARY<sp/>SOURCE<sp/>IS<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>GOVERNED<sp/>BY<sp/>A<sp/>BSD-STYLE<sp/>SOURCE<sp/>LICENSE<sp/>INCLUDED<sp/>WITH<sp/>THIS<sp/>SOURCE<sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>IN<sp/>&apos;COPYING&apos;.<sp/>PLEASE<sp/>READ<sp/>THESE<sp/>TERMS<sp/>BEFORE<sp/>DISTRIBUTING.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>OggVorbis<sp/>SOURCE<sp/>CODE<sp/>IS<sp/>(C)<sp/>COPYRIGHT<sp/>1994-2002<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>XIPHOPHORUS<sp/>Company<sp/>http://www.xiph.org/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>********************************************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>function:<sp/>psychoacoustics<sp/>not<sp/>including<sp/>preecho</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>last<sp/>mod:<sp/>$Id:<sp/>psy.c,v<sp/>1.81<sp/>2002/10/21<sp/>07:00:11<sp/>xiphmont<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../vorbis/codec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;codec_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;masking.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;psy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lpc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;smallft.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scales.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEGINF<sp/>-9999.f</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stereo_threshholds[]={0.0,<sp/>.5,<sp/>1.0,<sp/>1.5,<sp/>2.5,<sp/>4.5,<sp/>8.5,<sp/>16.5,<sp/>9e10};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structvorbis__look__psy__global" kindref="compound">vorbis_look_psy_global</ref><sp/>*_vp_global_look(<ref refid="structvorbis__info" kindref="compound">vorbis_info</ref><sp/>*vi){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="structcodec__setup__info" kindref="compound">codec_setup_info</ref><sp/>*ci=vi-&gt;codec_setup;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*gi=&amp;ci-&gt;psy_g_param;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__look__psy__global" kindref="compound">vorbis_look_psy_global</ref><sp/>*look=_ogg_calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*look));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>look-&gt;channels=vi-&gt;channels;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>look-&gt;ampmax=-9999.;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>look-&gt;gi=gi;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(look);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_global_free(<ref refid="structvorbis__look__psy__global" kindref="compound">vorbis_look_psy_global</ref><sp/>*look){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(look){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(look,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*look));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>_ogg_free(look);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vi_gpsy_free(<ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*i){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(i,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*i));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>_ogg_free(i);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vi_psy_free(<ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref><sp/>*i){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(i,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*i));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>_ogg_free(i);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>min_curve(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c2){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;EHMER_MAX;i++)</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c2[i]&lt;c[i])c[i]=c2[i];</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>max_curve(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c2){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;EHMER_MAX;i++)if(c2[i]&gt;c[i])c[i]=c2[i];</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>attenuate_curve(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>att){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;EHMER_MAX;i++)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>c[i]+=att;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***setup_tone_curves(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>curveatt_dB[P_BANDS],</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>binHz,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>center_boost,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>center_decay_rate){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,m;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ath[EHMER_MAX];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>workc[P_BANDS][P_LEVELS][EHMER_MAX];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>athc[P_LEVELS][EHMER_MAX];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*brute_buffer=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*brute_buffer));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***ret=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ret)*P_BANDS);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>memset(workc,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(workc));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;P_BANDS;i++){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>add<sp/>back<sp/>in<sp/>the<sp/>ATH<sp/>to<sp/>avoid<sp/>low<sp/>level<sp/>curves<sp/>falling<sp/>off<sp/>to</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-infinity<sp/>and<sp/>unnecessarily<sp/>cutting<sp/>off<sp/>high<sp/>level<sp/>curves<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curve<sp/>limiting<sp/>(last<sp/>step).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>half-band&apos;s<sp/>settings<sp/>must<sp/>be<sp/>valid<sp/>over<sp/>the<sp/>whole<sp/>band,<sp/>and</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it&apos;s<sp/>better<sp/>to<sp/>mask<sp/>too<sp/>little<sp/>than<sp/>too<sp/>much<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ath_offset=i*4;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;EHMER_MAX;j++){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min=999.;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;4;k++)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j+k+ath_offset&lt;MAX_ATH){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min&gt;ATH[j+k+ath_offset])min=ATH[j+k+ath_offset];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min&gt;ATH[MAX_ATH-1])min=ATH[MAX_ATH-1];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ath[j]=min;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>curves<sp/>into<sp/>working<sp/>space,<sp/>replicate<sp/>the<sp/>50dB<sp/>curve<sp/>to<sp/>30</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>40,<sp/>replicate<sp/>the<sp/>100dB<sp/>curve<sp/>to<sp/>110<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;6;j++)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(workc[i][j+2],tonemasks[i][j],EHMER_MAX*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tonemasks[i][j]));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(workc[i][0],tonemasks[i][0],EHMER_MAX*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tonemasks[i][0]));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(workc[i][1],tonemasks[i][0],EHMER_MAX*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tonemasks[i][0]));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply<sp/>centered<sp/>curve<sp/>boost/decay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;P_LEVELS;j++){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;EHMER_MAX;k++){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>adj=center_boost+abs(EHMER_OFFSET-k)*center_decay_rate;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(adj&lt;0.<sp/>&amp;&amp;<sp/>center_boost&gt;0)adj=0.;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(adj&gt;0.<sp/>&amp;&amp;<sp/>center_boost&lt;0)adj=0.;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>workc[i][j][k]+=adj;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normalize<sp/>curves<sp/>so<sp/>the<sp/>driving<sp/>amplitude<sp/>is<sp/>0dB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>temp<sp/>curves<sp/>with<sp/>the<sp/>ATH<sp/>overlayed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;P_LEVELS;j++){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attenuate_curve(workc[i][j],curveatt_dB[i]+100.-(j&lt;2?2:j)*10.-P_LEVEL_0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(athc[j],ath,EHMER_MAX*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**athc));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attenuate_curve(athc[j],+100.-j*10.f-P_LEVEL_0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_curve(athc[j],workc[i][j]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>limit<sp/>the<sp/>louder<sp/>curves.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>idea<sp/>is<sp/>this:<sp/>We<sp/>don&apos;t<sp/>know<sp/>what<sp/>the<sp/>playback<sp/>attenuation</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>be;<sp/>0dB<sp/>SL<sp/>moves<sp/>every<sp/>time<sp/>the<sp/>user<sp/>twiddles<sp/>the<sp/>volume</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knob.<sp/>So<sp/>that<sp/>means<sp/>we<sp/>have<sp/>to<sp/>use<sp/>a<sp/>single<sp/>&apos;most<sp/>pessimal&apos;<sp/>curve</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>all<sp/>masking<sp/>amplitudes,<sp/>right?<sp/><sp/>Wrong.<sp/><sp/>The<sp/>*loudest*<sp/>sound</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>in<sp/>(we<sp/>assume)<sp/>a<sp/>range<sp/>of<sp/>...+100dB]<sp/>SL.<sp/><sp/>However,<sp/>sounds</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20dB<sp/>down<sp/>will<sp/>be<sp/>in<sp/>a<sp/>range<sp/>...+80],<sp/>40dB<sp/>down<sp/>is<sp/>from<sp/>...+60],</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etc...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;j&lt;P_LEVELS;j++){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_curve(athc[j],athc[j-1]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_curve(workc[i][j],athc[j]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;P_BANDS;i++){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hi_curve,lo_curve,bin;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ret[i]=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**ret)*P_LEVELS);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>low<sp/>frequency<sp/>curves<sp/>are<sp/>measured<sp/>with<sp/>greater<sp/>resolution<sp/>than</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>MDCT/FFT<sp/>will<sp/>actually<sp/>give<sp/>us;<sp/>we<sp/>want<sp/>the<sp/>curve<sp/>applied</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>tone<sp/>data<sp/>to<sp/>be<sp/>pessimistic<sp/>and<sp/>thus<sp/>apply<sp/>the<sp/>minimum</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masking<sp/>possible<sp/>for<sp/>a<sp/>given<sp/>bin.<sp/><sp/>That<sp/>means<sp/>that<sp/>a<sp/>single<sp/>bin</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>could<sp/>span<sp/>more<sp/>than<sp/>one<sp/>octave<sp/>and<sp/>that<sp/>the<sp/>curve<sp/>will<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>composite<sp/>of<sp/>multiple<sp/>octaves.<sp/><sp/>It<sp/>also<sp/>may<sp/>mean<sp/>that<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bin<sp/>may<sp/>span<sp/>&gt;<sp/>an<sp/>eighth<sp/>of<sp/>an<sp/>octave<sp/>and<sp/>that<sp/>the<sp/>eighth</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>octave<sp/>values<sp/>may<sp/>also<sp/>be<sp/>composited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>which<sp/>octave<sp/>curves<sp/>will<sp/>we<sp/>be<sp/>compositing?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>bin=floor(fromOC(i*.5)/binHz);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>lo_curve=<sp/><sp/>ceil(toOC(bin*binHz+1)*2);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>hi_curve=<sp/><sp/>floor(toOC((bin+1)*binHz)*2);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_curve&gt;i)lo_curve=i;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_curve&lt;0)lo_curve=0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi_curve&gt;=P_BANDS)hi_curve=P_BANDS-1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(m=0;m&lt;P_LEVELS;m++){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m]=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(***ret)*(EHMER_MAX+2));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;j++)brute_buffer[j]=999.;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>render<sp/>the<sp/>curve<sp/>into<sp/>bins,<sp/>then<sp/>pull<sp/>values<sp/>back<sp/>into<sp/>curve.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>point<sp/>is<sp/>that<sp/>any<sp/>inherent<sp/>subsampling<sp/>aliasing<sp/>results<sp/>in</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>a<sp/>safe<sp/>minimum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=lo_curve;k&lt;=hi_curve;k++){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;EHMER_MAX;j++){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo_bin=<sp/>fromOC(j*.125+k*.5-2.0625)/binHz;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hi_bin=<sp/>fromOC(j*.125+k*.5-1.9375)/binHz+1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&lt;0)lo_bin=0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&gt;n)lo_bin=n;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&lt;l)l=lo_bin;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi_bin&lt;0)hi_bin=0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi_bin&gt;n)hi_bin=n;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;l&lt;hi_bin<sp/>&amp;&amp;<sp/>l&lt;n;l++)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(brute_buffer[l]&gt;workc[k][m][j])</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brute_buffer[l]=workc[k][m][j];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;l&lt;n;l++)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(brute_buffer[l]&gt;workc[k][m][EHMER_MAX-1])</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brute_buffer[l]=workc[k][m][EHMER_MAX-1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>be<sp/>equally<sp/>paranoid<sp/>about<sp/>being<sp/>valid<sp/>up<sp/>to<sp/>next<sp/>half<sp/>ocatve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i+1&lt;P_BANDS){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>k=i+1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;EHMER_MAX;j++){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo_bin=<sp/>fromOC(j*.125+i*.5-2.0625)/binHz;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hi_bin=<sp/>fromOC(j*.125+i*.5-1.9375)/binHz+1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&lt;0)lo_bin=0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&gt;n)lo_bin=n;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo_bin&lt;l)l=lo_bin;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi_bin&lt;0)hi_bin=0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi_bin&gt;n)hi_bin=n;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;l&lt;hi_bin<sp/>&amp;&amp;<sp/>l&lt;n;l++)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(brute_buffer[l]&gt;workc[k][m][j])</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brute_buffer[l]=workc[k][m][j];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;l&lt;n;l++)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(brute_buffer[l]&gt;workc[k][m][EHMER_MAX-1])</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brute_buffer[l]=workc[k][m][EHMER_MAX-1];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;EHMER_MAX;j++){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=fromOC(j*.125+i*.5-2.)/binHz;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin&lt;0){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m][j+2]=-999.;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin&gt;=n){</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m][j+2]=-999.;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m][j+2]=brute_buffer[bin];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>fenceposts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;EHMER_OFFSET;j++)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret[i][m][j+2]&gt;-200.f)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m][0]=j;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=EHMER_MAX-1;j&gt;EHMER_OFFSET+1;j--)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret[i][m][j+2]&gt;-200.f)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][m][1]=j;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_psy_init(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,<ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref><sp/>*vi,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*gi,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rate){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,j,lo=-99,hi=1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxoc;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>memset(p,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>p-&gt;eighth_octave_lines=gi-&gt;eighth_octave_lines;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>p-&gt;shiftoc=rint(log(gi-&gt;eighth_octave_lines*8.f)/log(2.f))-1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>p-&gt;firstoc=toOC(.25f*rate*.5/n)*(1&lt;&lt;(p-&gt;shiftoc+1))-gi-&gt;eighth_octave_lines;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>maxoc=toOC((n+.25f)*rate*.5/n)*(1&lt;&lt;(p-&gt;shiftoc+1))+.5f;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>p-&gt;total_octave_lines=maxoc-p-&gt;firstoc+1;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>p-&gt;ath=_ogg_malloc(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;ath));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>p-&gt;octave=_ogg_malloc(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;octave));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>p-&gt;bark=_ogg_malloc(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;bark));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>p-&gt;vi=vi;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>p-&gt;n=n;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>p-&gt;rate=rate;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>the<sp/>lookups<sp/>for<sp/>a<sp/>given<sp/>blocksize<sp/>and<sp/>sample<sp/>rate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0,j=0;i&lt;MAX_ATH-1;i++){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endpos=rint(fromOC((i+1)*.125-2.)*2*n/rate);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>base=ATH[i];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j&lt;endpos){</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta=(ATH[i+1]-base)/(endpos-j);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;j&lt;endpos<sp/>&amp;&amp;<sp/>j&lt;n;j++){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;ath[j]=base+100.;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base+=delta;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bark=toBARK(rate/(2*n)*i);<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;lo+vi-&gt;noisewindowlomin&lt;i<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toBARK(rate/(2*n)*lo)&lt;(bark-vi-&gt;noisewindowlo);lo++);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;hi&lt;=n<sp/>&amp;&amp;<sp/>(hi&lt;i+vi-&gt;noisewindowhimin<sp/>||</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toBARK(rate/(2*n)*hi)&lt;(bark+vi-&gt;noisewindowhi));hi++);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;bark[i]=((lo-1)&lt;&lt;16)+(hi-1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;octave[i]=toOC((i+.25f)*.5*rate/n)*(1&lt;&lt;(p-&gt;shiftoc+1))+.5f;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>p-&gt;tonecurves=setup_tone_curves(vi-&gt;toneatt,rate*.5/n,n,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;tone_centerboost,vi-&gt;tone_decay);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>rolling<sp/>noise<sp/>median<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>p-&gt;noiseoffset=_ogg_malloc(P_NOISECURVES*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;noiseoffset));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;P_NOISECURVES;i++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;noiseoffset[i]=_ogg_malloc(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**p-&gt;noiseoffset));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>halfoc=toOC((i+.5)*rate/(2.*n))*2.;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inthalfoc;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>del;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(halfoc&lt;0)halfoc=0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(halfoc&gt;=P_BANDS-1)halfoc=P_BANDS-1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>inthalfoc=(int)halfoc;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>del=halfoc-inthalfoc;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;P_NOISECURVES;j++)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;noiseoffset[j][i]=</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;vi-&gt;noiseoff[j][inthalfoc]*(1.-del)<sp/>+<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;vi-&gt;noiseoff[j][inthalfoc+1]*del;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ls=0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>_analysis_output_always(</highlight><highlight class="stringliteral">&quot;noiseoff0&quot;</highlight><highlight class="normal">,ls,p-&gt;noiseoffset[0],n,1,0,0);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>_analysis_output_always(</highlight><highlight class="stringliteral">&quot;noiseoff1&quot;</highlight><highlight class="normal">,ls,p-&gt;noiseoffset[1],n,1,0,0);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>_analysis_output_always(</highlight><highlight class="stringliteral">&quot;noiseoff2&quot;</highlight><highlight class="normal">,ls++,p-&gt;noiseoffset[2],n,1,0,0);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_psy_clear(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p){</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;ath)_ogg_free(p-&gt;ath);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;octave)_ogg_free(p-&gt;octave);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;bark)_ogg_free(p-&gt;bark);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;tonecurves){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;P_BANDS;i++){</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;P_LEVELS;j++){</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ogg_free(p-&gt;tonecurves[i][j]);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>_ogg_free(p-&gt;tonecurves[i]);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ogg_free(p-&gt;tonecurves);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;noiseoffset){</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;P_NOISECURVES;i++){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ogg_free(p-&gt;noiseoffset[i]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ogg_free(p-&gt;noiseoffset);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(p,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>octave/(8*eighth_octave_lines)<sp/>x<sp/>scale<sp/>and<sp/>dB<sp/>y<sp/>scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seed_curve(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*seed,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**curves,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linesper,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dBoffset){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,post1;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seedptr;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*posts,*curve;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>choice=(int)((amp+dBoffset-P_LEVEL_0)*.1f);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>choice=max(choice,0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>choice=min(choice,P_LEVELS-1);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>posts=curves[choice];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>curve=posts+2;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>post1=(int)posts[1];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>seedptr=oc+(posts[0]-EHMER_OFFSET)*linesper-(linesper&gt;&gt;1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=posts[0];i&lt;post1;i++){</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seedptr&gt;0){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lin=amp+curve[i];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seed[seedptr]&lt;lin)seed[seedptr]=lin;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>seedptr+=linesper;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seedptr&gt;=n)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seed_loop(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***curves,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*f,<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*flr,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*seed,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>specmax){</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref><sp/>*vi=p-&gt;vi;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n=p-&gt;n,i;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dBoffset=vi-&gt;max_curve_dB-specmax;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>prime<sp/>the<sp/>working<sp/>vector<sp/>with<sp/>peak<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max=f[i];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>oc=p-&gt;octave[i];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i+1&lt;n<sp/>&amp;&amp;<sp/>p-&gt;octave[i+1]==oc){</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f[i]&gt;max)max=f[i];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max+6.f&gt;flr[i]){</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oc=oc&gt;&gt;p-&gt;shiftoc;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oc&gt;=P_BANDS)oc=P_BANDS-1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oc&lt;0)oc=0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seed_curve(seed,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curves[oc],</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;octave[i]-p-&gt;firstoc,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;total_octave_lines,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;eighth_octave_lines,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dBoffset);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seed_chase(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*seeds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linesper,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>*posstack=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*posstack));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ampstack=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ampstack));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>stack=0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>pos=0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack&lt;2){</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posstack[stack]=i;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ampstack[stack++]=seeds[i];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seeds[i]&lt;ampstack[stack-1]){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posstack[stack]=i;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ampstack[stack++]=seeds[i];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&lt;posstack[stack-1]+linesper){</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack&gt;1<sp/>&amp;&amp;<sp/>ampstack[stack-1]&lt;=ampstack[stack-2]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i&lt;posstack[stack-2]+linesper){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>completely<sp/>overlap,<sp/>making<sp/>stack-1<sp/>irrelevant.<sp/><sp/>pop<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack--;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posstack[stack]=i;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ampstack[stack++]=seeds[i];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>stack<sp/>now<sp/>contains<sp/>only<sp/>the<sp/>positions<sp/>that<sp/>are<sp/>relevant.<sp/>Scan</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&apos;em<sp/>straight<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;stack;i++){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>endpos;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&lt;stack-1<sp/>&amp;&amp;<sp/>ampstack[i+1]&gt;ampstack[i]){</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endpos=posstack[i+1];</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endpos=posstack[i]+linesper+1;<sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>is<sp/>important,<sp/>else<sp/>bin<sp/>0<sp/>is</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discarded<sp/>in<sp/>short<sp/>frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endpos&gt;n)endpos=n;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;pos&lt;endpos;pos++)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seeds[pos]=ampstack[i];</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>there.<sp/><sp/>Linear<sp/>time.<sp/><sp/>I<sp/>now<sp/>remember<sp/>this<sp/>was<sp/>on<sp/>a<sp/>problem<sp/>set<sp/>I</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>had<sp/>in<sp/>Grad<sp/>Skool...<sp/>I<sp/>didn&apos;t<sp/>solve<sp/>it<sp/>at<sp/>the<sp/>time<sp/>;-)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>bleaugh,<sp/>this<sp/>is<sp/>more<sp/>complicated<sp/>than<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>max_seeds(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*seed,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*flr){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>n=p-&gt;total_octave_lines;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>linesper=p-&gt;eighth_octave_lines;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>linpos=0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>seed_chase(seed,linesper,n);<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>masking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>pos=p-&gt;octave[0]-p-&gt;firstoc-(linesper&gt;&gt;1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(linpos+1&lt;p-&gt;n){</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minV=seed[pos];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end=((p-&gt;octave[linpos]+p-&gt;octave[linpos+1])&gt;&gt;1)-p-&gt;firstoc;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minV&gt;p-&gt;vi-&gt;tone_abs_limit)minV=p-&gt;vi-&gt;tone_abs_limit;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(pos+1&lt;=end){</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((seed[pos]&gt;NEGINF<sp/>&amp;&amp;<sp/>seed[pos]&lt;minV)<sp/>||<sp/>minV==NEGINF)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>minV=seed[pos];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>end=pos+p-&gt;firstoc;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;linpos&lt;p-&gt;n<sp/>&amp;&amp;<sp/>p-&gt;octave[linpos]&lt;=end;linpos++)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flr[linpos]&lt;minV)flr[linpos]=minV;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minV=seed[p-&gt;total_octave_lines-1];</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;linpos&lt;p-&gt;n;linpos++)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flr[linpos]&lt;minV)flr[linpos]=minV;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bark_noise_hybridmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*b,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*f,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*noise,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fixed){</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*N=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*N));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*X=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*N));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*XX=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*N));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Y=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*N));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*XY=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*N));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tN,<sp/>tX,<sp/>tXX,<sp/>tY,<sp/>tXY;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo,<sp/>hi;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R,<sp/>A,<sp/>B,<sp/>D;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>tN<sp/>=<sp/>tX<sp/>=<sp/>tXX<sp/>=<sp/>tY<sp/>=<sp/>tXY<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>f[0]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>1.f)<sp/>y<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>y<sp/>*<sp/>y<sp/>*<sp/>.5;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>tN<sp/>+=<sp/>w;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>tX<sp/>+=<sp/>w;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>tY<sp/>+=<sp/>w<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>N[0]<sp/>=<sp/>tN;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>X[0]<sp/>=<sp/>tX;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>XX[0]<sp/>=<sp/>tXX;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>Y[0]<sp/>=<sp/>tY;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>XY[0]<sp/>=<sp/>tXY;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1,<sp/>x<sp/>=<sp/>1.f;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>f[i]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>1.f)<sp/>y<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>y<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>+=<sp/>w;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>tX<sp/>+=<sp/>w<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>tXX<sp/>+=<sp/>w<sp/>*<sp/>x<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>tY<sp/>+=<sp/>w<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>tXY<sp/>+=<sp/>w<sp/>*<sp/>x<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>N[i]<sp/>=<sp/>tN;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>X[i]<sp/>=<sp/>tX;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>XX[i]<sp/>=<sp/>tXX;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>Y[i]<sp/>=<sp/>tY;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>XY[i]<sp/>=<sp/>tXY;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>x<sp/>=<sp/>0.f;;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>b[i]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lo&gt;=0<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>b[i]<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>N[hi]<sp/>+<sp/>N[-lo];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>tX<sp/>=<sp/>X[hi]<sp/>-<sp/>X[-lo];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>tXX<sp/>=<sp/>XX[hi]<sp/>+<sp/>XX[-lo];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>tY<sp/>=<sp/>Y[hi]<sp/>+<sp/>Y[-lo];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>tXY<sp/>=<sp/>XY[hi]<sp/>-<sp/>XY[-lo];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>tY<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tXY;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>B<sp/>=<sp/>tN<sp/>*<sp/>tXY<sp/>-<sp/>tX<sp/>*<sp/>tY;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>tN<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tX;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>&lt;<sp/>0.f)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>b[i]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>b[i]<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi&gt;=n)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>N[hi]<sp/>-<sp/>N[lo];</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>tX<sp/>=<sp/>X[hi]<sp/>-<sp/>X[lo];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>tXX<sp/>=<sp/>XX[hi]<sp/>-<sp/>XX[lo];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>tY<sp/>=<sp/>Y[hi]<sp/>-<sp/>Y[lo];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>tXY<sp/>=<sp/>XY[hi]<sp/>-<sp/>XY[lo];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>tY<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tXY;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>B<sp/>=<sp/>tN<sp/>*<sp/>tXY<sp/>-<sp/>tX<sp/>*<sp/>tY;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>tN<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tX;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>&lt;<sp/>0.f)<sp/>R<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>&lt;<sp/>0.f)<sp/>R<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>x<sp/>=<sp/>0.f;;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>i<sp/>+<sp/>fixed<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>hi<sp/>-<sp/>fixed;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lo&gt;=0)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>N[hi]<sp/>+<sp/>N[-lo];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>tX<sp/>=<sp/>X[hi]<sp/>-<sp/>X[-lo];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>tXX<sp/>=<sp/>XX[hi]<sp/>+<sp/>XX[-lo];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>tY<sp/>=<sp/>Y[hi]<sp/>+<sp/>Y[-lo];</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>tXY<sp/>=<sp/>XY[hi]<sp/>-<sp/>XY[-lo];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>tY<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tXY;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>B<sp/>=<sp/>tN<sp/>*<sp/>tXY<sp/>-<sp/>tX<sp/>*<sp/>tY;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>tN<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tX;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>-<sp/>offset<sp/>&lt;<sp/>noise[i])<sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>i<sp/>+<sp/>fixed<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>hi<sp/>-<sp/>fixed;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hi&gt;=n)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>tN<sp/>=<sp/>N[hi]<sp/>-<sp/>N[lo];</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>tX<sp/>=<sp/>X[hi]<sp/>-<sp/>X[lo];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>tXX<sp/>=<sp/>XX[hi]<sp/>-<sp/>XX[lo];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>tY<sp/>=<sp/>Y[hi]<sp/>-<sp/>Y[lo];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>tXY<sp/>=<sp/>XY[hi]<sp/>-<sp/>XY[lo];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>tY<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tXY;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>B<sp/>=<sp/>tN<sp/>*<sp/>tXY<sp/>-<sp/>tX<sp/>*<sp/>tY;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>tN<sp/>*<sp/>tXX<sp/>-<sp/>tX<sp/>*<sp/>tX;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>-<sp/>offset<sp/>&lt;<sp/>noise[i])<sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++,<sp/>x<sp/>+=<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>(A<sp/>+<sp/>x<sp/>*<sp/>B)<sp/>/<sp/>D;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>-<sp/>offset<sp/>&lt;<sp/>noise[i])<sp/>noise[i]<sp/>=<sp/>R<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FLOOR1_fromdB_INV_LOOKUP[256]={</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>0.F,<sp/>8.81683e+06F,<sp/>8.27882e+06F,<sp/>7.77365e+06F,<sp/></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>7.29930e+06F,<sp/>6.85389e+06F,<sp/>6.43567e+06F,<sp/>6.04296e+06F,<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>5.67422e+06F,<sp/>5.32798e+06F,<sp/>5.00286e+06F,<sp/>4.69759e+06F,<sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>4.41094e+06F,<sp/>4.14178e+06F,<sp/>3.88905e+06F,<sp/>3.65174e+06F,<sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>3.42891e+06F,<sp/>3.21968e+06F,<sp/>3.02321e+06F,<sp/>2.83873e+06F,<sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>2.66551e+06F,<sp/>2.50286e+06F,<sp/>2.35014e+06F,<sp/>2.20673e+06F,<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>2.07208e+06F,<sp/>1.94564e+06F,<sp/>1.82692e+06F,<sp/>1.71544e+06F,<sp/></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>1.61076e+06F,<sp/>1.51247e+06F,<sp/>1.42018e+06F,<sp/>1.33352e+06F,<sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>1.25215e+06F,<sp/>1.17574e+06F,<sp/>1.10400e+06F,<sp/>1.03663e+06F,<sp/></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>973377.F,<sp/>913981.F,<sp/>858210.F,<sp/>805842.F,<sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>756669.F,<sp/>710497.F,<sp/>667142.F,<sp/>626433.F,<sp/></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>588208.F,<sp/>552316.F,<sp/>518613.F,<sp/>486967.F,<sp/></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>457252.F,<sp/>429351.F,<sp/>403152.F,<sp/>378551.F,<sp/></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>355452.F,<sp/>333762.F,<sp/>313396.F,<sp/>294273.F,<sp/></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>276316.F,<sp/>259455.F,<sp/>243623.F,<sp/>228757.F,<sp/></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>214798.F,<sp/>201691.F,<sp/>189384.F,<sp/>177828.F,<sp/></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>166977.F,<sp/>156788.F,<sp/>147221.F,<sp/>138237.F,<sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>129802.F,<sp/>121881.F,<sp/>114444.F,<sp/>107461.F,<sp/></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>100903.F,<sp/>94746.3F,<sp/>88964.9F,<sp/>83536.2F,<sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>78438.8F,<sp/>73652.5F,<sp/>69158.2F,<sp/>64938.1F,<sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>60975.6F,<sp/>57254.9F,<sp/>53761.2F,<sp/>50480.6F,<sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>47400.3F,<sp/>44507.9F,<sp/>41792.0F,<sp/>39241.9F,<sp/></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>36847.3F,<sp/>34598.9F,<sp/>32487.7F,<sp/>30505.3F,<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>28643.8F,<sp/>26896.0F,<sp/>25254.8F,<sp/>23713.7F,<sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>22266.7F,<sp/>20908.0F,<sp/>19632.2F,<sp/>18434.2F,<sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>17309.4F,<sp/>16253.1F,<sp/>15261.4F,<sp/>14330.1F,<sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>13455.7F,<sp/>12634.6F,<sp/>11863.7F,<sp/>11139.7F,<sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>10460.0F,<sp/>9821.72F,<sp/>9222.39F,<sp/>8659.64F,<sp/></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>8131.23F,<sp/>7635.06F,<sp/>7169.17F,<sp/>6731.70F,<sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>6320.93F,<sp/>5935.23F,<sp/>5573.06F,<sp/>5232.99F,<sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>4913.67F,<sp/>4613.84F,<sp/>4332.30F,<sp/>4067.94F,<sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>3819.72F,<sp/>3586.64F,<sp/>3367.78F,<sp/>3162.28F,<sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>2969.31F,<sp/>2788.13F,<sp/>2617.99F,<sp/>2458.24F,<sp/></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>2308.24F,<sp/>2167.39F,<sp/>2035.14F,<sp/>1910.95F,<sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>1794.35F,<sp/>1684.85F,<sp/>1582.04F,<sp/>1485.51F,<sp/></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>1394.86F,<sp/>1309.75F,<sp/>1229.83F,<sp/>1154.78F,<sp/></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>1084.32F,<sp/>1018.15F,<sp/>956.024F,<sp/>897.687F,<sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>842.910F,<sp/>791.475F,<sp/>743.179F,<sp/>697.830F,<sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>655.249F,<sp/>615.265F,<sp/>577.722F,<sp/>542.469F,<sp/></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>509.367F,<sp/>478.286F,<sp/>449.101F,<sp/>421.696F,<sp/></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>395.964F,<sp/>371.803F,<sp/>349.115F,<sp/>327.812F,<sp/></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>307.809F,<sp/>289.026F,<sp/>271.390F,<sp/>254.830F,<sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>239.280F,<sp/>224.679F,<sp/>210.969F,<sp/>198.096F,<sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>186.008F,<sp/>174.658F,<sp/>164.000F,<sp/>153.993F,<sp/></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>144.596F,<sp/>135.773F,<sp/>127.488F,<sp/>119.708F,<sp/></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>112.404F,<sp/>105.545F,<sp/>99.1046F,<sp/>93.0572F,<sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>87.3788F,<sp/>82.0469F,<sp/>77.0404F,<sp/>72.3394F,<sp/></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>67.9252F,<sp/>63.7804F,<sp/>59.8885F,<sp/>56.2341F,<sp/></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>52.8027F,<sp/>49.5807F,<sp/>46.5553F,<sp/>43.7144F,<sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>41.0470F,<sp/>38.5423F,<sp/>36.1904F,<sp/>33.9821F,<sp/></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>31.9085F,<sp/>29.9614F,<sp/>28.1332F,<sp/>26.4165F,<sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>24.8045F,<sp/>23.2910F,<sp/>21.8697F,<sp/>20.5352F,<sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>19.2822F,<sp/>18.1056F,<sp/>17.0008F,<sp/>15.9634F,<sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>14.9893F,<sp/>14.0746F,<sp/>13.2158F,<sp/>12.4094F,<sp/></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>11.6522F,<sp/>10.9411F,<sp/>10.2735F,<sp/>9.64662F,<sp/></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>9.05798F,<sp/>8.50526F,<sp/>7.98626F,<sp/>7.49894F,<sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>7.04135F,<sp/>6.61169F,<sp/>6.20824F,<sp/>5.82941F,<sp/></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>5.47370F,<sp/>5.13970F,<sp/>4.82607F,<sp/>4.53158F,<sp/></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>4.25507F,<sp/>3.99542F,<sp/>3.75162F,<sp/>3.52269F,<sp/></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>3.30774F,<sp/>3.10590F,<sp/>2.91638F,<sp/>2.73842F,<sp/></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>2.57132F,<sp/>2.41442F,<sp/>2.26709F,<sp/>2.12875F,<sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>1.99885F,<sp/>1.87688F,<sp/>1.76236F,<sp/>1.65482F,<sp/></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>1.55384F,<sp/>1.45902F,<sp/>1.36999F,<sp/>1.28640F,<sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>1.20790F,<sp/>1.13419F,<sp/>1.06499F,<sp/>1.F</highlight></codeline>
<codeline lineno="750"><highlight class="normal">};</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_remove_floor(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mdct,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codedflr,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*residue,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliding_lowpass){<sp/></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=p-&gt;n;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sliding_lowpass&gt;n)sliding_lowpass=n;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;sliding_lowpass;i++){</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>residue[i]=</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdct[i]*FLOOR1_fromdB_INV_LOOKUP[codedflr[i]];</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;n;i++)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>residue[i]=0.;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_noisemask(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logmdct,<sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logmask){</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=p-&gt;n;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*work=alloca(n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>bark_noise_hybridmp(n,p-&gt;bark,logmdct,logmask,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140.,-1);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++)work[i]=logmdct[i]-logmask[i];</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>bark_noise_hybridmp(n,p-&gt;bark,work,logmask,0.,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;vi-&gt;noisewindowfixed);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++)work[i]=logmdct[i]-work[i];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seq=0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>work2[n];</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>work2[i]=logmask[i]+work[i];</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq&amp;1)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_analysis_output(</highlight><highlight class="stringliteral">&quot;median2R&quot;</highlight><highlight class="normal">,seq/2,work,n,1,0,0);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_analysis_output(</highlight><highlight class="stringliteral">&quot;median2L&quot;</highlight><highlight class="normal">,seq/2,work,n,1,0,0);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seq&amp;1)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_analysis_output(</highlight><highlight class="stringliteral">&quot;envelope2R&quot;</highlight><highlight class="normal">,seq/2,work2,n,1,0,0);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_analysis_output(</highlight><highlight class="stringliteral">&quot;envelope2L&quot;</highlight><highlight class="normal">,seq/2,work2,n,1,0,0);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>seq++;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dB=logmask[i]+.5;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dB&gt;=NOISE_COMPAND_LEVELS)dB=NOISE_COMPAND_LEVELS-1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dB&lt;0)dB=0;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>logmask[i]=<sp/>work[i]+p-&gt;vi-&gt;noisecompand[dB];</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_tonemask(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logfft,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logmask,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>global_specmax,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>local_specmax){</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=p-&gt;n;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*seed=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*seed)*p-&gt;total_octave_lines);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>att=local_specmax+p-&gt;vi-&gt;ath_adjatt;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;p-&gt;total_octave_lines;i++)seed[i]=NEGINF;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>ATH<sp/>(floating<sp/>below<sp/>localmax,<sp/>not<sp/>global<sp/>max<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>specified<sp/>att)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(att&lt;p-&gt;vi-&gt;ath_maxatt)att=p-&gt;vi-&gt;ath_maxatt;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>logmask[i]=p-&gt;ath[i]+att;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>tone<sp/>masking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>seed_loop(p,(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>***)p-&gt;tonecurves,logfft,logmask,seed,global_specmax);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>max_seeds(p,seed,logmask);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_offset_and_mix(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*noise,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*tone,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_select,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*logmask){</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=p-&gt;n;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>toneatt=p-&gt;vi-&gt;tone_masteratt[offset_select];</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val=<sp/>noise[i]+p-&gt;noiseoffset[offset_select][i];</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val&gt;p-&gt;vi-&gt;noisemaxsupp)val=p-&gt;vi-&gt;noisemaxsupp;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>logmask[i]=max(val,tone[i]+toneatt);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_vp_ampmax_decay(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,<ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref><sp/>*vd){</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info" kindref="compound">vorbis_info</ref><sp/>*vi=vd-&gt;vi;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><ref refid="structcodec__setup__info" kindref="compound">codec_setup_info</ref><sp/>*ci=vi-&gt;codec_setup;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*gi=&amp;ci-&gt;psy_g_param;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=ci-&gt;blocksizes[vd-&gt;W]/2;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>secs=(float)n/vi-&gt;rate;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>amp+=secs*gi-&gt;ampmax_att_per_sec;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(amp&lt;-9999)amp=-9999;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(amp);</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>couple_lossless(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B,<sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*qA,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*qB){</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test1=fabs(*qA)&gt;fabs(*qB);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>test1-=<sp/>fabs(*qA)&lt;fabs(*qB);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!test1)test1=((fabs(A)&gt;fabs(B))&lt;&lt;1)-1;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(test1==1){</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>*qB=(*qA&gt;0.f?*qA-*qB:*qB-*qA);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp=*qB;<sp/><sp/></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>*qB=(*qB&gt;0.f?*qA-*qB:*qB-*qA);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>*qA=temp;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*qB&gt;fabs(*qA)*1.9999f){</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>*qB=<sp/>-fabs(*qA)*2.f;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>*qA=<sp/>-*qA;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hypot_lookup[32]={</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>-0.009935,<sp/>-0.011245,<sp/>-0.012726,<sp/>-0.014397,<sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>-0.016282,<sp/>-0.018407,<sp/>-0.020800,<sp/>-0.023494,<sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>-0.026522,<sp/>-0.029923,<sp/>-0.033737,<sp/>-0.038010,<sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>-0.042787,<sp/>-0.048121,<sp/>-0.054064,<sp/>-0.060671,<sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>-0.068000,<sp/>-0.076109,<sp/>-0.085054,<sp/>-0.094892,<sp/></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>-0.105675,<sp/>-0.117451,<sp/>-0.130260,<sp/>-0.144134,<sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>-0.159093,<sp/>-0.175146,<sp/>-0.192286,<sp/>-0.210490,<sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>-0.229718,<sp/>-0.249913,<sp/>-0.271001,<sp/>-0.292893};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>precomputed_couple_point(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>premag,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floorA,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floorB,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mag,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ang){</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test=(floorA&gt;floorB)-1;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset=31-abs(floorA-floorB);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>floormag=hypot_lookup[((offset&lt;0)-1)&amp;offset]+1.f;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>floormag*=FLOOR1_fromdB_INV_LOOKUP[(floorB&amp;test)|(floorA&amp;(~test))];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>*mag=premag*floormag;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>*ang=0.f;</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>just<sp/>like<sp/>below,<sp/>this<sp/>is<sp/>currently<sp/>set<sp/>up<sp/>to<sp/>only<sp/>do</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/>single-step-depth<sp/>coupling.<sp/><sp/>Otherwise,<sp/>we&apos;d<sp/>have<sp/>to<sp/>do<sp/>more</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/>copying<sp/>(which<sp/>will<sp/>be<sp/>inevitable<sp/>later)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>doing<sp/>the<sp/>real<sp/>circular<sp/>magnitude<sp/>calculation<sp/>is<sp/>audibly<sp/>superior</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/>to<sp/>(A+B)/sqrt(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dipole_hypot(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b){</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a&gt;0.){</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b&gt;0.)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a&gt;-b)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a*a-b*b);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(b*b-a*a);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b&lt;0.)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(-a&gt;b)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(a*a-b*b);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(b*b-a*a);</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>round_hypot(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b){</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a&gt;0.){</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b&gt;0.)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a&gt;-b)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(b*b+a*a);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b&lt;0.)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(-a&gt;b)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sqrt(a*a+b*b);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(b*b+a*a);</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>revert<sp/>to<sp/>round<sp/>hypot<sp/>for<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**_vp_quantize_couple_memo(<ref refid="structvorbis__block" kindref="compound">vorbis_block</ref><sp/>*vb,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*g,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref><sp/>*vi,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**mdct){</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n=p-&gt;n;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**ret=_vorbis_block_alloc(vb,vi-&gt;coupling_steps*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ret));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit=g-&gt;coupling_pointlimit[p-&gt;vi-&gt;blockflag][PACKETBLOBS/2];</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;vi-&gt;coupling_steps;i++){</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mdctM=mdct[vi-&gt;coupling_mag[i]];</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mdctA=mdct[vi-&gt;coupling_ang[i]];</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>ret[i]=_vorbis_block_alloc(vb,n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**ret));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;limit;j++)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][j]=dipole_hypot(mdctM[j],mdctA[j]);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;j&lt;n;j++)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i][j]=round_hypot(mdctM[j],mdctA[j]);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>for<sp/>per-channel<sp/>noise<sp/>normalization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>apsort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b){</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f1=fabs(**(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**)a);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f2=fabs(**(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**)b);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(f1&lt;f2)-(f1&gt;f2);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**_vp_quantize_couple_sort(<ref refid="structvorbis__block" kindref="compound">vorbis_block</ref><sp/>*vb,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref><sp/>*vi,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**mags){</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;vi-&gt;normal_point_p){</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,n=p-&gt;n;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**ret=_vorbis_block_alloc(vb,vi-&gt;coupling_steps*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ret));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partition=p-&gt;vi-&gt;normal_partition;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**work=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work)*partition);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;vi-&gt;coupling_steps;i++){</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]=_vorbis_block_alloc(vb,n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**ret));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;j+=partition){</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;partition;k++)work[k]=mags[i]+k+j;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(work,partition,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work),apsort);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;partition;k++)ret[i][k+j]=work[k]-mags[i];</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_noise_normalize_sort(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*magnitudes,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sortedindex){</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n=p-&gt;n;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref><sp/>*vi=p-&gt;vi;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partition=vi-&gt;normal_partition;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**work=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work)*partition);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start=vi-&gt;normal_start;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=start;j&lt;n;j+=partition){</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j+partition&gt;n)partition=n-j;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;partition;i++)work[i]=magnitudes+i+j;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(work,partition,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*work),apsort);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;partition;i++){</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sortedindex[i+j-start]=work[i]-magnitudes;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_noise_normalize(<ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*in,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*out,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sortedindex){</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag=0,i,j=0,n=p-&gt;n;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info__psy" kindref="compound">vorbis_info_psy</ref><sp/>*vi=p-&gt;vi;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partition=vi-&gt;normal_partition;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start=vi-&gt;normal_start;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start&gt;n)start=n;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vi-&gt;normal_channel_p){</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;j&lt;start;j++)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[j]=rint(in[j]);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;j+partition&lt;=n;j+=partition){</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc=0.;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=j;i&lt;j+partition;i++)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>acc+=in[i]*in[i];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;partition;i++){</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>k=sortedindex[i+j-start];</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in[k]*in[k]&gt;=.25f){</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[k]=rint(in[k]);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc-=in[k]*in[k];</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag=1;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(acc&lt;vi-&gt;normal_thresh)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[k]=unitnorm(in[k]);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc-=1.;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;partition;i++){</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>k=sortedindex[i+j-start];</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>out[k]=0.;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;j&lt;n;j++)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>out[j]=rint(in[j]);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_vp_couple(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blobno,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__psy__global" kindref="compound">vorbis_info_psy_global</ref><sp/>*g,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__look__psy" kindref="compound">vorbis_look_psy</ref><sp/>*p,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvorbis__info__mapping0" kindref="compound">vorbis_info_mapping0</ref><sp/>*vi,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**res,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**mag_memo,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>**mag_sort,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>**ifloor,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*nonzero,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>sliding_lowpass){</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,n=p-&gt;n;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>any<sp/>requested<sp/>channel<sp/>coupling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>point<sp/>stereo<sp/>can<sp/>only<sp/>be<sp/>used<sp/>in<sp/>a<sp/>first<sp/>stage<sp/>(in<sp/>this<sp/>encoder)</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>because<sp/>of<sp/>the<sp/>dependency<sp/>on<sp/>floor<sp/>lookups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;vi-&gt;coupling_steps;i++){</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>once<sp/>we&apos;re<sp/>doing<sp/>multistage<sp/>coupling<sp/>in<sp/>which<sp/>a<sp/>channel<sp/>goes</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>through<sp/>more<sp/>than<sp/>one<sp/>coupling<sp/>step,<sp/>the<sp/>floor<sp/>vector</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnitudes<sp/>will<sp/>also<sp/>have<sp/>to<sp/>be<sp/>recalculated<sp/>an<sp/>propogated</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>along<sp/>with<sp/>PCM.<sp/><sp/>Right<sp/>now,<sp/>we&apos;re<sp/>not<sp/>(that<sp/>will<sp/>wait<sp/>until<sp/>5.1</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>most<sp/>likely),<sp/>so<sp/>the<sp/>code<sp/>isn&apos;t<sp/>here<sp/>yet.<sp/>The<sp/>memory<sp/>management</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here<sp/>is<sp/>all<sp/>assuming<sp/>single<sp/>depth<sp/>couplings<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>coupling<sp/>a<sp/>zero<sp/>and<sp/>a<sp/>nonzero<sp/>channel<sp/>results<sp/>in<sp/>two</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonzero<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nonzero[vi-&gt;coupling_mag[i]]<sp/>||</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonzero[vi-&gt;coupling_ang[i]]){</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rM=res[vi-&gt;coupling_mag[i]];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rA=res[vi-&gt;coupling_ang[i]];</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*qM=rM+n;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*qA=rA+n;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*floorM=ifloor[vi-&gt;coupling_mag[i]];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*floorA=ifloor[vi-&gt;coupling_ang[i]];</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>prepoint=stereo_threshholds[g-&gt;coupling_prepointamp[blobno]];</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>postpoint=stereo_threshholds[g-&gt;coupling_postpointamp[blobno]];</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partition=(p-&gt;vi-&gt;normal_point_p?p-&gt;vi-&gt;normal_partition:p-&gt;n);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit=g-&gt;coupling_pointlimit[p-&gt;vi-&gt;blockflag][blobno];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointlimit=limit;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonzero[vi-&gt;coupling_mag[i]]=1;<sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonzero[vi-&gt;coupling_ang[i]]=1;<sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;p-&gt;n;j+=partition){</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc=0.f;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;partition;k++){</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=k+j;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l&lt;sliding_lowpass){</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((l&gt;=limit<sp/>&amp;&amp;<sp/>fabs(rM[l])&lt;postpoint<sp/>&amp;&amp;<sp/>fabs(rA[l])&lt;postpoint)<sp/>||</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(rM[l])&lt;prepoint<sp/>&amp;&amp;<sp/>fabs(rA[l])&lt;prepoint)){</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precomputed_couple_point(mag_memo[i][l],</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floorM[l],floorA[l],</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qM+l,qA+l);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rint(qM[l])==0.f)acc+=qM[l]*qM[l];</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>couple_lossless(rM[l],rA[l],qM+l,qA+l);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qM[l]=0.;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qA[l]=0.;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;vi-&gt;normal_point_p){</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;partition<sp/>&amp;&amp;<sp/>acc&gt;=p-&gt;vi-&gt;normal_thresh;k++){</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=mag_sort[i][j+k];</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l&lt;sliding_lowpass<sp/>&amp;&amp;<sp/>l&gt;=pointlimit<sp/>&amp;&amp;<sp/>rint(qM[l])==0.f){</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qM[l]=unitnorm(qM[l]);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc-=1.f;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/psy.c"/>
  </compounddef>
</doxygen>
