<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="snd__system_8cpp" kind="file">
    <compoundname>snd_system.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="snd__local_8h" local="yes">snd_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="snd__system_8cpp_1a2706191e35e412ee5f4ce07859348272" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sound_system_local" kindref="compound">idSoundSystemLocal</ref></type>
        <definition>idSoundSystemLocal soundSystemLocal</definition>
        <argsstring></argsstring>
        <name>soundSystemLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="snd__system_8cpp_1a855f18ae78605bcf88eaea537c532d87" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sound_system" kindref="compound">idSoundSystem</ref> *</type>
        <definition>idSoundSystem* soundSystem</definition>
        <argsstring></argsstring>
        <name>soundSystem</name>
        <initializer>= &amp;soundSystemLocal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="92" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="snd__system_8cpp_1a68d6c6a8013c0e5734d5bc639bed6e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SoundReloadSounds_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>SoundReloadSounds_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="101" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="101" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="snd__system_8cpp_1a0fa312c1816fe61b2a11c22cf1c67c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ListSounds_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>ListSounds_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="122" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="122" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="snd__system_8cpp_1aa047db76cb90efa7f3e1f1ada8514066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ListSoundDecoders_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>ListSoundDecoders_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="176" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="176" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="snd__system_8cpp_1a00c194e93b1cb4a01ff77e558fd6199a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestSound_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>TestSound_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="265" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="snd__system_8cpp_1ac8b019f28941ca26a1fb6c075f85d545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SoundSystemRestart_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>SoundSystemRestart_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" line="284" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp" bodystart="284" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;snd_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEDICATED</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_noSound(<sp/></highlight><highlight class="stringliteral">&quot;s_noSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_noSound(<sp/></highlight><highlight class="stringliteral">&quot;s_noSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_quadraticFalloff(<sp/></highlight><highlight class="stringliteral">&quot;s_quadraticFalloff&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_drawSounds(<sp/></highlight><highlight class="stringliteral">&quot;s_drawSounds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>2,<sp/>idCmdSystem::ArgCompletion_Integer&lt;0,2&gt;<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_showStartSound(<sp/></highlight><highlight class="stringliteral">&quot;s_showStartSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_useOcclusion(<sp/></highlight><highlight class="stringliteral">&quot;s_useOcclusion&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_maxSoundsPerShader(<sp/></highlight><highlight class="stringliteral">&quot;s_maxSoundsPerShader&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>10,<sp/>idCmdSystem::ArgCompletion_Integer&lt;0,10&gt;<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_showLevelMeter(<sp/></highlight><highlight class="stringliteral">&quot;s_showLevelMeter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_constantAmplitude(<sp/></highlight><highlight class="stringliteral">&quot;s_constantAmplitude&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_minVolume6(<sp/></highlight><highlight class="stringliteral">&quot;s_minVolume6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_dotbias6(<sp/></highlight><highlight class="stringliteral">&quot;s_dotbias6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.8&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_minVolume2(<sp/></highlight><highlight class="stringliteral">&quot;s_minVolume2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.25&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_dotbias2(<sp/></highlight><highlight class="stringliteral">&quot;s_dotbias2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1.1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_spatializationDecay(<sp/></highlight><highlight class="stringliteral">&quot;s_spatializationDecay&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_reverse(<sp/></highlight><highlight class="stringliteral">&quot;s_reverse&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_meterTopTime(<sp/></highlight><highlight class="stringliteral">&quot;s_meterTopTime&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_volume(<sp/></highlight><highlight class="stringliteral">&quot;s_volume_dB&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;volume<sp/>in<sp/>dB&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_playDefaultSound(<sp/></highlight><highlight class="stringliteral">&quot;s_playDefaultSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;play<sp/>a<sp/>beep<sp/>for<sp/>missing<sp/>sounds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_subFraction(<sp/></highlight><highlight class="stringliteral">&quot;s_subFraction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.75&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;volume<sp/>to<sp/>subwoofer<sp/>in<sp/>5.1&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_globalFraction(<sp/></highlight><highlight class="stringliteral">&quot;s_globalFraction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.8&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;volume<sp/>to<sp/>all<sp/>speakers<sp/>when<sp/>not<sp/>spatialized&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_doorDistanceAdd(<sp/></highlight><highlight class="stringliteral">&quot;s_doorDistanceAdd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;150&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;reduce<sp/>sound<sp/>volume<sp/>with<sp/>this<sp/>distance<sp/>when<sp/>going<sp/>through<sp/>a<sp/>door&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_singleEmitter(<sp/></highlight><highlight class="stringliteral">&quot;s_singleEmitter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;mute<sp/>all<sp/>sounds<sp/>but<sp/>this<sp/>emitter&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_numberOfSpeakers(<sp/></highlight><highlight class="stringliteral">&quot;s_numberOfSpeakers&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>speakers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_force22kHz(<sp/></highlight><highlight class="stringliteral">&quot;s_force22kHz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_clipVolumes(<sp/></highlight><highlight class="stringliteral">&quot;s_clipVolumes&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_realTimeDecoding(<sp/></highlight><highlight class="stringliteral">&quot;s_realTimeDecoding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_INIT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_slowAttenuate(<sp/></highlight><highlight class="stringliteral">&quot;s_slowAttenuate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;slowmo<sp/>sounds<sp/>attenuate<sp/>over<sp/>shorted<sp/>distance&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_enviroSuitCutoffFreq(<sp/></highlight><highlight class="stringliteral">&quot;s_enviroSuitCutoffFreq&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_enviroSuitCutoffQ(<sp/></highlight><highlight class="stringliteral">&quot;s_enviroSuitCutoffQ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_reverbTime(<sp/></highlight><highlight class="stringliteral">&quot;s_reverbTime&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_reverbFeedback(<sp/></highlight><highlight class="stringliteral">&quot;s_reverbFeedback&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.333&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_enviroSuitVolumeScale(<sp/></highlight><highlight class="stringliteral">&quot;s_enviroSuitVolumeScale&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.9&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_FLOAT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_skipHelltimeFX(<sp/></highlight><highlight class="stringliteral">&quot;s_skipHelltimeFX&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ID_OPENAL</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>off<sp/>by<sp/>default.<sp/>OpenAL<sp/>DLL<sp/>gets<sp/>loaded<sp/>on-demand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_libOpenAL(<sp/></highlight><highlight class="stringliteral">&quot;s_libOpenAL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;openal32.dll&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;OpenAL<sp/>DLL<sp/>name/path&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_useOpenAL(<sp/></highlight><highlight class="stringliteral">&quot;s_useOpenAL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;use<sp/>OpenAL&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_useEAXReverb(<sp/></highlight><highlight class="stringliteral">&quot;s_useEAXReverb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;use<sp/>EAX<sp/>reverb&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_muteEAXReverb(<sp/></highlight><highlight class="stringliteral">&quot;s_muteEAXReverb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;mute<sp/>eax<sp/>reverb&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_decompressionLimit(<sp/></highlight><highlight class="stringliteral">&quot;s_decompressionLimit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;specifies<sp/>maximum<sp/>uncompressed<sp/>sample<sp/>length<sp/>in<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_libOpenAL(<sp/></highlight><highlight class="stringliteral">&quot;s_libOpenAL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;openal32.dll&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;OpenAL<sp/>is<sp/>not<sp/>supported<sp/>in<sp/>this<sp/>build&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_useOpenAL(<sp/></highlight><highlight class="stringliteral">&quot;s_useOpenAL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;OpenAL<sp/>is<sp/>not<sp/>supported<sp/>in<sp/>this<sp/>build&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_useEAXReverb(<sp/></highlight><highlight class="stringliteral">&quot;s_useEAXReverb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;EAX<sp/>not<sp/>available<sp/>in<sp/>this<sp/>build&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_muteEAXReverb(<sp/></highlight><highlight class="stringliteral">&quot;s_muteEAXReverb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;mute<sp/>eax<sp/>reverb&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idSoundSystemLocal::s_decompressionLimit(<sp/></highlight><highlight class="stringliteral">&quot;s_decompressionLimit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/>CVAR_SOUND<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;specifies<sp/>maximum<sp/>uncompressed<sp/>sample<sp/>length<sp/>in<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idSoundSystemLocal::useOpenAL<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idSoundSystemLocal::useEAXReverb<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::EAXAvailable<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="classid_sound_system_local" kindref="compound">idSoundSystemLocal</ref><sp/><sp/>soundSystemLocal;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="classid_sound_system" kindref="compound">idSoundSystem</ref><sp/><sp/><sp/>*soundSystem<sp/><sp/>=<sp/>&amp;soundSystemLocal;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="95"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="96"><highlight class="comment">SoundReloadSounds_f</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>this<sp/>is<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread</highlight></codeline>
<codeline lineno="99"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="100"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundReloadSounds_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!soundSystemLocal.soundCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args.Argc()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystemLocal.soundCache-&gt;ReloadSounds(<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sound:<sp/>changed<sp/>sounds<sp/>reloaded\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="117"><highlight class="comment">ListSounds_f</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">Optional<sp/>parameter<sp/>to<sp/>only<sp/>list<sp/>sounds<sp/>containing<sp/>that<sp/>string</highlight></codeline>
<codeline lineno="120"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="121"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListSounds_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*snd<sp/>=<sp/>args.Argv(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!soundSystemLocal.soundCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>sound.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSounds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSamples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalMemory<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalPCMMemory<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>soundSystemLocal.soundCache-&gt;GetNumObjects();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_sample" kindref="compound">idSoundSample</ref><sp/>*sample<sp/>=<sp/>soundSystemLocal.soundCache-&gt;GetObject(i);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sample<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>snd<sp/>&amp;&amp;<sp/>sample-&gt;name.Find(<sp/>snd,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwaveformatex__s" kindref="compound">waveformatex_t</ref><sp/>&amp;info<sp/>=<sp/>sample-&gt;objectInfo;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stereo<sp/>=<sp/>(<sp/>info.nChannels<sp/>==<sp/>2<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ST&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format<sp/>=<sp/>(<sp/>info.wFormatTag<sp/>==<sp/>WAVE_FORMAT_TAG_OGG<sp/>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OGG&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;WAV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defaulted<sp/>=<sp/>(<sp/>sample-&gt;defaultSound<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;(DEFAULTED)&quot;</highlight><highlight class="normal"><sp/>:<sp/>sample-&gt;purged<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;(PURGED)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%dkHz<sp/>%6dms<sp/>%5dkB<sp/>%4s<sp/>%s%s\n&quot;</highlight><highlight class="normal">,<sp/>stereo,<sp/>sample-&gt;objectInfo.nSamplesPerSec<sp/>/<sp/>1000,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystemLocal.SamplesToMilliseconds(<sp/>sample-&gt;LengthIn44kHzSamples()<sp/>),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample-&gt;objectMemSize<sp/>&gt;&gt;<sp/>10,<sp/>format,<sp/>sample-&gt;name.c_str(),<sp/>defaulted<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sample-&gt;purged<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSamples<sp/>+=<sp/>sample-&gt;objectSize;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>info.wFormatTag<sp/>!=<sp/>WAVE_FORMAT_TAG_OGG<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPCMMemory<sp/>+=<sp/>sample-&gt;objectMemSize;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sample-&gt;hardwareBuffer<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalMemory<sp/>+=<sp/>sample-&gt;objectMemSize;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSounds++;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%8d<sp/>total<sp/>sounds\n&quot;</highlight><highlight class="normal">,<sp/>totalSounds<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%8d<sp/>total<sp/>samples<sp/>loaded\n&quot;</highlight><highlight class="normal">,<sp/>totalSamples<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%8d<sp/>kB<sp/>total<sp/>system<sp/>memory<sp/>used\n&quot;</highlight><highlight class="normal">,<sp/>totalMemory<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ID_OPENAL</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%8d<sp/>kB<sp/>total<sp/>OpenAL<sp/>audio<sp/>memory<sp/>used\n&quot;</highlight><highlight class="normal">,<sp/>(<sp/>alGetInteger(<sp/>alGetEnumValue(<sp/>(ALubyte*)</highlight><highlight class="stringliteral">&quot;AL_EAX_RAM_SIZE&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>-<sp/>alGetInteger(<sp/>alGetEnumValue(<sp/>(ALubyte*)</highlight><highlight class="stringliteral">&quot;AL_EAX_RAM_FREE&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="172"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="173"><highlight class="comment">ListSoundDecoders_f</highlight></codeline>
<codeline lineno="174"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="175"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListSoundDecoders_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>numActiveDecoders,<sp/>numWaitingDecoders;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_sound_world_local" kindref="compound">idSoundWorldLocal</ref><sp/>*sw<sp/>=<sp/>soundSystemLocal.currentSoundWorld;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>numActiveDecoders<sp/>=<sp/>numWaitingDecoders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sw-&gt;emitters.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_emitter_local" kindref="compound">idSoundEmitterLocal</ref><sp/>*sound<sp/>=<sp/>sw-&gt;emitters[i];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>through<sp/>all<sp/>the<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SOUND_MAX_CHANNELS;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_channel" kindref="compound">idSoundChannel</ref><sp/><sp/>*chan<sp/>=<sp/>&amp;sound-&gt;channels[j];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chan-&gt;decoder<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_sample" kindref="compound">idSoundSample</ref><sp/>*sample<sp/>=<sp/>chan-&gt;decoder-&gt;GetSample();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sample<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format<sp/>=<sp/>(<sp/>chan-&gt;leadinSample-&gt;objectInfo.wFormatTag<sp/>==<sp/>WAVE_FORMAT_TAG_OGG<sp/>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OGG&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;WAV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%3d<sp/>waiting<sp/>%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>numWaitingDecoders,<sp/>format,<sp/>chan-&gt;leadinSample-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numWaitingDecoders++;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sw-&gt;emitters.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_emitter_local" kindref="compound">idSoundEmitterLocal</ref><sp/>*sound<sp/>=<sp/>sw-&gt;emitters[i];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>through<sp/>all<sp/>the<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>SOUND_MAX_CHANNELS;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_channel" kindref="compound">idSoundChannel</ref><sp/><sp/>*chan<sp/>=<sp/>&amp;sound-&gt;channels[j];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chan-&gt;decoder<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_sample" kindref="compound">idSoundSample</ref><sp/>*sample<sp/>=<sp/>chan-&gt;decoder-&gt;GetSample();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sample<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format<sp/>=<sp/>(<sp/>sample-&gt;objectInfo.wFormatTag<sp/>==<sp/>WAVE_FORMAT_TAG_OGG<sp/>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OGG&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;WAV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localTime<sp/>=<sp/>soundSystemLocal.GetCurrent44kHzTime()<sp/>-<sp/>chan-&gt;trigger44kHzTime;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleTime<sp/>=<sp/>sample-&gt;LengthIn44kHzSamples()<sp/>*<sp/>sample-&gt;objectInfo.nChannels;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>percent;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localTime<sp/>&gt;<sp/>sampleTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chan-&gt;parms.soundShaderFlags<sp/>&amp;<sp/>SSF_LOOPING<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>(<sp/>localTime<sp/>%<sp/>sampleTime<sp/>)<sp/>*<sp/>100<sp/>/<sp/>sampleTime;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percent<sp/>=<sp/>localTime<sp/>*<sp/>100<sp/>/<sp/>sampleTime;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%3d<sp/>decoding<sp/>%3d%%<sp/>%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>numActiveDecoders,<sp/>percent,<sp/>format,<sp/>sample-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numActiveDecoders++;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>decoders\n&quot;</highlight><highlight class="normal">,<sp/>numWaitingDecoders<sp/>+<sp/>numActiveDecoders<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>waiting<sp/>decoders\n&quot;</highlight><highlight class="normal">,<sp/>numWaitingDecoders<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>active<sp/>decoders\n&quot;</highlight><highlight class="normal">,<sp/>numActiveDecoders<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>kB<sp/>decoder<sp/>memory<sp/>in<sp/>%d<sp/>blocks\n&quot;</highlight><highlight class="normal">,<sp/>idSampleDecoder::GetUsedBlockMemory()<sp/>&gt;&gt;<sp/>10,<sp/>idSampleDecoder::GetNumUsedBlocks()<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="259"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="260"><highlight class="comment">TestSound_f</highlight></codeline>
<codeline lineno="261"><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/>this<sp/>is<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread</highlight></codeline>
<codeline lineno="263"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="264"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSound_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args.Argc()<sp/>!=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Usage:<sp/>testSound<sp/>&lt;file&gt;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>soundSystemLocal.currentSoundWorld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystemLocal.currentSoundWorld-&gt;PlayShaderDirectly(<sp/>args.Argv(<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="276"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="277"><highlight class="comment">SoundSystemRestart_f</highlight></codeline>
<codeline lineno="278"><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">restart<sp/>the<sp/>sound<sp/>thread</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>this<sp/>is<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread</highlight></codeline>
<codeline lineno="282"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="283"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundSystemRestart_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystemLocal.ShutdownHW();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystemLocal.InitHW();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="292"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="293"><highlight class="comment">idSoundSystemLocal::Init</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment">initialize<sp/>the<sp/>sound<sp/>system</highlight></codeline>
<codeline lineno="296"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="297"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::Init()<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;-----<sp/>Initializing<sp/>Sound<sp/>System<sp/>------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>isInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>muted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>currentSoundWorld<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>soundCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>olddwCurrentWritePos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentSoundTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>nextWriteBlock<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>meterTops,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>meterTops<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>meterTopsTime,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>meterTopsTime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-600;<sp/>i<sp/>&lt;<sp/>600;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pt<sp/>=<sp/>i<sp/>*<sp/>0.1f;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>volumesDB[i+600]<sp/>=<sp/>pow(<sp/>2.0f,(<sp/>pt<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>16<sp/>byte<sp/>aligned<sp/>finalMixBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>finalMixBuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>(<sp/>(<sp/>(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)realAccum<sp/>)<sp/>+<sp/>15<sp/>)<sp/>&amp;<sp/>~15<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s_noSound.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSampleDecoder::Init();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_sound_cache" kindref="compound">idSoundCache</ref>();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>openal<sp/>device<sp/>and<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;StartupVariable(<sp/></highlight><highlight class="stringliteral">&quot;s_useOpenAL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;StartupVariable(<sp/></highlight><highlight class="stringliteral">&quot;s_useEAXReverb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idSoundSystemLocal::s_useOpenAL.GetBool()<sp/>||<sp/>idSoundSystemLocal::s_useEAXReverb.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_LoadOpenAL()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSoundSystemLocal::s_useOpenAL.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Setup<sp/>OpenAL<sp/>device<sp/>and<sp/>context...<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalDevice<sp/>=<sp/>alcOpenDevice(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalContext<sp/>=<sp/>alcCreateContext(<sp/>openalDevice,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Done.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>obtain<sp/>EAX<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idSoundSystemLocal::s_useEAXReverb.GetBool()<sp/>&amp;&amp;<sp/>alIsExtensionPresent(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAX4.0&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSoundSystemLocal::s_useOpenAL.SetBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EAX<sp/>presence<sp/>causes<sp/>AL<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXSet<sp/>=<sp/>(EAXSet)alGetProcAddress(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAXSet&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXGet<sp/>=<sp/>(EAXGet)alGetProcAddress(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAXGet&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>found<sp/>EAX<sp/>4.0<sp/>extension\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>EAX<sp/>4.0<sp/>extension<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSoundSystemLocal::s_useEAXReverb.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXSet<sp/>=<sp/>(EAXSet)NULL;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXGet<sp/>=<sp/>(EAXGet)NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>obtain<sp/>EAX-RAM<sp/>extension<sp/>-<sp/>not<sp/>required<sp/>for<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alIsExtensionPresent(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAX-RAM&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>AL_TRUE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXSetBufferMode<sp/>=<sp/>(EAXSetBufferMode)alGetProcAddress(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAXSetBufferMode&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXGetBufferMode<sp/>=<sp/>(EAXGetBufferMode)alGetProcAddress(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAXGetBufferMode&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>found<sp/>EAX-RAM<sp/>extension,<sp/>%dkB\\%dkB\n&quot;</highlight><highlight class="normal">,<sp/>alGetInteger(<sp/>alGetEnumValue(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;AL_EAX_RAM_FREE&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>/<sp/>1024,<sp/>alGetInteger(<sp/>alGetEnumValue(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;AL_EAX_RAM_SIZE&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>/<sp/>1024<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXSetBufferMode<sp/>=<sp/>(EAXSetBufferMode)NULL;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXGetBufferMode<sp/>=<sp/>(EAXGetBufferMode)NULL;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>no<sp/>EAX-RAM<sp/>extension\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idSoundSystemLocal::s_useOpenAL.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>disabling<sp/>(<sp/>no<sp/>EAX<sp/>).<sp/>Using<sp/>legacy<sp/>mixer.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcDestroyContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalContext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcCloseDevice(<sp/>openalDevice<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalDevice<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALuint<sp/>handle;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSourceCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>openalSourceCount<sp/>&lt;<sp/>256<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alGetError();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alGenSources(<sp/>1,<sp/>&amp;handle<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alGetError()<sp/>!=<sp/>AL_NO_ERROR<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>in<sp/>source<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[openalSourceCount].handle<sp/>=<sp/>handle;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[openalSourceCount].startTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[openalSourceCount].chan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[openalSourceCount].inUse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[openalSourceCount].looping<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alSourcef(<sp/>handle,<sp/>AL_ROLLOFF_FACTOR,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>one<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSourceCount++;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>found<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>alcGetString(<sp/>openalDevice,<sp/>ALC_DEVICE_SPECIFIER<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenAL:<sp/>found<sp/>%d<sp/>hardware<sp/>voices\n&quot;</highlight><highlight class="normal">,<sp/>openalSourceCount<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>source<sp/>count<sp/>to<sp/>allow<sp/>for<sp/>at<sp/>least<sp/>eight<sp/>stereo<sp/>sounds<sp/>to<sp/>play</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSourceCount<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EAXAvailable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>useOpenAL<sp/>=<sp/>idSoundSystemLocal::s_useOpenAL.GetBool();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>useEAXReverb<sp/>=<sp/>idSoundSystemLocal::s_useEAXReverb.GetBool();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;listSounds&quot;</highlight><highlight class="normal">,<sp/>ListSounds_f,<sp/>CMD_FL_SOUND,<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>all<sp/>sounds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;listSoundDecoders&quot;</highlight><highlight class="normal">,<sp/>ListSoundDecoders_f,<sp/>CMD_FL_SOUND,<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>active<sp/>sound<sp/>decoders&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;reloadSounds&quot;</highlight><highlight class="normal">,<sp/>SoundReloadSounds_f,<sp/>CMD_FL_SOUND|CMD_FL_CHEAT,<sp/></highlight><highlight class="stringliteral">&quot;reloads<sp/>all<sp/>sounds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;testSound&quot;</highlight><highlight class="normal">,<sp/>TestSound_f,<sp/>CMD_FL_SOUND<sp/>|<sp/>CMD_FL_CHEAT,<sp/></highlight><highlight class="stringliteral">&quot;tests<sp/>a<sp/>sound&quot;</highlight><highlight class="normal">,<sp/>idCmdSystem::ArgCompletion_SoundName<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;s_restart&quot;</highlight><highlight class="normal">,<sp/>SoundSystemRestart_f,<sp/>CMD_FL_SOUND,<sp/></highlight><highlight class="stringliteral">&quot;restarts<sp/>the<sp/>sound<sp/>system&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sound<sp/>system<sp/>initialized.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="432"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="433"><highlight class="comment">idSoundSystemLocal::Shutdown</highlight></codeline>
<codeline lineno="434"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="435"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::Shutdown()<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>ShutdownHW();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EAX<sp/>or<sp/>not,<sp/>the<sp/>list<sp/>needs<sp/>to<sp/>be<sp/>cleared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>EFXDatabase.Clear();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>openal<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efxloaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>source<sp/>count<sp/>back<sp/>up<sp/>to<sp/>allow<sp/>for<sp/>freeing<sp/>of<sp/>all<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSourceCount<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ALsizei<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>openalSourceCount;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alSourceStop(<sp/>openalSources[i].handle<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alSourcei(<sp/>openalSources[i].handle,<sp/>AL_BUFFER,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alDeleteSources(<sp/>1,<sp/>&amp;openalSources[i].handle<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>entry<sp/>in<sp/>source<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].startTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].chan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].inUse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].looping<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>all<sp/>the<sp/>sounds<sp/>(hardware<sp/>buffers<sp/>as<sp/>well)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>soundCache;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>soundCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>openal<sp/>device<sp/>and<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcDestroyContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalContext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcCloseDevice(<sp/>openalDevice<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalDevice<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_FreeOpenAL();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>idSampleDecoder::Shutdown();</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="489"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="490"><highlight class="comment">idSoundSystemLocal::InitHW</highlight></codeline>
<codeline lineno="491"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="492"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idSoundSystemLocal::InitHW()<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s_noSound.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>snd_audio_hw;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>snd_audio_hw<sp/>=<sp/>idAudioHardware::Alloc();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>snd_audio_hw<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!snd_audio_hw-&gt;Initialize()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>snd_audio_hw;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>real<sp/>number<sp/>in<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_numberOfSpeakers.SetInteger(<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers()<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>isInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="527"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="528"><highlight class="comment">idSoundSystemLocal::ShutdownHW</highlight></codeline>
<codeline lineno="529"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="530"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idSoundSystemLocal::ShutdownHW()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>do<sp/>anything<sp/>at<sp/>AsyncUpdate()<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Sleep(<sp/>100<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sleep<sp/>long<sp/>enough<sp/>to<sp/>make<sp/>sure<sp/>any<sp/>async<sp/>sound<sp/>talking<sp/>to<sp/>hardware<sp/>has<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Shutting<sp/>down<sp/>sound<sp/>hardware\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>snd_audio_hw;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>snd_audio_hw<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>isInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>graph<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>graph<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="555"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="556"><highlight class="comment">idSoundSystemLocal::GetCurrent44kHzTime</highlight></codeline>
<codeline lineno="557"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::GetCurrent44kHzTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CurrentSoundTime;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>would<sp/>overflow<sp/>31bits<sp/>within<sp/>about<sp/>1h20<sp/>(<sp/>not<sp/>that<sp/>important<sp/>since<sp/>we<sp/>get<sp/>a<sp/>snd_audio_hw<sp/>right<sp/>away<sp/>pbly<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>(<sp/>(<sp/>Sys_Milliseconds()*441<sp/>)<sp/>/<sp/>10<sp/>)<sp/>*<sp/>4;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idMath::FtoiFast(<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Sys_Milliseconds()<sp/>*<sp/>176.4f<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="570"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="571"><highlight class="comment">idSoundSystemLocal::ClearBuffer</highlight></codeline>
<codeline lineno="572"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::ClearBuffer(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>hardware<sp/>actually<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*fBlock;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>ulong<sp/>fBlockLen;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!snd_audio_hw-&gt;Lock(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;fBlock,<sp/>&amp;fBlockLen<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memset(<sp/>fBlock,<sp/>0,<sp/>fBlockLen<sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw-&gt;Unlock(<sp/>fBlock,<sp/>fBlockLen<sp/>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="595"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="596"><highlight class="comment">idSoundSystemLocal::AsyncMix</highlight></codeline>
<codeline lineno="597"><highlight class="comment">Mac<sp/>OSX<sp/>version.<sp/>The<sp/>system<sp/>uses<sp/>it&apos;s<sp/>own<sp/>thread<sp/>and<sp/>an<sp/>IOProc<sp/>callback</highlight></codeline>
<codeline lineno="598"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="599"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::AsyncMix(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>soundTime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mixBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inTime,<sp/>numSpeakers;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>||<sp/>shutdown<sp/>||<sp/>!snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>inTime<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>numSpeakers<sp/>=<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>active<sp/>sound<sp/>world<sp/>mix<sp/>all<sp/>the<sp/>channels<sp/>in<sp/>unless<sp/>muted<sp/>or<sp/>avi<sp/>demo<sp/>recording</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!muted<sp/>&amp;&amp;<sp/>currentSoundWorld<sp/>&amp;&amp;<sp/>!currentSoundWorld-&gt;fpa[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSoundWorld-&gt;MixLoop(<sp/>soundTime,<sp/>numSpeakers,<sp/>mixBuffer<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentSoundTime<sp/>=<sp/>soundTime;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sys_Milliseconds()<sp/>-<sp/>inTime;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="621"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="622"><highlight class="comment">idSoundSystemLocal::AsyncUpdate</highlight></codeline>
<codeline lineno="623"><highlight class="comment">called<sp/>from<sp/>async<sp/>sound<sp/>thread<sp/>when<sp/>com_asyncSound<sp/>==<sp/>1<sp/>(<sp/>Windows<sp/>)</highlight></codeline>
<codeline lineno="624"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="625"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::AsyncUpdate(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>||<sp/>shutdown<sp/>||<sp/>!snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>ulong<sp/>dwCurrentWritePos;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>dword<sp/>dwCurrentBlock;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>using<sp/>openal,<sp/>get<sp/>actual<sp/>playback<sp/>position<sp/>from<sp/>sound<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>do<sp/>it<sp/>in<sp/>samples<sp/>(<sp/>overflows<sp/>in<sp/>27<sp/>hours<sp/>or<sp/>so<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dwCurrentWritePos<sp/>=<sp/>idMath::Ftol(<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Sys_Milliseconds()<sp/>*<sp/>44.1f<sp/>)<sp/>%<sp/>(<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/>ROOM_SLICES_IN_BUFFER<sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dwCurrentBlock<sp/>=<sp/>dwCurrentWritePos<sp/>/<sp/>MIXBUFFER_SAMPLES;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>here<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>current<sp/>byte<sp/>position<sp/>in<sp/>the<sp/>buffer<sp/>where<sp/>the<sp/>sound<sp/>hardware<sp/>is<sp/>currently<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!snd_audio_hw-&gt;GetCurrentPosition(<sp/>&amp;dwCurrentWritePos<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mixBufferSize<sp/>is<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dwCurrentBlock<sp/>=<sp/>dwCurrentWritePos<sp/>/<sp/>snd_audio_hw-&gt;GetMixBufferSize();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nextWriteBlock<sp/>==<sp/>0xffffffff<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextWriteBlock<sp/>=<sp/>dwCurrentBlock;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dwCurrentBlock<sp/>!=<sp/>nextWriteBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>the<sp/>buffer<sp/>so<sp/>we<sp/>can<sp/>actually<sp/>write<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*fBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>ulong<sp/>fBlockLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw-&gt;Lock(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;fBlock,<sp/>&amp;fBlockLen<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>soundStats.runs++;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>soundStats.activeSounds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSpeakers<sp/>=<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>nextWriteBlock++;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>nextWriteBlock<sp/>%=<sp/>ROOM_SLICES_IN_BUFFER;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newPosition<sp/>=<sp/>nextWriteBlock<sp/>*<sp/>MIXBUFFER_SAMPLES;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newPosition<sp/>&lt;<sp/>olddwCurrentWritePos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>wrapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nextWriteSample<sp/>is<sp/>in<sp/>multi-channel<sp/>samples<sp/>inside<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextWriteSamples<sp/>=<sp/>nextWriteBlock<sp/>*<sp/>MIXBUFFER_SAMPLES;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>olddwCurrentWritePos<sp/>=<sp/>newPosition;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>newSoundTime<sp/>is<sp/>in<sp/>multi-channel<sp/>samples<sp/>since<sp/>the<sp/>sound<sp/>system<sp/>was<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSoundTime<sp/>=<sp/>(<sp/>buffers<sp/>*<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/>ROOM_SLICES_IN_BUFFER<sp/>)<sp/>+<sp/>nextWriteSamples;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>impending<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>we<sp/>don&apos;t<sp/>handle<sp/>sound<sp/>wrap-around<sp/>correctly<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newSoundTime<sp/>&gt;<sp/>0x6fffffff<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(newSoundTime<sp/>-<sp/>CurrentSoundTime)<sp/>&gt;<sp/>(int)MIXBUFFER_SAMPLES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundStats.missedWindow++;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>audio<sp/>hardware<sp/>caching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcSuspendContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>buffer<sp/>for<sp/>all<sp/>the<sp/>mixing<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memset(<sp/>finalMixBuffer,<sp/>0,<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>numSpeakers<sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>active<sp/>sound<sp/>world<sp/>mix<sp/>all<sp/>the<sp/>channels<sp/>in<sp/>unless<sp/>muted<sp/>or<sp/>avi<sp/>demo<sp/>recording</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!muted<sp/>&amp;&amp;<sp/>currentSoundWorld<sp/>&amp;&amp;<sp/>!currentSoundWorld-&gt;fpa[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSoundWorld-&gt;MixLoop(<sp/>newSoundTime,<sp/>numSpeakers,<sp/>finalMixBuffer<sp/>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>audio<sp/>hardware<sp/>caching<sp/>(this<sp/>updates<sp/>ALL<sp/>settings<sp/>since<sp/>last<sp/>alcSuspendContext)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcProcessContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*dest<sp/>=<sp/>fBlock<sp/>+<sp/>nextWriteSamples<sp/>*<sp/>numSpeakers;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;MixedSoundToSamples(<sp/>dest,<sp/>finalMixBuffer,<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/>numSpeakers<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>swapping<sp/>the<sp/>left<sp/>/<sp/>right<sp/>speaker<sp/>channels<sp/>for<sp/>people<sp/>with<sp/>miswired<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numSpeakers<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>s_reverse.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MIXBUFFER_SAMPLES;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>dest[j*2];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[j*2]<sp/>=<sp/>dest[j*2+1];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[j*2+1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw-&gt;Unlock(<sp/>fBlock,<sp/>fBlockLen<sp/>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentSoundTime<sp/>=<sp/>newSoundTime;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>soundStats.timeinprocess<sp/>=<sp/>Sys_Milliseconds()<sp/>-<sp/>inTime;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>soundStats.timeinprocess;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="742"><highlight class="comment">idSoundSystemLocal::AsyncUpdateWrite</highlight></codeline>
<codeline lineno="743"><highlight class="comment">sound<sp/>output<sp/>using<sp/>a<sp/>write<sp/>API.<sp/>all<sp/>the<sp/>scheduling<sp/>based<sp/>on<sp/>time</highlight></codeline>
<codeline lineno="744"><highlight class="comment">we<sp/>mix<sp/>MIXBUFFER_SAMPLES<sp/>at<sp/>a<sp/>time,<sp/>but<sp/>we<sp/>feed<sp/>the<sp/>audio<sp/>device<sp/>with<sp/>smaller<sp/>chunks<sp/>(and<sp/>more<sp/>often)</highlight></codeline>
<codeline lineno="745"><highlight class="comment">called<sp/>by<sp/>the<sp/>sound<sp/>thread<sp/>when<sp/>com_asyncSound<sp/>is<sp/>3<sp/>(<sp/>Linux<sp/>)</highlight></codeline>
<codeline lineno="746"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="747"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::AsyncUpdateWrite(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>||<sp/>shutdown<sp/>||<sp/>!snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw-&gt;Flush();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dwCurrentBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(<sp/>inTime<sp/>*<sp/>44.1f<sp/>/<sp/>MIXBUFFER_SAMPLES<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nextWriteBlock<sp/>==<sp/>0xffffffff<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextWriteBlock<sp/>=<sp/>dwCurrentBlock;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dwCurrentBlock<sp/>&lt;<sp/>nextWriteBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nextWriteBlock<sp/>!=<sp/>dwCurrentBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="stringliteral">&quot;missed<sp/>%d<sp/>sound<sp/>updates\n&quot;</highlight><highlight class="normal">,<sp/>dwCurrentBlock<sp/>-<sp/>nextWriteBlock<sp/>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleTime<sp/>=<sp/>dwCurrentBlock<sp/>*<sp/>MIXBUFFER_SAMPLES;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSpeakers<sp/>=<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers();</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>audio<sp/>hardware<sp/>caching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcSuspendContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>buffer<sp/>for<sp/>all<sp/>the<sp/>mixing<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memset(<sp/>finalMixBuffer,<sp/>0,<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>numSpeakers<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>active<sp/>sound<sp/>world<sp/>mix<sp/>all<sp/>the<sp/>channels<sp/>in<sp/>unless<sp/>muted<sp/>or<sp/>avi<sp/>demo<sp/>recording</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!muted<sp/>&amp;&amp;<sp/>currentSoundWorld<sp/>&amp;&amp;<sp/>!currentSoundWorld-&gt;fpa[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSoundWorld-&gt;MixLoop(<sp/>sampleTime,<sp/>numSpeakers,<sp/>finalMixBuffer<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>useOpenAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>audio<sp/>hardware<sp/>caching<sp/>(this<sp/>updates<sp/>ALL<sp/>settings<sp/>since<sp/>last<sp/>alcSuspendContext)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcProcessContext(<sp/>openalContext<sp/>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*dest<sp/>=<sp/>snd_audio_hw-&gt;GetMixBuffer();</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;MixedSoundToSamples(<sp/>dest,<sp/>finalMixBuffer,<sp/>MIXBUFFER_SAMPLES<sp/>*<sp/>numSpeakers<sp/>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>swapping<sp/>the<sp/>left<sp/>/<sp/>right<sp/>speaker<sp/>channels<sp/>for<sp/>people<sp/>with<sp/>miswired<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numSpeakers<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>s_reverse.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MIXBUFFER_SAMPLES;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>dest[j*2];</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[j*2]<sp/>=<sp/>dest[j*2+1];</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[j*2+1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snd_audio_hw-&gt;Write(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>move<sp/>to<sp/>the<sp/>next<sp/>block<sp/>if<sp/>the<sp/>write<sp/>was<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>nextWriteBlock<sp/>=<sp/>dwCurrentBlock<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentSoundTime<sp/>=<sp/>sampleTime;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sys_Milliseconds()<sp/>-<sp/>inTime;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="816"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="817"><highlight class="comment">idSoundSystemLocal::dB2Scale</highlight></codeline>
<codeline lineno="818"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="819"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idSoundSystemLocal::dB2Scale(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>val<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>most<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>val<sp/>&lt;=<sp/>-60.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>val<sp/>&gt;=<sp/>60.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>powf(<sp/>2.0f,<sp/>val<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>)<sp/>);<sp/></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ival<sp/>=<sp/>(int)(<sp/>(<sp/>val<sp/>+<sp/>60.0f<sp/>)<sp/>*<sp/>10.0f<sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>volumesDB[ival];</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="833"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="834"><highlight class="comment">idSoundSystemLocal::ImageForTime</highlight></codeline>
<codeline lineno="835"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="836"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><ref refid="structcin_data__t" kindref="compound">cinData_t</ref><sp/>idSoundSystemLocal::ImageForTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>milliseconds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waveform<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcin_data__t" kindref="compound">cinData_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>||<sp/>!snd_audio_hw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>&amp;ret,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>ret<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_EnterCriticalSection();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!graph<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>(dword<sp/>*)Mem_Alloc(<sp/>256*128<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>graph,<sp/>0,<sp/>256*128<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*accum<sp/>=<sp/>finalMixBuffer;<sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunately,<sp/>these<sp/>are<sp/>already<sp/>clamped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSpeakers<sp/>=<sp/>snd_audio_hw-&gt;GetNumberOfSpeakers();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!waveform<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSpeakers;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MIXBUFFER_SAMPLES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>idMath::Fabs(accum[i*numSpeakers+j]);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>result<sp/>&gt;<sp/>meter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meter<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meter<sp/>/=<sp/>256;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32768<sp/>becomes<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&gt;<sp/>128<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meter<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numSpeakers<sp/>==<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>j<sp/>*<sp/>40;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsize<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>j<sp/>*<sp/>128;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsize<sp/>=<sp/>63;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,y;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dword<sp/>color<sp/>=<sp/>0xff00ff00;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>128;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>xsize;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[(127-y)*256<sp/>+<sp/>offset<sp/>+<sp/>x<sp/>]<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>==<sp/>80<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>0xff00ffff;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>==<sp/>112<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>0xff0000ff;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>&gt;<sp/>meter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&gt;<sp/>meterTops[j]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[j]<sp/>=<sp/>meter;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTopsTime[j]<sp/>=<sp/>time<sp/>+<sp/>s_meterTopTime.GetInteger();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>meterTopsTime[j]<sp/>&amp;&amp;<sp/>meterTops[j]<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[j]--;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(meterTops[j])<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[j]--;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSpeakers;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meter<sp/>=<sp/>meterTops[j];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numSpeakers<sp/>==<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>j*40;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsize<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>j*128;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsize<sp/>=<sp/>63;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,y;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dword<sp/>color;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&lt;=<sp/>80<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>0xff007f00;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&lt;=<sp/>112<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>0xff007f7f;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>0xff00007f;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>=<sp/>meter;<sp/>y<sp/>&lt;<sp/>128<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>meter<sp/>+<sp/>4;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>xsize;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[(127-y)*256<sp/>+<sp/>offset<sp/>+<sp/>x<sp/>]<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dword<sp/>colors[]<sp/>=<sp/>{<sp/>0xff007f00,<sp/>0xff007f7f,<sp/>0xff00007f,<sp/>0xff00ff00,<sp/>0xff00ffff,<sp/>0xff0000ff<sp/>};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSpeakers;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fmeter;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>MIXBUFFER_SAMPLES<sp/>/<sp/>256;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MIXBUFFER_SAMPLES;<sp/>i<sp/>+=<sp/>step<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmeter<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>step;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>accum[(i+x)*numSpeakers+j];</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>/<sp/>32768.0f;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmeter<sp/>+=<sp/>result;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmeter<sp/>/=<sp/>4.0f;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fmeter<sp/>&lt;<sp/>-1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmeter<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fmeter<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmeter<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meter<sp/>=<sp/>(fmeter<sp/>*<sp/>63.0f);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[<sp/>(meter<sp/>+<sp/>64)<sp/>*<sp/>256<sp/>+<sp/>xx<sp/>]<sp/>=<sp/>colors[j];</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meter<sp/>=<sp/>-meter;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meter<sp/>&gt;<sp/>meterTops[xx]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[xx]<sp/>=<sp/>meter;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTopsTime[xx]<sp/>=<sp/>time<sp/>+<sp/>100;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time&gt;meterTopsTime[xx]<sp/>&amp;&amp;<sp/>meterTops[xx]<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[xx]--;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meterTops[xx]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meterTops[xx]--;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx++;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meter<sp/>=<sp/>meterTops[i];</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>-meter;<sp/>y<sp/>&lt;<sp/>meter;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[<sp/>(y+64)*256<sp/>+<sp/>i<sp/>]<sp/>=<sp/>colors[j];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.imageHeight<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.imageWidth<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.image<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)graph;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_LeaveCriticalSection();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="991"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="992"><highlight class="comment">idSoundSystemLocal::GetSoundDecoderInfo</highlight></codeline>
<codeline lineno="993"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="994"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::GetSoundDecoderInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structsound_decoder_info__t" kindref="compound">soundDecoderInfo_t</ref><sp/>&amp;decoderInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>firstEmitter,<sp/>firstChannel;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_sound_world_local" kindref="compound">idSoundWorldLocal</ref><sp/>*sw<sp/>=<sp/>soundSystemLocal.currentSoundWorld;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstEmitter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstChannel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstEmitter<sp/>=<sp/>index<sp/>/<sp/>SOUND_MAX_CHANNELS;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstChannel<sp/>=<sp/>index<sp/>-<sp/>firstEmitter<sp/>*<sp/>SOUND_MAX_CHANNELS<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>firstEmitter;<sp/>i<sp/>&lt;<sp/>sw-&gt;emitters.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_emitter_local" kindref="compound">idSoundEmitterLocal</ref><sp/>*sound<sp/>=<sp/>sw-&gt;emitters[i];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>through<sp/>all<sp/>the<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>firstChannel;<sp/>j<sp/>&lt;<sp/>SOUND_MAX_CHANNELS;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_channel" kindref="compound">idSoundChannel</ref><sp/><sp/>*chan<sp/>=<sp/>&amp;sound-&gt;channels[j];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chan-&gt;decoder<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_sound_sample" kindref="compound">idSoundSample</ref><sp/>*sample<sp/>=<sp/>chan-&gt;decoder-&gt;GetSample();</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sample<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.name<sp/>=<sp/>sample-&gt;name;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.format<sp/>=<sp/>(<sp/>sample-&gt;objectInfo.wFormatTag<sp/>==<sp/>WAVE_FORMAT_TAG_OGG<sp/>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OGG&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;WAV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.numChannels<sp/>=<sp/>sample-&gt;objectInfo.nChannels;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.numSamplesPerSecond<sp/>=<sp/>sample-&gt;objectInfo.nSamplesPerSec;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.num44kHzSamples<sp/>=<sp/>sample-&gt;LengthIn44kHzSamples();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.numBytes<sp/>=<sp/>sample-&gt;objectMemSize;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.looping<sp/>=<sp/>(<sp/>chan-&gt;parms.soundShaderFlags<sp/>&amp;<sp/>SSF_LOOPING<sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.lastVolume<sp/>=<sp/>chan-&gt;lastVolume;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.start44kHzTime<sp/>=<sp/>chan-&gt;trigger44kHzTime;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoderInfo.current44kHzTime<sp/>=<sp/>soundSystemLocal.GetCurrent44kHzTime();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>*<sp/>SOUND_MAX_CHANNELS<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstChannel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">idSoundSystemLocal::AllocSoundWorld</highlight></codeline>
<codeline lineno="1050"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1051"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*idSoundSystemLocal::AllocSoundWorld(<sp/><ref refid="classid_render_world" kindref="compound">idRenderWorld</ref><sp/>*rw<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_sound_world_local" kindref="compound">idSoundWorldLocal</ref><sp/><sp/><sp/>*local<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_sound_world_local" kindref="compound">idSoundWorldLocal</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>local-&gt;Init(<sp/>rw<sp/>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>local;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1061"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1062"><highlight class="comment">idSoundSystemLocal::SetMute</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::SetMute(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>muteOn<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>muted<sp/>=<sp/>muteOn;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1070"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1071"><highlight class="comment">idSoundSystemLocal::SamplesToMilliseconds</highlight></codeline>
<codeline lineno="1072"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1073"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::SamplesToMilliseconds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>samples<sp/>/<sp/>(PRIMARYFREQ/1000)<sp/>);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">idSoundSystemLocal::SamplesToMilliseconds</highlight></codeline>
<codeline lineno="1081"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1082"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::MillisecondsToSamples(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ms<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>ms<sp/>*<sp/>(PRIMARYFREQ/1000)<sp/>);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1088"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">idSoundSystemLocal::SetPlayingSoundWorld</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"></highlight></codeline>
<codeline lineno="1091"><highlight class="comment">specifying<sp/>NULL<sp/>will<sp/>cause<sp/>silence<sp/>to<sp/>be<sp/>played</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::SetPlayingSoundWorld(<sp/><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*soundWorld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>currentSoundWorld<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_sound_world_local" kindref="compound">idSoundWorldLocal</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(soundWorld);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">idSoundSystemLocal::GetPlayingSoundWorld</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*idSoundSystemLocal::GetPlayingSoundWorld(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentSoundWorld;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">idSoundSystemLocal::BeginLevelLoad</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::BeginLevelLoad()<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>soundCache-&gt;BeginLevelLoad();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>efxloaded<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFXDatabase.UnloadFile();</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efxloaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">idSoundSystemLocal::EndLevelLoad</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1129"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::EndLevelLoad(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapstring<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isInitialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>soundCache-&gt;EndLevelLoad();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>efxname(<sp/></highlight><highlight class="stringliteral">&quot;efxs/&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>mapname(<sp/>mapstring<sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>mapname.SetFileExtension(<sp/></highlight><highlight class="stringliteral">&quot;.efx&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>mapname.StripPath();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>efxname<sp/>+=<sp/>mapname;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>efxloaded<sp/>=<sp/>EFXDatabase.LoadFile(<sp/>efxname<sp/>);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>efxloaded<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;sound:<sp/>found<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>efxname.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;sound:<sp/>missing<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>efxname.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1153"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1154"><highlight class="comment">idSoundSystemLocal::AllocOpenALSource</highlight></codeline>
<codeline lineno="1155"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal">ALuint<sp/>idSoundSystemLocal::AllocOpenALSource(<sp/><ref refid="classid_sound_channel" kindref="compound">idSoundChannel</ref><sp/>*chan,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>looping,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stereo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeOldestZeroVolSingleShot<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeOldestZeroVolLooping<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeOldestSingle<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iOldestZeroVolSingleShot<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iOldestZeroVolLooping<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iOldestSingle<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iUnused<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>ALsizei<sp/>i;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>current<sp/>msec<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>all<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>openalSourceCount;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>any<sp/>unused<sp/>source<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>find<sp/>oldest<sp/>single<sp/>shot<sp/>quiet<sp/>source,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>find<sp/>oldest<sp/>looping<sp/>quiet<sp/>source<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lastly<sp/>find<sp/>oldest<sp/>single<sp/>shot<sp/>non<sp/>quiet<sp/>source..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!openalSources[i].inUse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iUnused<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!openalSources[i].looping<sp/>&amp;&amp;<sp/>openalSources[i].chan-&gt;lastVolume<sp/>&lt;<sp/>SND_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].startTime<sp/>&lt;<sp/>timeOldestZeroVolSingleShot<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeOldestZeroVolSingleShot<sp/>=<sp/>openalSources[i].startTime;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iOldestZeroVolSingleShot<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].looping<sp/>&amp;&amp;<sp/>openalSources[i].chan-&gt;lastVolume<sp/>&lt;<sp/>SND_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].startTime<sp/>&lt;<sp/>timeOldestZeroVolLooping<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeOldestZeroVolLooping<sp/>=<sp/>openalSources[i].startTime;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iOldestZeroVolLooping<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!openalSources[i].looping<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].startTime<sp/>&lt;<sp/>timeOldestSingle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeOldestSingle<sp/>=<sp/>openalSources[i].startTime;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iOldestSingle<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iUnused<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>iUnused;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iOldestZeroVolSingleShot<sp/>!=<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>iOldestZeroVolSingleShot;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iOldestZeroVolLooping<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>iOldestZeroVolLooping;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iOldestSingle<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>iOldestSingle;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>the<sp/>channel<sp/>that<sp/>is<sp/>being<sp/>ripped<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[index].chan<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>the<sp/>channel<sp/>only<sp/>when<sp/>not<sp/>looping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!openalSources[index].looping<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].chan-&gt;Stop();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].chan-&gt;triggered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>hardware<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].chan-&gt;ALStop();</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].startTime<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].chan<sp/>=<sp/>chan;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].inUse<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].looping<sp/>=<sp/>looping;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[index].stereo<sp/>=<sp/>stereo;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>openalSources[index].handle;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">idSoundSystemLocal::FreeOpenALSource</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1239"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::FreeOpenALSource(<sp/>ALuint<sp/>handle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>ALsizei<sp/>i;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>openalSourceCount;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].handle<sp/>==<sp/>handle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].chan<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].chan-&gt;openalSource<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ID_OPENAL</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>source<sp/>EAX<sp/>ROOM<sp/>level<sp/>when<sp/>freeing<sp/>stereo<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>openalSources[i].stereo<sp/>&amp;&amp;<sp/>alEAXSet<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Room<sp/>=<sp/>EAXSOURCE_DEFAULTROOM;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alEAXSet(<sp/>&amp;EAXPROPERTYID_EAX_Source,<sp/>EAXSOURCE_ROOM,<sp/>openalSources[i].handle,<sp/>&amp;Room,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Room));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].startTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].chan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].inUse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].looping<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openalSources[i].stereo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1265"><highlight class="comment">============================================================</highlight></codeline>
<codeline lineno="1266"><highlight class="comment">SoundFX<sp/>and<sp/>misc<sp/>effects</highlight></codeline>
<codeline lineno="1267"><highlight class="comment">============================================================</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1271"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">idSoundSystemLocal::ProcessSample</highlight></codeline>
<codeline lineno="1273"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1274"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundFX_Lowpass::ProcessSample(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>b1,<sp/>b2;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>resonance<sp/>=<sp/>idSoundSystemLocal::s_enviroSuitCutoffQ.GetFloat();</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cutoffFrequency<sp/>=<sp/>idSoundSystemLocal::s_enviroSuitCutoffFreq.GetFloat();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize();</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0<sp/>/<sp/>idMath::Tan16(<sp/>idMath::PI<sp/>*<sp/>cutoffFrequency<sp/>/<sp/>44100<sp/>);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>coefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>1.0<sp/>/<sp/>(<sp/>1.0<sp/>+<sp/>resonance<sp/>*<sp/>c<sp/>+<sp/>c<sp/>*<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>2*<sp/>a1;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>a3<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>2.0<sp/>*<sp/>(<sp/>1.0<sp/>-<sp/>c<sp/>*<sp/>c)<sp/>*<sp/>a1;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>(<sp/>1.0<sp/>-<sp/>resonance<sp/>*<sp/>c<sp/>+<sp/>c<sp/>*<sp/>c<sp/>)<sp/>*<sp/>a1;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>output<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>a1<sp/>*<sp/>in[0]<sp/>+<sp/>a2<sp/>*<sp/>in[-1]<sp/>+<sp/>a3<sp/>*<sp/>in[-2]<sp/>-<sp/>b1<sp/>*<sp/>out[-1]<sp/>-<sp/>b2<sp/>*<sp/>out[-2];</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundFX_LowpassFast::ProcessSample(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>output<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>a1<sp/>*<sp/>in[0]<sp/>+<sp/>a2<sp/>*<sp/>in[-1]<sp/>+<sp/>a3<sp/>*<sp/>in[-2]<sp/>-<sp/>b1<sp/>*<sp/>out[-1]<sp/>-<sp/>b2<sp/>*<sp/>out[-2];</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundFX_LowpassFast::SetParms(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>p2;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precompute<sp/>the<sp/>coefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0<sp/>/<sp/>idMath::Tan(<sp/>idMath::PI<sp/>*<sp/>freq<sp/>/<sp/>44100<sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>coefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>1.0<sp/>/<sp/>(<sp/>1.0<sp/>+<sp/>res<sp/>*<sp/>c<sp/>+<sp/>c<sp/>*<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>2*<sp/>a1;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>a3<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>2.0<sp/>*<sp/>(<sp/>1.0<sp/>-<sp/>c<sp/>*<sp/>c)<sp/>*<sp/>a1;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>(<sp/>1.0<sp/>-<sp/>res<sp/>*<sp/>c<sp/>+<sp/>c<sp/>*<sp/>c<sp/>)<sp/>*<sp/>a1;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundFX_Comb::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>initialized<sp/>)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>maxlen<sp/>=<sp/>50000;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[maxlen];</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoundFX_Comb::ProcessSample(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain<sp/>=<sp/>idSoundSystemLocal::s_reverbFeedback.GetFloat();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>idSoundSystemLocal::s_reverbTime.GetFloat()<sp/>+<sp/>param;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize();</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sum<sp/>up<sp/>and<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>buffer[currentTime];</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[currentTime]<sp/>=<sp/>buffer[currentTime]<sp/>*<sp/>gain<sp/>+<sp/>in[0];</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>current<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTime++;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentTime<sp/>&gt;=<sp/>len<sp/>)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTime<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1346"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1347"><highlight class="comment">idSoundSystemLocal::DoEnviroSuit</highlight></codeline>
<codeline lineno="1348"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1349"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::DoEnviroSuit(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>samples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSamples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSpeakers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out[10000],<sp/>*out_p<sp/>=<sp/>out<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>in[10000],<sp/>*in_p<sp/>=<sp/>in<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>!idSoundSystemLocal::useOpenAL<sp/>);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fxList.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sound_f_x" kindref="compound">SoundFX</ref>*<sp/>fx;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lowpass<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sound_f_x___lowpass" kindref="compound">SoundFX_Lowpass</ref>();</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetChannel(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fxList.Append(<sp/>fx<sp/>);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sound_f_x___comb" kindref="compound">SoundFX_Comb</ref>();</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetChannel(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetParameter(<sp/>i<sp/>*<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fxList.Append(<sp/>fx<sp/>);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sound_f_x___comb" kindref="compound">SoundFX_Comb</ref>();</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetChannel(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetParameter(<sp/>i<sp/>*<sp/>100<sp/>+<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fxList.Append(<sp/>fx<sp/>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numSpeakers;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>previous<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>in,<sp/>0,<sp/>10000<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>out,<sp/>0,<sp/>10000<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fx<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>fxList.Num();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sound_f_x" kindref="compound">SoundFX</ref>*<sp/>fx<sp/>=<sp/>fxList[k];</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>if<sp/>we&apos;re<sp/>not<sp/>the<sp/>right<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fx-&gt;GetChannel()<sp/>!=<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>samples<sp/>and<sp/>continuity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;GetContinuitySamples(<sp/>in_p[-1],<sp/>in_p[-2],<sp/>out_p[-1],<sp/>out_p[-2]<sp/>);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSamples;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_p[j]<sp/>=<sp/>samples[j<sp/>*<sp/>numSpeakers<sp/>+<sp/>i]<sp/>*<sp/>s_enviroSuitVolumeScale.GetFloat();</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>fx<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSamples;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;ProcessSample(<sp/>in_p<sp/>+<sp/>j,<sp/>out_p<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>samples<sp/>and<sp/>continuity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx-&gt;SetContinuitySamples(<sp/>in_p[numSamples-2],<sp/>in_p[numSamples-3],<sp/>out_p[numSamples-2],<sp/>out_p[numSamples-3]<sp/>);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numSamples;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples[j<sp/>*<sp/>numSpeakers<sp/>+<sp/>i]<sp/>=<sp/>out_p[j];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1416"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1417"><highlight class="comment">idSoundSystemLocal::PrintMemInfo</highlight></codeline>
<codeline lineno="1418"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1419"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSoundSystemLocal::PrintMemInfo(<sp/><ref refid="struct_mem_info__t" kindref="compound">MemInfo_t</ref><sp/>*mi<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>soundCache-&gt;PrintMemInfo(<sp/>mi<sp/>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1425"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="1426"><highlight class="comment">idSoundSystemLocal::EAXAvailable</highlight></codeline>
<codeline lineno="1427"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="1428"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idSoundSystemLocal::IsEAXAvailable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ID_OPENAL</highlight></codeline>
<codeline lineno="1431"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1433"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ALCdevice<sp/><sp/><sp/>*device;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>ALCcontext<sp/><sp/>*context;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>EAXAvailable<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EAXAvailable;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_LoadOpenAL()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EAXAvailable<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>dynamically<sp/>loading<sp/>the<sp/>OpenAL<sp/>subsystem,<sp/>we<sp/>need<sp/>to<sp/>get<sp/>a<sp/>context<sp/>before<sp/>alIsExtensionPresent<sp/>would<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>device<sp/>=<sp/>alcOpenDevice(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>alcCreateContext(<sp/>device,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>context<sp/>);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alIsExtensionPresent(<sp/>ID_ALCHAR<sp/></highlight><highlight class="stringliteral">&quot;EAX4.0&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcDestroyContext(<sp/>context<sp/>);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alcCloseDevice(<sp/>device<sp/>);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EAXAvailable<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>alcMakeContextCurrent(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>alcDestroyContext(<sp/>context<sp/>);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>alcCloseDevice(<sp/>device<sp/>);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>EAXAvailable<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sound/snd_system.cpp"/>
  </compounddef>
</doxygen>
