<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="stubs_8cpp" kind="file">
    <compoundname>stubs.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="snd__local_8h" local="yes">../sound/snd_local.h</includes>
      <sectiondef kind="func">
      <memberdef kind="function" id="stubs_8cpp_1a2f02469458a9587f2d71d79831da9723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALenum AL_APIENTRY</type>
        <definition>AL_API ALenum AL_APIENTRY alGetError</definition>
        <argsstring>()</argsstring>
        <name>alGetError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error support. Obtain the most recent error generated in the AL state machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="31" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a1c5950827572ff4f13007b576b002f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALboolean AL_APIENTRY</type>
        <definition>AL_API ALboolean AL_APIENTRY alIsSource</definition>
        <argsstring>(ALuint sid)</argsstring>
        <name>alIsSource</name>
        <param>
          <type>ALuint</type>
          <declname>id</declname>
          <defname>sid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a handle is a valid Source. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1afd2b03b38eb7ae35d0518ecc3f004d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alGenBuffers</definition>
        <argsstring>(ALsizei n, ALuint *buffers)</argsstring>
        <name>alGenBuffers</name>
        <param>
          <type>ALsizei</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ALuint *</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BUFFER Buffer objects are storage space for sample data. Buffers are referred to by Sources. There can be more than one Source using the same Buffer data. If Buffers have to be duplicated on a per-Source basis, the driver has to take care of allocation, copying, and deallocation as well as propagating buffer data changes.Buffer object generation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1aa5ac516caadd0d377bd52c0db10bedcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourceStop</definition>
        <argsstring>(ALuint sid)</argsstring>
        <name>alSourceStop</name>
        <param>
          <type>ALuint</type>
          <declname>source</declname>
          <defname>sid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop a source, temporarily remove it from the mixer list, and reset its internal state to pre-Play. To remove a Source completely, it has to be deleted following Stop, or before Play. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a06d622cf8fd04b0ccf37efadd8642176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alGetSourcei</definition>
        <argsstring>(ALuint sid, ALenum pname, ALint *value)</argsstring>
        <name>alGetSourcei</name>
        <param>
          <type>ALuint</type>
          <declname>source</declname>
          <defname>sid</defname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
          <defname>pname</defname>
        </param>
        <param>
          <type>ALint *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an integer parameter for a Source object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a4d299060fe4043921bd26c5501e6ac66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALint AL_APIENTRY</type>
        <definition>AL_API ALint AL_APIENTRY alGetInteger</definition>
        <argsstring>(ALenum param)</argsstring>
        <name>alGetInteger</name>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1abe08a7ab0d89b087e92737d12e8f5907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API void ALC_APIENTRY</type>
        <definition>ALC_API void ALC_APIENTRY alcSuspendContext</definition>
        <argsstring>(ALCcontext *alcHandle)</argsstring>
        <name>alcSuspendContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>alcHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ac213e6cc80a83c7f51b56cf7f7f571ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCdevice *ALC_APIENTRY</type>
        <definition>ALC_API ALCdevice* ALC_APIENTRY alcOpenDevice</definition>
        <argsstring>(const ALchar *tokstr)</argsstring>
        <name>alcOpenDevice</name>
        <param>
          <type>const ALchar *</type>
          <declname>tokstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ab376e80e2404ae2611798d7f007871ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alDeleteBuffers</definition>
        <argsstring>(ALsizei n, const ALuint *buffers)</argsstring>
        <name>alDeleteBuffers</name>
        <param>
          <type>ALsizei</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALuint *</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a64318642a47c27a6f561e10f4ab8ebf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALboolean AL_APIENTRY</type>
        <definition>AL_API ALboolean AL_APIENTRY alIsExtensionPresent</definition>
        <argsstring>(const ALchar *fname)</argsstring>
        <name>alIsExtensionPresent</name>
        <param>
          <type>const ALchar *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ae102aac7ce991c88c1f36ffa7c06dd25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alBufferData</definition>
        <argsstring>(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq)</argsstring>
        <name>alBufferData</name>
        <param>
          <type>ALuint</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const ALvoid *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1aa2f8082403d13c94512162550fe4f073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCboolean ALC_APIENTRY</type>
        <definition>ALC_API ALCboolean ALC_APIENTRY alcMakeContextCurrent</definition>
        <argsstring>(ALCcontext *alcHandle)</argsstring>
        <name>alcMakeContextCurrent</name>
        <param>
          <type>ALCcontext *</type>
          <declname>alcHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a1c99fc5a99e0bc5bcc6f5629ef3a8ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCvoid ALC_APIENTRY</type>
        <definition>ALC_API ALCvoid ALC_APIENTRY alcProcessContext</definition>
        <argsstring>(ALCcontext *alcHandle)</argsstring>
        <name>alcProcessContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>alcHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a93f3076ce7fb137d7baa83a2d96d42b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCvoid ALC_APIENTRY</type>
        <definition>ALC_API ALCvoid ALC_APIENTRY alcDestroyContext</definition>
        <argsstring>(ALCcontext *alcHandle)</argsstring>
        <name>alcDestroyContext</name>
        <param>
          <type>ALCcontext *</type>
          <declname>alcHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="73" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a8276f6159c3d59f608fc351c4ff3d287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API const ALCchar *ALC_APIENTRY</type>
        <definition>ALC_API const ALCchar* ALC_APIENTRY alcGetString</definition>
        <argsstring>(ALCdevice *deviceHandle, ALCenum token)</argsstring>
        <name>alcGetString</name>
        <param>
          <type>ALCdevice *</type>
          <declname>deviceHandle</declname>
        </param>
        <param>
          <type>ALCenum</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a6ac19f81c96afa1adc3f9ada86a93d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alBufferData</definition>
        <argsstring>(ALuint buffer, ALenum format, ALvoid *data, ALsizei size, ALsizei freq)</argsstring>
        <name>alBufferData</name>
        <param>
          <type>ALuint</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>format</declname>
        </param>
        <param>
          <type>ALvoid *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify the data to be filled into a buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a0e73ad72751a33bdd05832fe7fffeae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alDeleteBuffers</definition>
        <argsstring>(ALsizei n, ALuint *buffers)</argsstring>
        <name>alDeleteBuffers</name>
        <param>
          <type>ALsizei</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ALuint *</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a56c9cfc41508433f3cb7ade4493e2cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALboolean AL_APIENTRY</type>
        <definition>AL_API ALboolean AL_APIENTRY alIsExtensionPresent</definition>
        <argsstring>(ALubyte *fname)</argsstring>
        <name>alIsExtensionPresent</name>
        <param>
          <type>ALubyte *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extension support. Obtain the address of a function (usually an extension) with the name fname. All addresses are context-independent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1af2f5e685ee38a2c49e149797e8c2e86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alDeleteSources</definition>
        <argsstring>(ALsizei n, const ALuint *sources)</argsstring>
        <name>alDeleteSources</name>
        <param>
          <type>ALsizei</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ALuint *</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ac2d8746a9a24355746d07a940bae8d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALenum AL_APIENTRY</type>
        <definition>AL_API ALenum AL_APIENTRY alGetEnumValue</definition>
        <argsstring>(const ALchar *ename)</argsstring>
        <name>alGetEnumValue</name>
        <param>
          <type>const ALchar *</type>
          <declname>ename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1aeb549fab77780e59229f89ad97565036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void *AL_APIENTRY</type>
        <definition>AL_API void* AL_APIENTRY alGetProcAddress</definition>
        <argsstring>(const ALchar *fname)</argsstring>
        <name>alGetProcAddress</name>
        <param>
          <type>const ALchar *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="99" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a86e7b8392e3858dd0864c9aaaece6715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCcontext *ALC_APIENTRY</type>
        <definition>ALC_API ALCcontext* ALC_APIENTRY alcCreateContext</definition>
        <argsstring>(ALCdevice *dev, const ALCint *attrlist)</argsstring>
        <name>alcCreateContext</name>
        <param>
          <type>ALCdevice *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const ALCint *</type>
          <declname>attrlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="103" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ae5c2c143abdcd3e60029d3e1b9f2311c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCdevice *ALC_APIENTRY</type>
        <definition>ALC_API ALCdevice* ALC_APIENTRY alcOpenDevice</definition>
        <argsstring>(ALubyte *tokstr)</argsstring>
        <name>alcOpenDevice</name>
        <param>
          <type>ALubyte *</type>
          <declname>tokstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="108" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ab66f2dcc85abcb6a2780aa7501944f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alListenerfv</definition>
        <argsstring>(ALenum pname, const ALfloat *param)</argsstring>
        <name>alListenerfv</name>
        <param>
          <type>ALenum</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>const ALfloat *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="112" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1af6239bc4ba2faedeb54a5ffd5917b405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourceQueueBuffers</definition>
        <argsstring>(ALuint sid, ALsizei numEntries, const ALuint *bids)</argsstring>
        <name>alSourceQueueBuffers</name>
        <param>
          <type>ALuint</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>numEntries</declname>
        </param>
        <param>
          <type>const ALuint *</type>
          <declname>bids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="114" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a1038b6ae22848913c76e73a14a849338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourcei</definition>
        <argsstring>(ALuint sid, ALenum param, ALint value)</argsstring>
        <name>alSourcei</name>
        <param>
          <type>ALuint</type>
          <declname>source</declname>
          <defname>sid</defname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
        </param>
        <param>
          <type>ALint</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an integer parameter for a Source object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="116" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1abeb256c86e3fc95f381e0c7b702b6d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alListenerf</definition>
        <argsstring>(ALenum pname, ALfloat param)</argsstring>
        <name>alListenerf</name>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
          <defname>pname</defname>
        </param>
        <param>
          <type>ALfloat</type>
          <declname>value</declname>
          <defname>param</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Listener Gain: default 1.0f. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="118" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a6a6027df3b59b3bcac2eb21e2a22f2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALC_API ALCboolean ALC_APIENTRY</type>
        <definition>ALC_API ALCboolean ALC_APIENTRY alcCloseDevice</definition>
        <argsstring>(ALCdevice *dev)</argsstring>
        <name>alcCloseDevice</name>
        <param>
          <type>ALCdevice *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="120" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a1408ab794cf7e4d6735b5cfcc1e55f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API ALboolean AL_APIENTRY</type>
        <definition>AL_API ALboolean AL_APIENTRY alIsBuffer</definition>
        <argsstring>(ALuint buffer)</argsstring>
        <name>alIsBuffer</name>
        <param>
          <type>ALuint</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="122" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a2e7568cf754da398cafb4a14b88ceaac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSource3f</definition>
        <argsstring>(ALuint sid, ALenum param, ALfloat f1, ALfloat f2, ALfloat f3)</argsstring>
        <name>alSource3f</name>
        <param>
          <type>ALuint</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
        </param>
        <param>
          <type>ALfloat</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>ALfloat</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>ALfloat</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="126" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="126" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1af220f665740bf8a54797e210cf551dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alGenSources</definition>
        <argsstring>(ALsizei n, ALuint *sources)</argsstring>
        <name>alGenSources</name>
        <param>
          <type>ALsizei</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ALuint *</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SOURCE Source objects are by default localized. Sources take the PCM data provided in the specified Buffer, apply Source-specific modifications, and then submit them to be mixed according to spatial arrangement etc.Create Source objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="129" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1ac10978ba0e4a873c5355a30d04c8a3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourcef</definition>
        <argsstring>(ALuint sid, ALenum param, ALfloat value)</argsstring>
        <name>alSourcef</name>
        <param>
          <type>ALuint</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>ALenum</type>
          <declname>param</declname>
        </param>
        <param>
          <type>ALfloat</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="131" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1a69aef56ec1b141152e7068f51d900549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourceUnqueueBuffers</definition>
        <argsstring>(ALuint sid, ALsizei numEntries, ALuint *bids)</argsstring>
        <name>alSourceUnqueueBuffers</name>
        <param>
          <type>ALuint</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>ALsizei</type>
          <declname>numEntries</declname>
        </param>
        <param>
          <type>ALuint *</type>
          <declname>bids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="133" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="stubs_8cpp_1aca454ba909c65b84c78e81edc08ca0c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AL_API void AL_APIENTRY</type>
        <definition>AL_API void AL_APIENTRY alSourcePlay</definition>
        <argsstring>(ALuint sid)</argsstring>
        <name>alSourcePlay</name>
        <param>
          <type>ALuint</type>
          <declname>source</declname>
          <defname>sid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activate a source, start replay. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" line="135" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp" bodystart="135" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sound/snd_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">AL_API<sp/>ALenum<sp/>AL_APIENTRY<sp/>alGetError()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AL_NO_ERROR;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">AL_API<sp/>ALboolean<sp/>AL_APIENTRY<sp/>alIsSource(<sp/>ALuint<sp/>sid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AL_FALSE;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alGenBuffers(<sp/>ALsizei<sp/>n,<sp/>ALuint*<sp/>buffers<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourceStop(<sp/>ALuint<sp/>sid<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alGetSourcei(<sp/>ALuint<sp/>sid,<sp/><sp/>ALenum<sp/>pname,<sp/>ALint*<sp/>value<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">AL_API<sp/>ALint<sp/>AL_APIENTRY<sp/>alGetInteger(<sp/>ALenum<sp/>param<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">ALC_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ALC_APIENTRY<sp/>alcSuspendContext(<sp/>ALCcontext<sp/>*alcHandle<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">ALC_API<sp/>ALCdevice<sp/>*<sp/>ALC_APIENTRY<sp/>alcOpenDevice(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALchar<sp/>*tokstr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alDeleteBuffers(<sp/>ALsizei<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALuint*<sp/>buffers<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">AL_API<sp/>ALboolean<sp/>AL_APIENTRY<sp/>alIsExtensionPresent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALchar*<sp/>fname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AL_FALSE;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alBufferData(<sp/>ALuint<sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALenum<sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALvoid*<sp/><sp/><sp/><sp/>data,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALsizei<sp/><sp/>size,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALsizei<sp/><sp/>freq<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">ALC_API<sp/>ALCboolean<sp/>ALC_APIENTRY<sp/>alcMakeContextCurrent(<sp/>ALCcontext<sp/>*alcHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">ALC_API<sp/>ALCvoid<sp/>ALC_APIENTRY<sp/>alcProcessContext(<sp/>ALCcontext<sp/>*alcHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">ALC_API<sp/>ALCvoid<sp/>ALC_APIENTRY<sp/>alcDestroyContext(<sp/>ALCcontext<sp/>*alcHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">ALC_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALCchar<sp/>*<sp/>ALC_APIENTRY<sp/>alcGetString(<sp/>ALCdevice<sp/>*deviceHandle,<sp/>ALCenum<sp/>token<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alBufferData(<sp/>ALuint<sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALenum<sp/><sp/><sp/>format,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALvoid*<sp/><sp/><sp/><sp/>data,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALsizei<sp/><sp/>size,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALsizei<sp/><sp/>freq<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alDeleteBuffers(<sp/>ALsizei<sp/>n,<sp/>ALuint*<sp/>buffers<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">AL_API<sp/>ALboolean<sp/>AL_APIENTRY<sp/>alIsExtensionPresent(<sp/>ALubyte*<sp/>fname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AL_FALSE;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alDeleteSources(<sp/>ALsizei<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALuint*<sp/>sources<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">AL_API<sp/>ALenum<sp/>AL_APIENTRY<sp/>alGetEnumValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALchar*<sp/>ename<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>AL_APIENTRY<sp/>alGetProcAddress(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALchar*<sp/>fname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">ALC_API<sp/>ALCcontext<sp/>*<sp/>ALC_APIENTRY<sp/>alcCreateContext(<sp/>ALCdevice<sp/>*dev,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALCint*<sp/>attrlist<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">ALC_API<sp/>ALCdevice<sp/>*<sp/>ALC_APIENTRY<sp/>alcOpenDevice(<sp/>ALubyte<sp/>*tokstr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alListenerfv(<sp/>ALenum<sp/>pname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALfloat*<sp/>param<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourceQueueBuffers(<sp/>ALuint<sp/>sid,<sp/>ALsizei<sp/>numEntries,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ALuint<sp/>*bids<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourcei(<sp/>ALuint<sp/>sid,<sp/>ALenum<sp/>param,<sp/>ALint<sp/>value<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alListenerf(<sp/>ALenum<sp/>pname,<sp/>ALfloat<sp/>param<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">ALC_API<sp/>ALCboolean<sp/>ALC_APIENTRY<sp/>alcCloseDevice(<sp/>ALCdevice<sp/>*dev<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">AL_API<sp/>ALboolean<sp/>AL_APIENTRY<sp/>alIsBuffer(<sp/>ALuint<sp/>buffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AL_FALSE;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSource3f(<sp/>ALuint<sp/>sid,<sp/>ALenum<sp/>param,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALfloat<sp/>f1,<sp/>ALfloat<sp/>f2,<sp/>ALfloat<sp/>f3<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alGenSources(<sp/>ALsizei<sp/>n,<sp/>ALuint*<sp/>sources<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourcef(<sp/>ALuint<sp/>sid,<sp/>ALenum<sp/>param,<sp/>ALfloat<sp/>value<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourceUnqueueBuffers(<sp/>ALuint<sp/>sid,<sp/>ALsizei<sp/>numEntries,<sp/>ALuint<sp/>*bids<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">AL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AL_APIENTRY<sp/>alSourcePlay(<sp/>ALuint<sp/>sid<sp/>)<sp/>{<sp/>}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/openal/stubs.cpp"/>
  </compounddef>
</doxygen>
