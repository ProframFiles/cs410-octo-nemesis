<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="sys_2linux_2main_8cpp" kind="file">
    <compoundname>main.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="posix__public_8h" local="yes">../posix/posix_public.h</includes>
    <includes refid="sys__local_8h" local="yes">../sys_local.h</includes>
    <includes refid="local_8h" local="yes">local.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">fcntl.h</includes>
    <incdepgraph>
      <node id="2243">
        <label>sys/stat.h</label>
      </node>
      <node id="2241">
        <label>errno.h</label>
      </node>
      <node id="2245">
        <label>fcntl.h</label>
      </node>
      <node id="2240">
        <label>pthread.h</label>
      </node>
      <node id="2244">
        <label>sys/types.h</label>
      </node>
      <node id="2242">
        <label>unistd.h</label>
      </node>
      <node id="2239">
        <label>E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp</label>
        <link refid="sys/linux/main.cpp"/>
        <childnode refid="2240" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2243" relation="include">
        </childnode>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2245" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sys_2linux_2main_8cpp_1aca8e10e228786dc0d1a876d09aaa4e60" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_str" kindref="compound">idStr</ref></type>
        <definition>idStr basepath</definition>
        <argsstring></argsstring>
        <name>basepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys_2linux_2main_8cpp_1a3d083f7cbd06365117e585efd650a5be" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_str" kindref="compound">idStr</ref></type>
        <definition>idStr savepath</definition>
        <argsstring></argsstring>
        <name>savepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1adc32fbd7c39e44a314135bcf681999cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_InitScanTable</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_InitScanTable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a120674717b4491ce71562513f45dc5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_AsyncThread</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_AsyncThread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="61" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a0ee02302c9ad08c25911a3af3a565729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultSavePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultSavePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="119" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a1b3d67203c74397f3d8a48b59fb0422d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_EXEPath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EXEPath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="132" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="132" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a042b1c70df9ab85f80355e5afb56dedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultBasePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultBasePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="158" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="158" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a0eb2c45a9f97554bac02abf267291972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char Sys_GetConsoleKey</definition>
        <argsstring>(bool shifted)</argsstring>
        <name>Sys_GetConsoleKey</name>
        <param>
          <type>bool</type>
          <declname>shifted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="189" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1aab717bf5c56454273cb0e6368c271360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="198" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1aa76c178778fb3ec5e780a479db5c944f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cpuid_t</type>
        <definition>cpuid_t Sys_GetProcessorId</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="209" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1aa5702f4d360f47cc2077dee0d52221b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetProcessorString</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="218" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1aeefd714cc0a8bd8b388c841252da630a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_EnableExceptions</definition>
        <argsstring>(int exceptions)</argsstring>
        <name>Sys_FPU_EnableExceptions</name>
        <param>
          <type>int</type>
          <declname>exceptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="227" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="227" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a05edca7f8f0a605ccb811c95a5142f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPE_handler</definition>
        <argsstring>(int signum, siginfo_t *info, void *context)</argsstring>
        <name>Sys_FPE_handler</name>
        <param>
          <type>int</type>
          <declname>signum</declname>
        </param>
        <param>
          <type>siginfo_t *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="235" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a7784c1e7cfec8ccb1f4de96451d9f7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Sys_GetClockTicks</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetClockTicks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="245" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="245" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1ae69c51bc9a7e82081cef28386a705ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MeasureClockTicks</definition>
        <argsstring>(void)</argsstring>
        <name>MeasureClockTicks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="269" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a82ead40e1ec7f4e017bcd31a4e09682d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Sys_ClockTicksPerSecond</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ClockTicksPerSecond</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="283" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="283" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1ac677d1e6c06a8c9851bfaf12a6ffe7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_GetSystemRam</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetSystemRam</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="339" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="339" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a8c436751dde7e12b7ff7c4da5317d478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DoStartProcess</definition>
        <argsstring>(const char *exeName, bool dofork)</argsstring>
        <name>Sys_DoStartProcess</name>
        <param>
          <type>const char *</type>
          <declname>exeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dofork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="368" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="368" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1adbbc536942512450a87c4ada7dcd6dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DoPreferences</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DoPreferences</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="468" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a8b913ed226e34deecc6c55297a726ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetDAZ</definition>
        <argsstring>(bool enable)</argsstring>
        <name>Sys_FPU_SetDAZ</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="475" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="475" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1aad2f44c12ea31db202bdd56e7f8e868b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetFTZ</definition>
        <argsstring>(bool enable)</argsstring>
        <name>Sys_FPU_SetFTZ</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="498" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="498" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="sys_2linux_2main_8cpp_1a217dbf8b442f20279ea00b898af96f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, const char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" line="545" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="545" bodyend="565"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../posix/posix_public.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sys_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_MCHECK</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;mcheck.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/>basepath;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/>savepath;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="49"><highlight class="comment">Sys_InitScanTable</highlight></codeline>
<codeline lineno="50"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="51"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_InitScanTable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;TODO:<sp/>Sys_InitScanTable\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="58"><highlight class="comment">Sys_AsyncThread</highlight></codeline>
<codeline lineno="59"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="60"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_AsyncThread(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>now;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>want_sleep;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multi<sp/>tick<sp/>compensate<sp/>for<sp/>poor<sp/>schedulers<sp/>(Linux<sp/>2.4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ticked,<sp/>to_ticked;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ticked<sp/>=<sp/>now<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>Sys_Milliseconds();<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>(<sp/>now<sp/>&amp;<sp/>0xFFFFFFF0<sp/>)<sp/>+<sp/>0x10;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>want_sleep<sp/>=<sp/>(<sp/>next-now-1<sp/>)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>want_sleep<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(<sp/>want_sleep<sp/>);<sp/></highlight><highlight class="comment">//<sp/>sleep<sp/>1ms<sp/>less<sp/>than<sp/>true<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compensate<sp/>if<sp/>we<sp/>slept<sp/>too<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_ticked<sp/>=<sp/>now<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>ticking<sp/>statistics<sp/>-<sp/>every<sp/>100<sp/>ticks,<sp/>print<sp/>a<sp/>summary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>0</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STAT_BUF<sp/>100</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats[STAT_BUF];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>ticks<sp/>to<sp/>play</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats[counter]<sp/>=<sp/>to_ticked<sp/>-<sp/>ticked;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counter<sp/>==<sp/>STAT_BUF)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>STAT_BUF;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>(i<sp/>&amp;<sp/>0xf)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>stats[i]<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ticked<sp/>&lt;<sp/>to_ticked<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Async();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticked++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_TriggerEvent(<sp/>TRIGGER_EVENT_ONE<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_testcancel();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>==============</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>Sys_DefaultSavePath</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>==============</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_DefaultSavePath(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>ID_DEMO_BUILD<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>savepath,<sp/></highlight><highlight class="stringliteral">&quot;%s/.doom3-demo&quot;</highlight><highlight class="normal">,<sp/>getenv(<sp/></highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>savepath,<sp/></highlight><highlight class="stringliteral">&quot;%s/.doom3&quot;</highlight><highlight class="normal">,<sp/>getenv(<sp/></highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>savepath.c_str();</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="128"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="129"><highlight class="comment">Sys_EXEPath</highlight></codeline>
<codeline lineno="130"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="131"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_EXEPath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<sp/>1024<sp/>];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkpath;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[<sp/>0<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>linkpath,<sp/></highlight><highlight class="stringliteral">&quot;/proc/%d/exe&quot;</highlight><highlight class="normal">,<sp/>getpid()<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>readlink(<sp/>linkpath.c_str(),<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>buf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Printf(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>stat<sp/>exe<sp/>path<sp/>link<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>linkpath.c_str());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[<sp/>len<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment">================</highlight></codeline>
<codeline lineno="149"><highlight class="comment">Sys_DefaultBasePath</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">Get<sp/>the<sp/>default<sp/>base<sp/>path</highlight></codeline>
<codeline lineno="152"><highlight class="comment">-<sp/>binary<sp/>image<sp/>path</highlight></codeline>
<codeline lineno="153"><highlight class="comment">-<sp/>current<sp/>directory</highlight></codeline>
<codeline lineno="154"><highlight class="comment">-<sp/>hardcoded</highlight></codeline>
<codeline lineno="155"><highlight class="comment">Try<sp/>to<sp/>be<sp/>intelligent:<sp/>if<sp/>there<sp/>is<sp/>no<sp/>BASE_GAMEDIR,<sp/>try<sp/>the<sp/>next<sp/>path</highlight></codeline>
<codeline lineno="156"><highlight class="comment">================</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_DefaultBasePath(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>testbase;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>basepath<sp/>=<sp/>Sys_EXEPath();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>basepath.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basepath.StripFilename();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testbase<sp/>=<sp/>basepath;<sp/>testbase<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;<sp/>testbase<sp/>+=<sp/>BASE_GAMEDIR;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stat(<sp/>testbase.c_str(),<sp/>&amp;st<sp/>)<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>S_ISDIR(<sp/>st.st_mode<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basepath.c_str();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>&apos;%s&apos;<sp/>directory<sp/>in<sp/>exe<sp/>path<sp/>%s,<sp/>skipping\n&quot;</highlight><highlight class="normal">,<sp/>BASE_GAMEDIR,<sp/>basepath.c_str()<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>basepath<sp/>!=<sp/>Posix_Cwd()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basepath<sp/>=<sp/>Posix_Cwd();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testbase<sp/>=<sp/>basepath;<sp/>testbase<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;<sp/>testbase<sp/>+=<sp/>BASE_GAMEDIR;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stat(<sp/>testbase.c_str(),<sp/>&amp;st<sp/>)<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>S_ISDIR(<sp/>st.st_mode<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basepath.c_str();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;no<sp/>&apos;%s&apos;<sp/>directory<sp/>in<sp/>cwd<sp/>path<sp/>%s,<sp/>skipping\n&quot;</highlight><highlight class="normal">,<sp/>BASE_GAMEDIR,<sp/>basepath.c_str());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>using<sp/>hardcoded<sp/>default<sp/>base<sp/>path\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LINUX_DEFAULT_PATH;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="185"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="186"><highlight class="comment">Sys_GetConsoleKey</highlight></codeline>
<codeline lineno="187"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Sys_GetConsoleKey(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shifted<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shifted<sp/>?<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="195"><highlight class="comment">Sys_Shutdown</highlight></codeline>
<codeline lineno="196"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>basepath.Clear();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>savepath.Clear();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Posix_Shutdown();</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="205"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="206"><highlight class="comment">Sys_GetProcessorId</highlight></codeline>
<codeline lineno="207"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="208"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">cpuid_t<sp/>Sys_GetProcessorId(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPUID_GENERIC;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="214"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="215"><highlight class="comment">Sys_GetProcessorString</highlight></codeline>
<codeline lineno="216"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="217"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_GetProcessorString(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;generic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="224"><highlight class="comment">Sys_FPU_EnableExceptions</highlight></codeline>
<codeline lineno="225"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FPU_EnableExceptions(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exceptions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="231"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="232"><highlight class="comment">Sys_FPE_handler</highlight></codeline>
<codeline lineno="233"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="234"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FPE_handler(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum,<sp/>siginfo_t<sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>signum<sp/>==<sp/>SIGFPE<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="stringliteral">&quot;FPE\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="241"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="242"><highlight class="comment">Sys_GetClockticks</highlight></codeline>
<codeline lineno="243"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="244"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Sys_GetClockTicks(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>__i386__<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lo,<sp/>hi;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/>__volatile__<sp/>(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>%%ebx\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;xor<sp/>%%eax,%%eax\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cpuid\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rdtsc\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%%eax,%0\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%%edx,%1\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>%%ebx\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(lo),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(hi)<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>lo<sp/>+<sp/>(double)<sp/>0xFFFFFFFF<sp/>*<sp/>hi;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>unsupported<sp/>CPU</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="265"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="266"><highlight class="comment">MeasureClockTicks</highlight></codeline>
<codeline lineno="267"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MeasureClockTicks(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>Sys_GetClockTicks(<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Sleep(<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>Sys_GetClockTicks(<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t1<sp/>-<sp/>t0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="279"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="280"><highlight class="comment">Sys_ClockTicksPerSecond</highlight></codeline>
<codeline lineno="281"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="282"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Sys_ClockTicksPerSecond(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/>ret;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fd,<sp/>len,<sp/>pos,<sp/>end;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>buf[<sp/>4096<sp/>];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>init<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>open(<sp/></highlight><highlight class="stringliteral">&quot;/proc/cpuinfo&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fd<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>read<sp/>/proc/cpuinfo\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>MeasureClockTicks();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;measured<sp/>CPU<sp/>frequency:<sp/>%g<sp/>MHz\n&quot;</highlight><highlight class="normal">,<sp/>ret<sp/>/<sp/>1000000.0<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>read(<sp/>fd,<sp/>buf,<sp/>4096<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>close(<sp/>fd<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>&lt;<sp/>len<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Cmpn(<sp/>buf<sp/>+<sp/>pos,<sp/></highlight><highlight class="stringliteral">&quot;cpu<sp/>MHz&quot;</highlight><highlight class="normal">,<sp/>7<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>strchr(<sp/>buf<sp/>+<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>)<sp/>-<sp/>buf<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>strchr(<sp/>buf<sp/>+<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)<sp/>-<sp/>buf;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>end<sp/>&lt;<sp/>len<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[end]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>atof(<sp/>buf<sp/>+<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>parsing<sp/>/proc/cpuinfo\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>MeasureClockTicks();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;measured<sp/>CPU<sp/>frequency:<sp/>%g<sp/>MHz\n&quot;</highlight><highlight class="normal">,<sp/>ret<sp/>/<sp/>1000000.0<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;/proc/cpuinfo<sp/>CPU<sp/>frequency:<sp/>%g<sp/>MHz\n&quot;</highlight><highlight class="normal">,<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>1000000;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>strchr(<sp/>buf<sp/>+<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)<sp/>-<sp/>buf<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>parsing<sp/>/proc/cpuinfo\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>MeasureClockTicks();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;measured<sp/>CPU<sp/>frequency:<sp/>%g<sp/>MHz\n&quot;</highlight><highlight class="normal">,<sp/>ret<sp/>/<sp/>1000000.0<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="334"><highlight class="comment">================</highlight></codeline>
<codeline lineno="335"><highlight class="comment">Sys_GetSystemRam</highlight></codeline>
<codeline lineno="336"><highlight class="comment">returns<sp/>in<sp/>megabytes</highlight></codeline>
<codeline lineno="337"><highlight class="comment">================</highlight></codeline>
<codeline lineno="338"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_GetSystemRam(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>count,<sp/>page_size;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mb;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>sysconf(<sp/>_SC_PHYS_PAGES<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>count<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;GetSystemRam:<sp/>sysconf<sp/>_SC_PHYS_PAGES<sp/>failed\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>512;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>page_size<sp/>=<sp/>sysconf(<sp/>_SC_PAGE_SIZE<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>page_size<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;GetSystemRam:<sp/>sysconf<sp/>_SC_PAGE_SIZE<sp/>failed\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>512;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>mb=<sp/>(int)(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)count<sp/>*<sp/>(double)page_size<sp/>/<sp/>(<sp/>1024<sp/>*<sp/>1024<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>to<sp/>the<sp/>nearest<sp/>16Mb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>(<sp/>mb<sp/>+<sp/>8<sp/>)<sp/>&amp;<sp/>~15;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mb;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="360"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="361"><highlight class="comment">Sys_DoStartProcess</highlight></codeline>
<codeline lineno="362"><highlight class="comment">if<sp/>we<sp/>don&apos;t<sp/>fork,<sp/>this<sp/>function<sp/>never<sp/>returns</highlight></codeline>
<codeline lineno="363"><highlight class="comment">the<sp/>no-fork<sp/>lets<sp/>you<sp/>keep<sp/>the<sp/>terminal<sp/>when<sp/>you&apos;re<sp/>about<sp/>to<sp/>spawn<sp/>an<sp/>installer</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment">if<sp/>the<sp/>command<sp/>contains<sp/>spaces,<sp/>system()<sp/>is<sp/>used.<sp/>Otherwise<sp/>the<sp/>more<sp/>straightforward<sp/>execl<sp/>(<sp/>system()<sp/>blows<sp/>though<sp/>)</highlight></codeline>
<codeline lineno="366"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="367"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DoStartProcess(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exeName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dofork<sp/>)<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_system<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strchr(<sp/>exeName,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_system<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>exec<sp/>rights<sp/>when<sp/>it&apos;s<sp/>about<sp/>a<sp/>single<sp/>file<sp/>to<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>buf;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stat(<sp/>exeName,<sp/>&amp;buf<sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;stat<sp/>%s<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName,<sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>chmod(<sp/>exeName,<sp/>buf.st_mode<sp/>|<sp/>S_IXUSR<sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;cmod<sp/>+x<sp/>%s<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName,<sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dofork<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>fork()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>use_system<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;system<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system(<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;execl<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execl(<sp/>exeName,<sp/>exeName,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;execl<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>use_system<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;system<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system(<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(<sp/>1<sp/>);<sp/></highlight><highlight class="comment">//<sp/>on<sp/>some<sp/>systems<sp/>I&apos;ve<sp/>seen<sp/>that<sp/>starting<sp/>the<sp/>new<sp/>process<sp/>and<sp/>exiting<sp/>this<sp/>one<sp/>should<sp/>not<sp/>be<sp/>too<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;execl<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execl(<sp/>exeName,<sp/>exeName,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;execl<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>terminate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="417"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="418"><highlight class="comment">Sys_OpenURL</highlight></codeline>
<codeline lineno="419"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="420"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSysLocal::OpenURL(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*script_path;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/><sp/><sp/><sp/><sp/><sp/>*script_file;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdline[<sp/>1024<sp/>];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quit_spamguard<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>quit_spamguard<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;Sys_OpenURL:<sp/>already<sp/>in<sp/>a<sp/>doexit<sp/>sequence,<sp/>ignoring<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>URL:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>opening<sp/>an<sp/>URL<sp/>on<sp/>*nix<sp/>can<sp/>mean<sp/>a<sp/>lot<sp/>of<sp/>things<sp/>..<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>spawn<sp/>a<sp/>script<sp/>instead<sp/>of<sp/>deciding<sp/>for<sp/>the<sp/>user<sp/>:-)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>in<sp/>the<sp/>savepath<sp/>first,<sp/>then<sp/>in<sp/>the<sp/>basepath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>script_path<sp/>=<sp/>fileSystem-&gt;BuildOSPath(<sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;fs_savepath&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;openurl.sh&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>script_file<sp/>=<sp/>fileSystem-&gt;OpenExplicitFileRead(<sp/>script_path<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!script_file<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_path<sp/>=<sp/>fileSystem-&gt;BuildOSPath(<sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;fs_basepath&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;openurl.sh&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_file<sp/>=<sp/>fileSystem-&gt;OpenExplicitFileRead(<sp/>script_path<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!script_file<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>find<sp/>URL<sp/>script<sp/>&apos;openurl.sh&apos;<sp/>in<sp/>either<sp/>savepath<sp/>or<sp/>basepath\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;OpenURL<sp/>&apos;%s&apos;<sp/>failed\n&quot;</highlight><highlight class="normal">,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>script_file<sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>going<sp/>to<sp/>quit,<sp/>only<sp/>accept<sp/>a<sp/>single<sp/>URL<sp/>before<sp/>quitting<sp/>and<sp/>spawning<sp/>the<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>quit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit_spamguard<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;URL<sp/>script:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>script_path<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StartProcess<sp/>is<sp/>going<sp/>to<sp/>execute<sp/>a<sp/>system()<sp/>call<sp/>with<sp/>that<sp/>-<sp/>hence<sp/>the<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::snPrintf(<sp/>cmdline,<sp/>1024,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>&apos;%s&apos;<sp/>&amp;&quot;</highlight><highlight class="normal">,<sp/><sp/>script_path,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>sys-&gt;StartProcess(<sp/>cmdline,<sp/>quit<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>==================</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>Sys_DoPreferences</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>==================</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DoPreferences(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="471"><highlight class="comment">================</highlight></codeline>
<codeline lineno="472"><highlight class="comment">Sys_FPU_SetDAZ</highlight></codeline>
<codeline lineno="473"><highlight class="comment">================</highlight></codeline>
<codeline lineno="474"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FPU_SetDAZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/>DWORD<sp/>dwData;</highlight></codeline>
<codeline lineno="478"><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/>_asm<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>movzx<sp/><sp/><sp/>ecx,<sp/>byte<sp/>ptr<sp/>enable</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/><sp/><sp/>ecx,<sp/>1</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shl<sp/><sp/><sp/><sp/><sp/>ecx,<sp/>6</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STMXCSR<sp/>dword<sp/>ptr<sp/>dwData</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>eax,<sp/>dwData</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/><sp/><sp/>eax,<sp/>~(1&lt;&lt;6)<sp/><sp/><sp/><sp/>//<sp/>clear<sp/>DAX<sp/>bit</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/>eax,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>set<sp/>the<sp/>DAZ<sp/>bit</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>dwData,<sp/>eax</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDMXCSR<sp/>dword<sp/>ptr<sp/>dwData</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="494"><highlight class="comment">================</highlight></codeline>
<codeline lineno="495"><highlight class="comment">Sys_FPU_SetFTZ</highlight></codeline>
<codeline lineno="496"><highlight class="comment">================</highlight></codeline>
<codeline lineno="497"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FPU_SetFTZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/>DWORD<sp/>dwData;</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/>_asm<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>movzx<sp/><sp/><sp/>ecx,<sp/>byte<sp/>ptr<sp/>enable</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/><sp/><sp/>ecx,<sp/>1</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shl<sp/><sp/><sp/><sp/><sp/>ecx,<sp/>15</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STMXCSR<sp/>dword<sp/>ptr<sp/>dwData</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>eax,<sp/>dwData</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/><sp/><sp/>eax,<sp/>~(1&lt;&lt;15)<sp/><sp/><sp/>//<sp/>clear<sp/>FTZ<sp/>bit</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/>eax,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>set<sp/>the<sp/>FTZ<sp/>bit</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>dwData,<sp/>eax</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDMXCSR<sp/>dword<sp/>ptr<sp/>dwData</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="518"><highlight class="comment">mem<sp/>consistency<sp/>stuff</highlight></codeline>
<codeline lineno="519"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="520"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_MCHECK</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mcheckstrings[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MCHECK_DISABLED&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MCHECK_OK&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MCHECK_FREE&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>freed<sp/>twice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MCHECK_HEAD&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>before<sp/>the<sp/>block<sp/>was<sp/>clobbered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MCHECK_TAIL&quot;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>after<sp/>the<sp/>block<sp/>was<sp/>clobbered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>abrt_func(<sp/>mcheck_status<sp/>status<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="stringliteral">&quot;memory<sp/>consistency<sp/>failure:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mcheckstrings[<sp/>status<sp/>+<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>Posix_SetExit(<sp/>EXIT_FAILURE<sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Quit();</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="541"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="542"><highlight class="comment">main</highlight></codeline>
<codeline lineno="543"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="544"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_MCHECK</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>have<sp/>-lmcheck<sp/>linkage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>mcheck(<sp/>abrt_func<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="stringliteral">&quot;memory<sp/>consistency<sp/>checking<sp/>enabled\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>Posix_EarlyInit(<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>argc<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Init(<sp/>argc-1,<sp/>&amp;argv[1],<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Init(<sp/>0,<sp/>NULL,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>Posix_LateInit(<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Frame();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp"/>
  </compounddef>
</doxygen>
