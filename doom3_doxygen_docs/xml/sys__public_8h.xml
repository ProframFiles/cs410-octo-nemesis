<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="sys__public_8h" kind="file">
    <compoundname>sys_public.h</compoundname>
    <includedby refid="_collision_model__debug_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/cm/CollisionModel_debug.cpp</includedby>
    <includedby refid="macosx__local_8h" local="yes">E:/sources/3rd_party/DOOM/neo/sys/osx/macosx_local.h</includedby>
    <innerclass refid="structsys_event__s" prot="public">sysEvent_s</innerclass>
    <innerclass refid="structsys_memory_stats__s" prot="public">sysMemoryStats_s</innerclass>
    <innerclass refid="classid_list" prot="public">idList</innerclass>
    <innerclass refid="structnetadr__t" prot="public">netadr_t</innerclass>
    <innerclass refid="classid_port" prot="public">idPort</innerclass>
    <innerclass refid="classid_t_c_p" prot="public">idTCP</innerclass>
    <innerclass refid="structxthread_info" prot="public">xthreadInfo</innerclass>
    <innerclass refid="classid_sys" prot="public">idSys</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sys__public_8h_1adf055b9e925412a2db46ee08ced4bd3b" prot="public" static="no">
        <name>BUILD_STRING</name>
        <initializer>&quot;win-x86&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="44" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1abd75ee8bb21aa884a0291b6e287d4e8a" prot="public" static="no">
        <name>BUILD_OS_ID</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="45" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a938ad95dd311af33fc5886382b9514cf" prot="public" static="no">
        <name>CPUSTRING</name>
        <initializer>&quot;x86&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="46" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a82ad93d0ce3e46fc833a26863fd6fed9" prot="public" static="no">
        <name>CPU_EASYARGS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="47" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a5f52b654c9c723c0487658c26b07c12f" prot="public" static="no">
        <name>ALIGN16</name>
        <param><defname>x</defname></param>
        <initializer>__declspec(align(16)) x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="49" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a935db9fd312e3cdb404bf3f9f4607627" prot="public" static="no">
        <name>PACKED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="50" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a6f83b09456f0fbc9f537b7b5ba86db11" prot="public" static="no">
        <name>_alloca16</name>
        <param><defname>x</defname></param>
        <initializer>((void *)((((int)_alloca( (x)+15 )) + 15) &amp; ~15))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="52" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1aabc383dbeecd1c2343b4176db8b69942" prot="public" static="no">
        <name>PATHSEPERATOR_STR</name>
        <initializer>&quot;\\&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="54" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a9ddbc74ff06cea1fa00b95aa191ec894" prot="public" static="no">
        <name>PATHSEPERATOR_CHAR</name>
        <initializer>&apos;\\&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="55" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a830746a1142121edfc801e0805aa9921" prot="public" static="no">
        <name>ID_INLINE</name>
        <initializer>__forceinline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="57" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a0d2fd360f0b1f1e8b8aaf3d2a8fa17a0" prot="public" static="no">
        <name>ID_STATIC_TEMPLATE</name>
        <initializer>static</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="58" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1a3276217d4ac2bf7c70486c54ec6c3531" prot="public" static="no">
        <name>assertmem</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>assert( _CrtIsValidPointer( x, y, true ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="60" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1ab8686d7d29dc16f644961925148d698b" prot="public" static="no">
        <name>id_attribute</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="139" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1abd2d7f9c486a3cee36b11d91f45d38c7" prot="public" static="no">
        <name>SYS_MINSLEEP</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="259" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sys__public_8h_1affa0b0e0285a0d4868799e6a2423f76d" prot="public" static="no">
        <name>PORT_ANY</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="410" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cc" prot="public" static="no">
        <name>cpuid_t</name>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca5a4642a64be5199e6019f65073a83f77" prot="public">
          <name>CPUID_NONE</name>
          <initializer>= 0x00000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca9f9b4ef6d628b57242479891e22bb292" prot="public">
          <name>CPUID_UNSUPPORTED</name>
          <initializer>= 0x00001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca4579dcee1f384c4630b7e16a5e84be36" prot="public">
          <name>CPUID_GENERIC</name>
          <initializer>= 0x00002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca62a51354f61fcffd991c4de7b453d533" prot="public">
          <name>CPUID_INTEL</name>
          <initializer>= 0x00004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca16cf7f569a69f6dbb941853adfe37a90" prot="public">
          <name>CPUID_AMD</name>
          <initializer>= 0x00008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca5faf3dd7267cde8ac00d83d511da3b51" prot="public">
          <name>CPUID_MMX</name>
          <initializer>= 0x00010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68ccaf7d975adda98a574bd0a486ec62d3873" prot="public">
          <name>CPUID_3DNOW</name>
          <initializer>= 0x00020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68ccafe5997de8be6ce3772e2728011e37aee" prot="public">
          <name>CPUID_SSE</name>
          <initializer>= 0x00040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca404b698458e11ac1b0c42b389e1fc2b6" prot="public">
          <name>CPUID_SSE2</name>
          <initializer>= 0x00080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca2bcf0e25d82dd37ba3fda7b1df3f7a72" prot="public">
          <name>CPUID_SSE3</name>
          <initializer>= 0x00100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca862911e1494774c816b65ff827565877" prot="public">
          <name>CPUID_ALTIVEC</name>
          <initializer>= 0x00200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68ccae156117e257c7953b1c129d2ff7243c8" prot="public">
          <name>CPUID_HTT</name>
          <initializer>= 0x01000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68ccaf13e0ea7d61a043b2379692a048f60ca" prot="public">
          <name>CPUID_CMOV</name>
          <initializer>= 0x02000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca402c2087137f9615d6990f41a518c0c5" prot="public">
          <name>CPUID_FTZ</name>
          <initializer>= 0x04000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1d178973f70db0a3351d2835bdec68cca0a69a821b2c90b4df7a21bce0ec1fa28" prot="public">
          <name>CPUID_DAZ</name>
          <initializer>= 0x08000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="142" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="142" bodyend="158"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1af75463ec13958cb30547196ca918052c" prot="public" static="no">
        <name>fpuExceptions_t</name>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052cacc44d8c9c67b8525b382e2ec588018ad" prot="public">
          <name>FPU_EXCEPTION_INVALID_OPERATION</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052cadc44e1afab53db581e8f58b577f89ee0" prot="public">
          <name>FPU_EXCEPTION_DENORMALIZED_OPERAND</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052cac4309baff9da3475e29f9c4f429b5fdc" prot="public">
          <name>FPU_EXCEPTION_DIVIDE_BY_ZERO</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052ca52258d502ff15afc26322bfe7d972218" prot="public">
          <name>FPU_EXCEPTION_NUMERIC_OVERFLOW</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052ca5a414f58930a063977ba046aa4c240c7" prot="public">
          <name>FPU_EXCEPTION_NUMERIC_UNDERFLOW</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1af75463ec13958cb30547196ca918052ca2b3ec886e4a1f32c1860f181e161b8c1" prot="public">
          <name>FPU_EXCEPTION_INEXACT_RESULT</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="160" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="160" bodyend="167"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a88cd550bd8afa876b6a323dee75b90a6" prot="public" static="no">
        <name>fpuPrecision_t</name>
        <enumvalue id="sys__public_8h_1a88cd550bd8afa876b6a323dee75b90a6a7d4ce1ed35063326762b27b283b953df" prot="public">
          <name>FPU_PRECISION_SINGLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a88cd550bd8afa876b6a323dee75b90a6a3f15eceb7204100221253ec5541e99f0" prot="public">
          <name>FPU_PRECISION_DOUBLE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a88cd550bd8afa876b6a323dee75b90a6ae68be4d9202d543e9785f71bc2e9974d" prot="public">
          <name>FPU_PRECISION_DOUBLE_EXTENDED</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="169" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1aca6435223bfbf3e2f22a442aacbe9ebb" prot="public" static="no">
        <name>fpuRounding_t</name>
        <enumvalue id="sys__public_8h_1aca6435223bfbf3e2f22a442aacbe9ebba98fa031ac38a4c37d255d9e5cbf2a7c3" prot="public">
          <name>FPU_ROUNDING_TO_NEAREST</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1aca6435223bfbf3e2f22a442aacbe9ebbaeea7439e6428abf05170308bc5846209" prot="public">
          <name>FPU_ROUNDING_DOWN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1aca6435223bfbf3e2f22a442aacbe9ebbab28e5e4c7d712aa3332b8d2db2ed2a77" prot="public">
          <name>FPU_ROUNDING_UP</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1aca6435223bfbf3e2f22a442aacbe9ebba943d3b1ebc053c32a06ac990481f0069" prot="public">
          <name>FPU_ROUNDING_TO_ZERO</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="175" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82" prot="public" static="no">
        <name>joystickAxis_t</name>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82a176e279b66254ce93a9c8a548d40afa8" prot="public">
          <name>AXIS_SIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82a83f80e60f3c1921c832d5bfdcef3f434" prot="public">
          <name>AXIS_FORWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82abffdb5b0149b162db4dfa8de7d8ec7b9" prot="public">
          <name>AXIS_UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82aa0b57c2045f9ceb2e55b2499373ac1a9" prot="public">
          <name>AXIS_ROLL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82a433fa3bea6380512d4ea3da82f3749d7" prot="public">
          <name>AXIS_YAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82a2426c9869932accd75c6ebf8dbec9320" prot="public">
          <name>AXIS_PITCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1ab5bb564f8a56c7f15e28345fe4003a82ac0d00ca0a6df61c7796fe5e60b2e6492" prot="public">
          <name>MAX_JOYSTICK_AXIS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="182" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="182" bodyend="190"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a3216036e977687f1042592df95bc634d" prot="public" static="no">
        <name>sysEventType_t</name>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634dacf1c6f07a9f98bac1c687adb80260085" prot="public">
          <name>SE_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634da94ca959cb1ee7147210faccfd5744359" prot="public">
          <name>SE_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634da7a420feb0f42cef0b7b0c4b9c2d7c694" prot="public">
          <name>SE_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634da42fd0dbabe4b57ac15c51dcf55167328" prot="public">
          <name>SE_MOUSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634da3700f52130490e8a665bc556812773c0" prot="public">
          <name>SE_JOYSTICK_AXIS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a3216036e977687f1042592df95bc634dade5f104a59e7d0af092fe95c6a99e34a" prot="public">
          <name>SE_CONSOLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="192" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="192" bodyend="199"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2d" prot="public" static="no">
        <name>sys_mEvents</name>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dad74c049e0383df6564361beeae79cc3c" prot="public">
          <name>M_ACTION1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dac37ff83b2ff294c024dda587f97c7a79" prot="public">
          <name>M_ACTION2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2da7c98d91625c488d382aac2d8e82e6b37" prot="public">
          <name>M_ACTION3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2da4a85c122d9438a2791ce905c8e6a8ac3" prot="public">
          <name>M_ACTION4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2da198c69dab07b45639e504281b63a53e9" prot="public">
          <name>M_ACTION5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dab264791be53ac40e440bc9a2db5a56bd" prot="public">
          <name>M_ACTION6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dac219cb6ba4c3002bb9bc0908d23751ef" prot="public">
          <name>M_ACTION7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2da039d04af72bb65606a61cfc756860de1" prot="public">
          <name>M_ACTION8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dae514882112a6fab895948a7a71c55da2" prot="public">
          <name>M_DELTAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2da00f554cb510f8804feab93331eb3025b" prot="public">
          <name>M_DELTAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a06468b5e7693b3a7b3af8c3802296d2dad0f9a579060f8238d316a3eb764e93a4" prot="public">
          <name>M_DELTAZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="201" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="201" bodyend="213"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a1654a012cc4b6196cf9e2da097b7b02a" prot="public" static="no">
        <name>netadrtype_t</name>
        <enumvalue id="sys__public_8h_1a1654a012cc4b6196cf9e2da097b7b02aa1c8e5ccda08a0666225562160d3a59c8" prot="public">
          <name>NA_BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1654a012cc4b6196cf9e2da097b7b02aa9cf418f084ad1c666a25b35db62f9e55" prot="public">
          <name>NA_LOOPBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1654a012cc4b6196cf9e2da097b7b02aaaf5fb882452014a33c3ff9a144a0c65c" prot="public">
          <name>NA_BROADCAST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a1654a012cc4b6196cf9e2da097b7b02aa2509090adf574f54c0c96cf6b55c19d8" prot="public">
          <name>NA_IP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="397" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="397" bodyend="402"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a7701056c32b5aa443cf9ddfd078d1478" prot="public" static="no">
        <name>xthreadPriority</name>
        <enumvalue id="sys__public_8h_1a7701056c32b5aa443cf9ddfd078d1478a94dae197069b7c6753867800049500ad" prot="public">
          <name>THREAD_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a7701056c32b5aa443cf9ddfd078d1478acaf4f175ea98b9adc63808e1388d5810" prot="public">
          <name>THREAD_ABOVE_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a7701056c32b5aa443cf9ddfd078d1478a968065a33949f235bfda3ed4b4847aa5" prot="public">
          <name>THREAD_HIGHEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="482" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="482" bodyend="486"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a4efaf4e07364d6302f598569aa7e55dc" prot="public" static="no">
        <name>@128</name>
        <enumvalue id="sys__public_8h_1a4efaf4e07364d6302f598569aa7e55dcaee3b227fb58b888b1ed95f4f2c28762c" prot="public">
          <name>CRITICAL_SECTION_ZERO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a4efaf4e07364d6302f598569aa7e55dcaffcb71bd2d6c25b2ee1211af6d314331" prot="public">
          <name>CRITICAL_SECTION_ONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a4efaf4e07364d6302f598569aa7e55dca7aed1515139631765620a25be5ad529e" prot="public">
          <name>CRITICAL_SECTION_TWO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a4efaf4e07364d6302f598569aa7e55dcad058126bfab36c68f0c031f50b85fcac" prot="public">
          <name>CRITICAL_SECTION_THREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="507" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="enum" id="sys__public_8h_1a34df7cc7f69a8ec535eec8a524dcbaf9" prot="public" static="no">
        <name>@129</name>
        <enumvalue id="sys__public_8h_1a34df7cc7f69a8ec535eec8a524dcbaf9a853460d33837fecd9a6f3484845c9c8b" prot="public">
          <name>TRIGGER_EVENT_ZERO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a34df7cc7f69a8ec535eec8a524dcbaf9a54f94254bb4a1781c9a6040a652d8155" prot="public">
          <name>TRIGGER_EVENT_ONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a34df7cc7f69a8ec535eec8a524dcbaf9a87fa864511df166d9c7bd18bcb5057cb" prot="public">
          <name>TRIGGER_EVENT_TWO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sys__public_8h_1a34df7cc7f69a8ec535eec8a524dcbaf9abb14abf861000193230f04039a049a90" prot="public">
          <name>TRIGGER_EVENT_THREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="519" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="519" bodyend="524"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sys__public_8h_1a393720bbb3c7367f3d09e0da95ac2aa6" prot="public" static="no">
        <type>struct <ref refid="structsys_event__s" kindref="compound">sysEvent_s</ref></type>
        <definition>typedef struct sysEvent_s  sysEvent_t</definition>
        <argsstring></argsstring>
        <name>sysEvent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sys__public_8h_1a40593a70f5e3a617d2143984b2d6507b" prot="public" static="no">
        <type>struct <ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_s</ref></type>
        <definition>typedef struct sysMemoryStats_s  sysMemoryStats_t</definition>
        <argsstring></argsstring>
        <name>sysMemoryStats_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sys__public_8h_1a9bef0f56c5c02f15f8ef8da4ad89ee71" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long address_t</definition>
        <argsstring></argsstring>
        <name>address_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="234" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sys__public_8h_1a516f16b22e6ec1f932b67d22cc25fd22" prot="public" static="no">
        <type>unsigned int(*</type>
        <definition>typedef unsigned int(* xthread_t)(void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>xthread_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="480" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sys__public_8h_1a2386d222e1a6187210271bfff7468e1a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_THREADS</definition>
        <argsstring></argsstring>
        <name>MAX_THREADS</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="494" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys__public_8h_1ac9a6605904442457f111bdc849c4eeb0" prot="public" static="no" mutable="no">
        <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> *</type>
        <definition>xthreadInfo* g_threads[MAX_THREADS]</definition>
        <argsstring>[MAX_THREADS]</argsstring>
        <name>g_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="495" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys__public_8h_1a77e19e501e58cec4761b60fe160ffec9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int g_thread_count</definition>
        <argsstring></argsstring>
        <name>g_thread_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="496" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys__public_8h_1acf3ced8586aeb336fe08e7252f3e7159" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_CRITICAL_SECTIONS</definition>
        <argsstring></argsstring>
        <name>MAX_CRITICAL_SECTIONS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="505" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys__public_8h_1a5c5bf91c4d26495e67d6575be7ad00ec" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_TRIGGER_EVENTS</definition>
        <argsstring></argsstring>
        <name>MAX_TRIGGER_EVENTS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="517" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sys__public_8h_1aeaaf428d74e01d1be0e7836492d8aef8" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sys" kindref="compound">idSys</ref> *</type>
        <definition>idSys* sys</definition>
        <argsstring></argsstring>
        <name>sys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="573" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/Game_local.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sys__public_8h_1adfdb874494a7e96ac1256869f1a7e9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="239" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aab717bf5c56454273cb0e6368c271360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="240" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a2fe6e82a2dd55741246a156d74cc7dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Error</definition>
        <argsstring>(const char *error,...)</argsstring>
        <name>Sys_Error</name>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="241" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/osx/macosx_sys.mm" bodystart="156" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a745fd700e60470ed4e547bd6c67d4630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Quit</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Quit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="242" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a863759e63ab6a38ac2be86d8be9b998a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_AlreadyRunning</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_AlreadyRunning</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="244" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5896b948b6201a1f9abf99d5bb4a19c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* Sys_GetClipboardData</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetClipboardData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="247" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a27ead74bc686bc4f21a2940864f25efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_SetClipboardData</definition>
        <argsstring>(const char *string)</argsstring>
        <name>Sys_SetClipboardData</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="248" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a4c333d13e2ececdc4db1cd3f7af994fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Printf</definition>
        <argsstring>(const char *msg,...)</argsstring>
        <name>Sys_Printf</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="252" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="1015" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1af411596d6995be6d63ca2a6519bd4502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DebugPrintf</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>Sys_DebugPrintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="255" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="999" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a81e19af95cf4217ba1e72710c8412aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DebugVPrintf</definition>
        <argsstring>(const char *fmt, va_list arg)</argsstring>
        <name>Sys_DebugVPrintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="256" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="1009" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a46d48b4e802487e4c09ebcd334dcdd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Sleep</definition>
        <argsstring>(int msec)</argsstring>
        <name>Sys_Sleep</name>
        <param>
          <type>int</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="263" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/osx/macosx_sys.mm" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa150e852597301f172c84958261037d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_Milliseconds</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Milliseconds</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="267" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/test_scheduler.c" bodystart="49" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7784c1e7cfec8ccb1f4de96451d9f7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Sys_GetClockTicks</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetClockTicks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="270" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="245" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a82ead40e1ec7f4e017bcd31a4e09682d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Sys_ClockTicksPerSecond</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ClockTicksPerSecond</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="271" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="283" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa76c178778fb3ec5e780a479db5c944f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cpuid_t</type>
        <definition>cpuid_t Sys_GetProcessorId</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="274" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa5702f4d360f47cc2077dee0d52221b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetProcessorString</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="275" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5dd704fe734a3076e1943ead4990c36f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_FPU_StackIsEmpty</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_FPU_StackIsEmpty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="278" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="471" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a8e0387921d6781aa5d3e2540a31cae77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_ClearStack</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_FPU_ClearStack</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="281" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="475" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa8fee9e08e19e8d74c92f3ae01405266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_FPU_GetState</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_FPU_GetState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="284" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aeefd714cc0a8bd8b388c841252da630a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_EnableExceptions</definition>
        <argsstring>(int exceptions)</argsstring>
        <name>Sys_FPU_EnableExceptions</name>
        <param>
          <type>int</type>
          <declname>exceptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="287" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="227" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a040e3549d3262d968abfb89febceed21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetPrecision</definition>
        <argsstring>(int precision)</argsstring>
        <name>Sys_FPU_SetPrecision</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="290" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="482" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7ba276a8d0b3199dee3a1fd708b26462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetRounding</definition>
        <argsstring>(int rounding)</argsstring>
        <name>Sys_FPU_SetRounding</name>
        <param>
          <type>int</type>
          <declname>rounding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="293" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_cpu.cpp" bodystart="873" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aad2f44c12ea31db202bdd56e7f8e868b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetFTZ</definition>
        <argsstring>(bool enable)</argsstring>
        <name>Sys_FPU_SetFTZ</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="296" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="498" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a8b913ed226e34deecc6c55297a726ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FPU_SetDAZ</definition>
        <argsstring>(bool enable)</argsstring>
        <name>Sys_FPU_SetDAZ</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="299" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="475" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ac677d1e6c06a8c9851bfaf12a6ffe7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_GetSystemRam</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetSystemRam</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="302" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="339" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a6eb3503e6d8e86ab390e3b0ccfee0bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_GetVideoRam</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetVideoRam</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="305" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1acbfa0a0cebf059b0477b7501de98eb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_GetDriveFreeSpace</definition>
        <argsstring>(const char *path)</argsstring>
        <name>Sys_GetDriveFreeSpace</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="308" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="518" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a49191c7b87978ee99cc67c3ca8055c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GetCurrentMemoryStatus</definition>
        <argsstring>(sysMemoryStats_t &amp;stats)</argsstring>
        <name>Sys_GetCurrentMemoryStatus</name>
        <param>
          <type><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="311" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aca01ce6e936e3a167dd3adbb1bff6d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GetExeLaunchMemoryStatus</definition>
        <argsstring>(sysMemoryStats_t &amp;stats)</argsstring>
        <name>Sys_GetExeLaunchMemoryStatus</name>
        <param>
          <type><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="312" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aba7effc0e9b2550943959e744be64344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_LockMemory</definition>
        <argsstring>(void *ptr, int bytes)</argsstring>
        <name>Sys_LockMemory</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="315" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5498fe4b0a23745224f3dc7db70c5ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_UnlockMemory</definition>
        <argsstring>(void *ptr, int bytes)</argsstring>
        <name>Sys_UnlockMemory</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="316" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="499" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ae613747e8f556c99908d6a03727f6020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_SetPhysicalWorkMemory</definition>
        <argsstring>(int minBytes, int maxBytes)</argsstring>
        <name>Sys_SetPhysicalWorkMemory</name>
        <param>
          <type>int</type>
          <declname>minBytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="319" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5f701f85ea53e7c5a4105e43e0f1159b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GetCallStack</definition>
        <argsstring>(address_t *callStack, const int callStackSize)</argsstring>
        <name>Sys_GetCallStack</name>
        <param>
          <type>address_t *</type>
          <declname>callStack</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>callStackSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="322" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/stack.cpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7809c560a5351fc92933c09e761bb70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetCallStackStr</definition>
        <argsstring>(const address_t *callStack, const int callStackSize)</argsstring>
        <name>Sys_GetCallStackStr</name>
        <param>
          <type>const address_t *</type>
          <declname>callStack</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>callStackSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="323" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/stack.cpp" bodystart="100" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7d46e31765e96084fa8f1cfd8e22f32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetCallStackCurStr</definition>
        <argsstring>(int depth)</argsstring>
        <name>Sys_GetCallStackCurStr</name>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="324" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/stack.cpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1afb64917555dd2f949119b7babd2c0dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetCallStackCurAddressStr</definition>
        <argsstring>(int depth)</argsstring>
        <name>Sys_GetCallStackCurAddressStr</name>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="325" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/stack.cpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7de3b399645baf446281722444ab016d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShutdownSymbols</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ShutdownSymbols</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="326" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/stack.cpp" bodystart="35" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a4d9643c51baac8f61c507560fd984665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_DLL_Load</definition>
        <argsstring>(const char *dllName)</argsstring>
        <name>Sys_DLL_Load</name>
        <param>
          <type>const char *</type>
          <declname>dllName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="329" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="388" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1add611c75d2c0f87c1ab67f6b9fa3285d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* Sys_DLL_GetProcAddress</definition>
        <argsstring>(int dllHandle, const char *procName)</argsstring>
        <name>Sys_DLL_GetProcAddress</name>
        <param>
          <type>int</type>
          <declname>dllHandle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>procName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="330" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="401" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a0d3cf20d895421c582aabcef8dfb9547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DLL_Unload</definition>
        <argsstring>(int dllHandle)</argsstring>
        <name>Sys_DLL_Unload</name>
        <param>
          <type>int</type>
          <declname>dllHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="331" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="415" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a9a1d68982152ef5fa2d60ca5b90d0078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GenerateEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GenerateEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="334" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="980" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1af9912ad968f804081611d0911152ef69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref></type>
        <definition>sysEvent_t Sys_GetEvent</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetEvent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="309" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a1a25cb489bebadf5deb79907cdd4db7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ClearEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ClearEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="336" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="328" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aca390c4976bf835d3838177731c2137c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_InitInput</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_InitInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="340" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a422a013a715397bdf4bff2a2f0d60642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShutdownInput</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ShutdownInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="341" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1adc32fbd7c39e44a314135bcf681999cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_InitScanTable</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_InitScanTable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="342" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5090ed125bc199b34a380ce5cceb367f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* Sys_GetScanTable</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetScanTable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="343" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_input.cpp" bodystart="744" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a0eb2c45a9f97554bac02abf267291972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char Sys_GetConsoleKey</definition>
        <argsstring>(bool shifted)</argsstring>
        <name>Sys_GetConsoleKey</name>
        <param>
          <type>bool</type>
          <declname>shifted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="344" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aeb32de60b3e514214bbd03de2e083836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char Sys_MapCharForKey</definition>
        <argsstring>(int key)</argsstring>
        <name>Sys_MapCharForKey</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="348" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ab94cfebb7554eef44f2cde9de84f74ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_PollKeyboardInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_PollKeyboardInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="351" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1acc16c016a5432b4e6071507de49a783a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ReturnKeyboardInputEvent</definition>
        <argsstring>(const int n, int &amp;ch, bool &amp;state)</argsstring>
        <name>Sys_ReturnKeyboardInputEvent</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="352" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a988ed695efc34e8260ccdbd195c999fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EndKeyboardInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EndKeyboardInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="353" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ab2384b248f76156dd6c2cb5f96e6790f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_PollMouseInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_PollMouseInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="356" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a94a6f9064f6b76dda15b6be6001f912e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ReturnMouseInputEvent</definition>
        <argsstring>(const int n, int &amp;action, int &amp;value)</argsstring>
        <name>Sys_ReturnMouseInputEvent</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="357" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1abd3b68499c7c9e9a91860d6967b7db2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EndMouseInputEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EndMouseInputEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="358" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1abcd59885d9773447520e7bfb18d56f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GrabMouseCursor</definition>
        <argsstring>(bool grabIt)</argsstring>
        <name>Sys_GrabMouseCursor</name>
        <param>
          <type>bool</type>
          <declname>grabIt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="363" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/dedicated.cpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a3651490e78358ac63ab428d6f0658980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShowWindow</definition>
        <argsstring>(bool show)</argsstring>
        <name>Sys_ShowWindow</name>
        <param>
          <type>bool</type>
          <declname>show</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="365" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="452" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1afa507eb6752adcff6084d7c2b1c06d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_IsWindowVisible</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_IsWindowVisible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="366" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="461" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a94c8a377555fda2f2d52d4047ad9e2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShowConsole</definition>
        <argsstring>(int visLevel, bool quitOnClose)</argsstring>
        <name>Sys_ShowConsole</name>
        <param>
          <type>int</type>
          <declname>visLevel</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quitOnClose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="367" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa84f938329dcfac4d14c1804cc89bfab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Mkdir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>Sys_Mkdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="370" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a62a5dc9d458a2a2b6df3e20ca7ed884a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ID_TIME_T</type>
        <definition>ID_TIME_T Sys_FileTimeStamp</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>Sys_FileTimeStamp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="371" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="433" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa6983b70ea8c3581209d3770cb1cbeb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_TimeStampToStr</definition>
        <argsstring>(ID_TIME_T timeStamp)</argsstring>
        <name>Sys_TimeStampToStr</name>
        <param>
          <type>ID_TIME_T</type>
          <declname>timeStamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="373" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/sys_local.cpp" bodystart="164" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1aa0165c9192fc63bcdf12a8ac2259ed8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultCDPath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultCDPath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="374" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a042b1c70df9ab85f80355e5afb56dedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultBasePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultBasePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="375" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="158" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a0ee02302c9ad08c25911a3af3a565729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultSavePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultSavePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="376" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a1b3d67203c74397f3d8a48b59fb0422d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_EXEPath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EXEPath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="377" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="132" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a841950e9a492f4b0be00ab33b52b5972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ListFiles</definition>
        <argsstring>(const char *directory, const char *extension, idList&lt; class idStr &gt; &amp;list)</argsstring>
        <name>Sys_ListFiles</name>
        <param>
          <type>const char *</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type><ref refid="classid_list" kindref="compound">idList</ref>&lt; class <ref refid="classid_str" kindref="compound">idStr</ref> &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="381" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="198" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a763307df029e6fc578256668e8652bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_SetFatalError</definition>
        <argsstring>(const char *error)</argsstring>
        <name>Sys_SetFatalError</name>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="384" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_signal.cpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1adbbc536942512450a87c4ada7dcd6dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DoPreferences</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DoPreferences</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="387" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/main.cpp" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5ea497bfcafbbb1c9a306a13fce2b035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_StringToNetAdr</definition>
        <argsstring>(const char *s, netadr_t *a, bool doDNSResolve)</argsstring>
        <name>Sys_StringToNetAdr</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structnetadr__t" kindref="compound">netadr_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doDNSResolve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="463" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_net.cpp" bodystart="171" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ab0b775fa9963789005f09c34392de3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_NetAdrToString</definition>
        <argsstring>(const netadr_t a)</argsstring>
        <name>Sys_NetAdrToString</name>
        <param>
          <type>const <ref refid="structnetadr__t" kindref="compound">netadr_t</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="464" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_net.cpp" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ae506c78469f3159dd6cc3070f67d5bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_IsLANAddress</definition>
        <argsstring>(const netadr_t a)</argsstring>
        <name>Sys_IsLANAddress</name>
        <param>
          <type>const <ref refid="structnetadr__t" kindref="compound">netadr_t</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="465" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_net.cpp" bodystart="208" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a195e0ca6bfc3913e2ff529b4a66afa0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_CompareNetAdrBase</definition>
        <argsstring>(const netadr_t a, const netadr_t b)</argsstring>
        <name>Sys_CompareNetAdrBase</name>
        <param>
          <type>const <ref refid="structnetadr__t" kindref="compound">netadr_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structnetadr__t" kindref="compound">netadr_t</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="466" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_net.cpp" bodystart="248" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a8048e3eb005af6213d8c617027c6a3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_InitNetworking</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_InitNetworking</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="468" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_net.cpp" bodystart="273" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a3a37f9c953b01fb00e4be45c659c4314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShutdownNetworking</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ShutdownNetworking</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="469" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_net.cpp" bodystart="724" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1ac0118c74dd1843c97312bec58d396fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_CreateThread</definition>
        <argsstring>(xthread_t function, void *parms, xthreadPriority priority, xthreadInfo &amp;info, const char *name, xthreadInfo *threads[MAX_THREADS], int *thread_count)</argsstring>
        <name>Sys_CreateThread</name>
        <param>
          <type>xthread_t</type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>xthreadPriority</type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> *</type>
          <declname>threads</declname>
          <array>[MAX_THREADS]</array>
        </param>
        <param>
          <type>int *</type>
          <declname>thread_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="498" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="93" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a7e9f31d078a6f29dd8dfe485e718878b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DestroyThread</definition>
        <argsstring>(xthreadInfo &amp;info)</argsstring>
        <name>Sys_DestroyThread</name>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="499" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="189" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a977405cdbd51123fc7e56a7a75633de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetThreadName</definition>
        <argsstring>(int *index=0)</argsstring>
        <name>Sys_GetThreadName</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="503" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="222" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a85fc9201bd8ce067ddd8d329d9b35f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EnterCriticalSection</definition>
        <argsstring>(int index=CRITICAL_SECTION_ZERO)</argsstring>
        <name>Sys_EnterCriticalSection</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>CRITICAL_SECTION_ZERO</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="514" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="61" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a5f0a85c0511802bf620975af24152c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_LeaveCriticalSection</definition>
        <argsstring>(int index=CRITICAL_SECTION_ZERO)</argsstring>
        <name>Sys_LeaveCriticalSection</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>CRITICAL_SECTION_ZERO</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="515" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a553a54a8dd1ef1ce54e702572b3c1b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_WaitForEvent</definition>
        <argsstring>(int index=TRIGGER_EVENT_ZERO)</argsstring>
        <name>Sys_WaitForEvent</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>TRIGGER_EVENT_ZERO</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="526" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="113" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a6caddf4795c68d68ab31644023621393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_TriggerEvent</definition>
        <argsstring>(int index=TRIGGER_EVENT_ZERO)</argsstring>
        <name>Sys_TriggerEvent</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>TRIGGER_EVENT_ZERO</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="527" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_threads.cpp" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1abb400c911d412483456ae87efc442496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_LoadOpenAL</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_LoadOpenAL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="575" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/linux/sound.cpp" bodystart="396" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="sys__public_8h_1a6f7d074824059f544869c9b6f8877a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FreeOpenAL</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_FreeOpenAL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h" line="576" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/posix/posix_main.cpp" bodystart="1053" bodyend="1053"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SYS_PUBLIC__</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SYS_PUBLIC__</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="33"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>Non-portable<sp/>system<sp/>services.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Win32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUILD_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;win-x86&quot;</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BUILD_OS_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CPUSTRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;x86&quot;</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CPU_EASYARGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__declspec(align(16))<sp/>x</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PACKED</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_alloca16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void<sp/>*)((((int)_alloca(<sp/>(x)+15<sp/>))<sp/>+<sp/>15)<sp/>&amp;<sp/>~15))</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\\&quot;</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;\\&apos;</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_INLINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__forceinline</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_STATIC_TEMPLATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertmem(<sp/>x,<sp/>y<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>_CrtIsValidPointer(<sp/>x,<sp/>y,<sp/>true<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mac<sp/>OSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MACOS_X)<sp/>||<sp/>defined(__APPLE__)</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUILD_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;MacOSX-universal&quot;</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BUILD_OS_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>__ppc__</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPUSTRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ppc&quot;</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPU_EASYARGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__i386__)</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPUSTRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;x86&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPU_EASYARGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>__attribute__<sp/>((aligned<sp/>(16)))</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__MWERKS__</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PACKED</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;alloca.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PACKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((packed))</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_alloca<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloca</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_alloca16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void<sp/>*)((((int)alloca(<sp/>(x)+15<sp/>))<sp/>+<sp/>15)<sp/>&amp;<sp/>~15))</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;/&quot;</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;/&apos;</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__cdecl</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_INLINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_STATIC_TEMPLATE</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertmem(<sp/>x,<sp/>y<sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__linux__</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__i386__</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BUILD_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;linux-x86&quot;</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BUILD_OS_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPUSTRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;x86&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPU_EASYARGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ppc__)</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BUILD_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;linux-ppc&quot;</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPUSTRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ppc&quot;</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CPU_EASYARGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_alloca<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloca</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_alloca16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void<sp/>*)((((int)alloca(<sp/>(x)+15<sp/>))<sp/>+<sp/>15)<sp/>&amp;<sp/>~15))</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN16(<sp/>x<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PACKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((packed))</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;/&quot;</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PATHSEPERATOR_CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;/&apos;</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__cdecl</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_INLINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_STATIC_TEMPLATE</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertmem(<sp/>x,<sp/>y<sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>id_attribute(x)<sp/>__attribute__(x)</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>id_attribute(x)<sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00000,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_UNSUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00001,<sp/><sp/></highlight><highlight class="comment">//<sp/>unsupported<sp/>(386/486)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_GENERIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00002,<sp/><sp/></highlight><highlight class="comment">//<sp/>unrecognized<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_INTEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00004,<sp/><sp/></highlight><highlight class="comment">//<sp/>Intel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_AMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00008,<sp/><sp/></highlight><highlight class="comment">//<sp/>AMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_MMX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00010,<sp/><sp/></highlight><highlight class="comment">//<sp/>Multi<sp/>Media<sp/>Extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_3DNOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00020,<sp/><sp/></highlight><highlight class="comment">//<sp/>3DNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_SSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00040,<sp/><sp/></highlight><highlight class="comment">//<sp/>Streaming<sp/>SIMD<sp/>Extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_SSE2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00080,<sp/><sp/></highlight><highlight class="comment">//<sp/>Streaming<sp/>SIMD<sp/>Extensions<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_SSE3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00100,<sp/><sp/></highlight><highlight class="comment">//<sp/>Streaming<sp/>SIMD<sp/>Extentions<sp/>3<sp/>aka<sp/>Prescott&apos;s<sp/>New<sp/>Instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_ALTIVEC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00200,<sp/><sp/></highlight><highlight class="comment">//<sp/>AltiVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_HTT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01000,<sp/><sp/></highlight><highlight class="comment">//<sp/>Hyper-Threading<sp/>Technology</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_CMOV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02000,<sp/><sp/></highlight><highlight class="comment">//<sp/>Conditional<sp/>Move<sp/>(CMOV)<sp/>and<sp/>fast<sp/>floating<sp/>point<sp/>comparison<sp/>(FCOMI)<sp/>instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_FTZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04000,<sp/><sp/></highlight><highlight class="comment">//<sp/>Flush-To-Zero<sp/>mode<sp/>(denormal<sp/>results<sp/>are<sp/>flushed<sp/>to<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>CPUID_DAZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08000<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Denormals-Are-Zero<sp/>mode<sp/>(denormal<sp/>source<sp/>operands<sp/>are<sp/>set<sp/>to<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}<sp/>cpuid_t;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_INVALID_OPERATION<sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_DENORMALIZED_OPERAND<sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_DIVIDE_BY_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_NUMERIC_OVERFLOW<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_NUMERIC_UNDERFLOW<sp/><sp/><sp/><sp/><sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_EXCEPTION_INEXACT_RESULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>32</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/>fpuExceptions_t;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_PRECISION_SINGLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_PRECISION_DOUBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_PRECISION_DOUBLE_EXTENDED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/>fpuPrecision_t;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_ROUNDING_TO_NEAREST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_ROUNDING_DOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_ROUNDING_UP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>FPU_ROUNDING_TO_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}<sp/>fpuRounding_t;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_SIDE,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_FORWARD,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_UP,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_ROLL,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_YAW,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>AXIS_PITCH,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>MAX_JOYSTICK_AXIS</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}<sp/>joystickAxis_t;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_NONE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evTime<sp/>is<sp/>still<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_KEY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evValue<sp/>is<sp/>a<sp/>key<sp/>code,<sp/>evValue2<sp/>is<sp/>the<sp/>down<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_CHAR,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evValue<sp/>is<sp/>an<sp/>ascii<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_MOUSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evValue<sp/>and<sp/>evValue2<sp/>are<sp/>reletive<sp/>signed<sp/>x<sp/>/<sp/>y<sp/>moves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_JOYSTICK_AXIS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evValue<sp/>is<sp/>an<sp/>axis<sp/>number<sp/>and<sp/>evValue2<sp/>is<sp/>the<sp/>current<sp/>state<sp/>(-127<sp/>to<sp/>127)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>SE_CONSOLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evPtr<sp/>is<sp/>a<sp/>char*,<sp/>from<sp/>typing<sp/>something<sp/>at<sp/>a<sp/>non-game<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/>sysEventType_t;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION1,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION2,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION3,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION4,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION5,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION6,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION7,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>M_ACTION8,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>M_DELTAX,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>M_DELTAY,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>M_DELTAZ</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/>sys_mEvents;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structsys_event__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys_event__s" kindref="compound">sysEvent_s</ref><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>sysEventType_t<sp/><sp/>evType;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evValue;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evValue2;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evPtrLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>of<sp/>data<sp/>pointed<sp/>to<sp/>by<sp/>evPtr,<sp/>for<sp/>journaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evPtr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>must<sp/>be<sp/>manually<sp/>freed<sp/>if<sp/>not<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">}<sp/><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="structsys_memory_stats__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_s</ref><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memoryLoad;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalPhysical;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availPhysical;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalPageFile;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availPageFile;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalVirtual;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availVirtual;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availExtendedVirtual;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}<sp/><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>address_t;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_list" kindref="compound">idList</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>Sys_ListFiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/>...);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Quit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_AlreadyRunning(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>isn&apos;t<sp/>journaled...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetClipboardData(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_SetClipboardData(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>go<sp/>to<sp/>the<sp/>various<sp/>text<sp/>consoles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>thread<sp/>safe<sp/>-<sp/>never<sp/>use<sp/>in<sp/>the<sp/>async<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...<sp/>)id_attribute((format(printf,1,2)));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>guaranteed<sp/>to<sp/>be<sp/>thread-safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)id_attribute((format(printf,1,2)));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugVPrintf(<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>decent<sp/>minimum<sp/>sleep<sp/>time<sp/>to<sp/>avoid<sp/>going<sp/>below<sp/>the<sp/>process<sp/>scheduler<sp/>speeds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_MINSLEEP<sp/><sp/><sp/><sp/>20</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allow<sp/>game<sp/>to<sp/>yield<sp/>CPU<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>due<sp/>to<sp/>SYS_MINSLEEP<sp/>this<sp/>is<sp/>very<sp/>bad<sp/>portability<sp/>karma,<sp/>and<sp/>should<sp/>be<sp/>completely<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Sleep(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msec<sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sys_Milliseconds<sp/>should<sp/>only<sp/>be<sp/>used<sp/>for<sp/>profiling<sp/>purposes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>game<sp/>related<sp/>timing<sp/>information<sp/>should<sp/>come<sp/>from<sp/>event<sp/>timestamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Milliseconds(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>accurate<sp/>performance<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetClockTicks(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ClockTicksPerSecond(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>selection<sp/>of<sp/>the<sp/>CPUID_*<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">cpuid_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetProcessorId(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_GetProcessorString(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>FPU<sp/>stack<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_StackIsEmpty(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>empties<sp/>the<sp/>FPU<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_ClearStack(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>FPU<sp/>state<sp/>as<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_FPU_GetState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enables<sp/>the<sp/>given<sp/>FPU<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_EnableExceptions(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exceptions<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>the<sp/>FPU<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_SetPrecision(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>the<sp/>FPU<sp/>rounding<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_SetRounding(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rounding<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>Flush-To-Zero<sp/>mode<sp/>(only<sp/>available<sp/>when<sp/>CPUID_FTZ<sp/>is<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_SetFTZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>Denormals-Are-Zero<sp/>mode<sp/>(only<sp/>available<sp/>when<sp/>CPUID_DAZ<sp/>is<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_SetDAZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>amount<sp/>of<sp/>system<sp/>ram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetSystemRam(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>amount<sp/>of<sp/>video<sp/>ram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetVideoRam(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>amount<sp/>of<sp/>drive<sp/>space<sp/>in<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetDriveFreeSpace(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>memory<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetCurrentMemoryStatus(<sp/><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref><sp/>&amp;stats<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetExeLaunchMemoryStatus(<sp/><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref><sp/>&amp;stats<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lock<sp/>and<sp/>unlock<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_LockMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_UnlockMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>amount<sp/>of<sp/>physical<sp/>work<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_SetPhysicalWorkMemory(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minBytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxBytes<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>retrieving<sp/>the<sp/>call<sp/>stack<sp/>at<sp/>execution<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetCallStack(<sp/>address_t<sp/>*callStack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callStackSize<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_GetCallStackStr(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>address_t<sp/>*callStack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callStackSize<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_GetCallStackCurStr(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_GetCallStackCurAddressStr(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShutdownSymbols(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DLL<sp/>loading,<sp/>the<sp/>path<sp/>should<sp/>be<sp/>a<sp/>fully<sp/>qualified<sp/>OS<sp/>path<sp/>to<sp/>the<sp/>DLL<sp/>file<sp/>to<sp/>be<sp/>loaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DLL_Load(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dllName<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DLL_GetProcAddress(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*procName<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DLL_Unload(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle<sp/>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>event<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GenerateEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetEvent(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ClearEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>tied<sp/>to<sp/>windows,<sp/>so<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>started<sp/>up<sp/>and<sp/>shut<sp/>down<sp/>whenever<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>main<sp/>window<sp/>is<sp/>recreated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_InitInput(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShutdownInput(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_InitScanTable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_GetScanTable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>Sys_GetConsoleKey(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shifted<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map<sp/>a<sp/>scancode<sp/>key<sp/>to<sp/>a<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>does<sp/>nothing<sp/>on<sp/>win32,<sp/>as<sp/>SE_KEY<sp/>==<sp/>SE_CHAR<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>other<sp/>OSes,<sp/>consider<sp/>the<sp/>keyboard<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>Sys_MapCharForKey(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>keyboard<sp/>input<sp/>polling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_PollKeyboardInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ReturnKeyboardInputEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;ch,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;state<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_EndKeyboardInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mouse<sp/>input<sp/>polling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_PollMouseInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ReturnMouseInputEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_EndMouseInputEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>console<sp/>is<sp/>down,<sp/>or<sp/>the<sp/>game<sp/>is<sp/>about<sp/>to<sp/>perform<sp/>a<sp/>lengthy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operation<sp/>like<sp/>map<sp/>loading,<sp/>the<sp/>system<sp/>can<sp/>release<sp/>the<sp/>mouse<sp/>cursor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>in<sp/>windowed<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GrabMouseCursor(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grabIt<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowWindow(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_IsWindowVisible(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>visLevel,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quitOnClose<sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Mkdir(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">ID_TIME_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FileTimeStamp(<sp/>FILE<sp/>*fp<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>do<sp/>we<sp/>need<sp/>to<sp/>guarantee<sp/>the<sp/>same<sp/>output<sp/>on<sp/>all<sp/>platforms?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_TimeStampToStr(<sp/>ID_TIME_T<sp/>timeStamp<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_DefaultCDPath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_DefaultBasePath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_DefaultSavePath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_EXEPath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>fs_debug<sp/>to<sp/>verbose<sp/>Sys_ListFiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>-1<sp/>if<sp/>directory<sp/>was<sp/>not<sp/>found<sp/>(the<sp/>list<sp/>is<sp/>cleared)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ListFiles(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*directory,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/><ref refid="classid_list" kindref="compound">idList&lt;class idStr&gt;</ref><sp/>&amp;list<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>know<sp/>early<sp/>if<sp/>we<sp/>are<sp/>performing<sp/>a<sp/>fatal<sp/>error<sp/>shutdown<sp/>so<sp/>the<sp/>error<sp/>message<sp/>doesn&apos;t<sp/>get<sp/>lost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_SetFatalError(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>display<sp/>perference<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DoPreferences(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="390"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/>Networking</highlight></codeline>
<codeline lineno="393"><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="395"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>NA_BAD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>address<sp/>lookup<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>NA_LOOPBACK,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>NA_BROADCAST,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>NA_IP</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}<sp/>netadrtype_t;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="structnetadr__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>netadrtype_t<sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>ip[4];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>port;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PORT_ANY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classid_port" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_port" kindref="compound">idPort</ref><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_port" kindref="compound">idPort</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>just<sp/>zeros<sp/>netSocket<sp/>and<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>~<ref refid="classid_port" kindref="compound">idPort</ref>();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>InitForPort<sp/>fails,<sp/>the<sp/>idPort.port<sp/>field<sp/>will<sp/>remain<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitForPort(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portNumber<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPort(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound_to.port;<sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>GetAdr(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound_to;<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Close();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPacket(<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>&amp;from,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPacketBlocking(<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>&amp;from,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendPacket(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packetsRead;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesRead;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packetsWritten;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesWritten;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>bound_to;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interface<sp/>and<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>netSocket;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>specific<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="classid_t_c_p" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_t_c_p" kindref="compound">idTCP</ref><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_t_c_p" kindref="compound">idTCP</ref>();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>~<ref refid="classid_t_c_p" kindref="compound">idTCP</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>host<sp/>is<sp/>host:port,<sp/>the<sp/>value<sp/>of<sp/>port<sp/>is<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Init(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*host,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port<sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Close();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>-1<sp/>on<sp/>failure<sp/>(and<sp/>closes<sp/>socket)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>those<sp/>are<sp/>non<sp/>blocking,<sp/>can<sp/>be<sp/>used<sp/>for<sp/>polling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>buffering,<sp/>you<sp/>are<sp/>not<sp/>guaranteed<sp/>to<sp/>Read<sp/>or<sp/>Write<sp/>everything<sp/>in<sp/>a<sp/>single<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(specially<sp/>on<sp/>win32,<sp/>see<sp/>recv<sp/>and<sp/>send<sp/>documentation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Write(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>address;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>specific<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">};</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>the<sp/>port<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>also<sp/>do<sp/>DNS<sp/>resolve<sp/>if<sp/>you<sp/>ask<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>DNS<sp/>resolve<sp/>is<sp/>a<sp/>slow/blocking<sp/>call,<sp/>think<sp/>before<sp/>you<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(<sp/>could<sp/>be<sp/>exploited<sp/>for<sp/>server<sp/>DoS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_StringToNetAdr(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doDNSResolve<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>Sys_NetAdrToString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>a<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_IsLANAddress(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>a<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_CompareNetAdrBase(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>b<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_InitNetworking(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShutdownNetworking(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="473"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/>Multi-threading</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="478"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*xthread_t)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>THREAD_NORMAL,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>THREAD_ABOVE_NORMAL,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>THREAD_HIGHEST</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/>xthreadPriority;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="structxthread_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>name;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadHandle;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>threadId;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_THREADS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>*g_threads[MAX_THREADS];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_thread_count;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_CreateThread(<sp/>xthread_t<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parms,<sp/>xthreadPriority<sp/>priority,<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>&amp;info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>*threads[MAX_THREADS],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*thread_count<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DestroyThread(<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref>&amp;<sp/>info<sp/>);<sp/></highlight><highlight class="comment">//<sp/>sets<sp/>threadHandle<sp/>back<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>name<sp/>of<sp/>the<sp/>calling<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>index<sp/>!=<sp/>NULL,<sp/>set<sp/>the<sp/>index<sp/>in<sp/>g_threads<sp/>array<sp/>(use<sp/>-1<sp/>for<sp/>&quot;main&quot;<sp/>thread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GetThreadName(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_CRITICAL_SECTIONS<sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>CRITICAL_SECTION_ZERO<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>CRITICAL_SECTION_ONE,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>CRITICAL_SECTION_TWO,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>CRITICAL_SECTION_THREE</highlight></codeline>
<codeline lineno="512"><highlight class="normal">};</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_EnterCriticalSection(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>CRITICAL_SECTION_ZERO<sp/>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_LeaveCriticalSection(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>CRITICAL_SECTION_ZERO<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_TRIGGER_EVENTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>TRIGGER_EVENT_ZERO<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>TRIGGER_EVENT_ONE,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>TRIGGER_EVENT_TWO,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>TRIGGER_EVENT_THREE</highlight></codeline>
<codeline lineno="524"><highlight class="normal">};</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_WaitForEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>TRIGGER_EVENT_ZERO<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_TriggerEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>TRIGGER_EVENT_ZERO<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="530"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/>idSys</highlight></codeline>
<codeline lineno="533"><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">==============================================================</highlight></codeline>
<codeline lineno="535"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="classid_sys" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_sys" kindref="compound">idSys</ref><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrintf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)id_attribute((format(printf,2,3)))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugVPrintf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>arg<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetClockTicks(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClockTicksPerSecond(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>cpuid_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetProcessorId(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>GetProcessorString(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>FPU_GetState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPU_StackIsEmpty(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPU_SetFTZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPU_SetDAZ(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPU_EnableExceptions(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exceptions<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnlockMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCallStack(<sp/>address_t<sp/>*callStack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callStackSize<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>GetCallStackStr(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>address_t<sp/>*callStack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callStackSize<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>GetCallStackCurStr(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShutdownSymbols(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLL_Load(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dllName<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLL_GetProcAddress(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*procName<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLL_Unload(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLL_GetFileName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dllName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxLength<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>GenerateMouseButtonEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>button,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>down<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>GenerateMouseMoveEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltay<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OpenURL(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quit<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartProcess(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exePath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quit<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classid_sys" kindref="compound">idSys</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sys_LoadOpenAL(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FreeOpenAL(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__SYS_PUBLIC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sys/sys_public.h"/>
  </compounddef>
</doxygen>
