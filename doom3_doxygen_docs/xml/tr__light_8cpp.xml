<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="tr__light_8cpp" kind="file">
    <compoundname>tr_light.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="tr__light_8cpp_1a5cd5f136abcad3cc21e9c8dc5e15b764" prot="public" static="yes" mutable="no">
        <type>const float</type>
        <definition>const float CHECK_BOUNDS_EPSILON</definition>
        <argsstring></argsstring>
        <name>CHECK_BOUNDS_EPSILON</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="34" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tr__light_8cpp_1a14de0a3e08b30e2c8fe21a39b8aae3d1" prot="public" static="yes" mutable="no">
        <type>const float</type>
        <definition>const float INSIDE_LIGHT_FRUSTUM_SLOP</definition>
        <argsstring></argsstring>
        <name>INSIDE_LIGHT_FRUSTUM_SLOP</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="417" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tr__light_8cpp_1a9a8cd6170618cd8026af694240e17354" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int c_clippedLight</definition>
        <argsstring></argsstring>
        <name>c_clippedLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="791" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tr__light_8cpp_1a4a1b3655ac56e760b34b193294581396" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int c_unclippedLight</definition>
        <argsstring></argsstring>
        <name>c_unclippedLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="791" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="791" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tr__light_8cpp_1a9bebe995c7b0ef8da13a4d3a5f12b9c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_CreateAmbientCache</definition>
        <argsstring>(srfTriangles_t *tri, bool needsLighting)</argsstring>
        <name>R_CreateAmbientCache</name>
        <param>
          <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>needsLighting</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="52" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a655d9328935fe233e5aa1093102ebcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_CreateLightingCache</definition>
        <argsstring>(const idRenderEntityLocal *ent, const idRenderLightLocal *light, srfTriangles_t *tri)</argsstring>
        <name>R_CreateLightingCache</name>
        <param>
          <type>const <ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const <ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="75" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1aa5bce128f2517da4b5d76658b4c67cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_CreatePrivateShadowCache</definition>
        <argsstring>(srfTriangles_t *tri)</argsstring>
        <name>R_CreatePrivateShadowCache</name>
        <param>
          <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="140" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1af1367427b50f21c357867a24165600f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_CreateVertexProgramShadowCache</definition>
        <argsstring>(srfTriangles_t *tri)</argsstring>
        <name>R_CreateVertexProgramShadowCache</name>
        <param>
          <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="156" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="156" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a65edad8c8231be305690717d49fef3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SkyboxTexGen</definition>
        <argsstring>(drawSurf_t *surf, const idVec3 &amp;viewOrg)</argsstring>
        <name>R_SkyboxTexGen</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>viewOrg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="193" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="193" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a4ac34c98ccd5323851ee039d9e131b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_WobbleskyTexGen</definition>
        <argsstring>(drawSurf_t *surf, const idVec3 &amp;viewOrg)</argsstring>
        <name>R_WobbleskyTexGen</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>viewOrg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="218" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="218" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a39f9574f5c96793d197fed5f4267f5c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_SpecularTexGen</definition>
        <argsstring>(drawSurf_t *surf, const idVec3 &amp;globalLightOrigin, const idVec3 &amp;viewOrg)</argsstring>
        <name>R_SpecularTexGen</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>globalLightOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>viewOrg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="302" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="302" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a30804fe99d3f8c4daa5d4a9b06ae2433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref> *</type>
        <definition>viewEntity_t* R_SetEntityDefViewEntity</definition>
        <argsstring>(idRenderEntityLocal *def)</argsstring>
        <name>R_SetEntityDefViewEntity</name>
        <param>
          <type><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref> *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="378" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="378" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1af825c1e3b034d495bcc77f5284fc76e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool R_TestPointInViewLight</definition>
        <argsstring>(const idVec3 &amp;org, const idRenderLightLocal *light)</argsstring>
        <name>R_TestPointInViewLight</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>org</declname>
        </param>
        <param>
          <type>const <ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref> *</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="419" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="419" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a99869555a375c2df6fc0c8363dbe5c74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool R_PointInFrustum</definition>
        <argsstring>(idVec3 &amp;p, idPlane *planes, int numPlanes)</argsstring>
        <name>R_PointInFrustum</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPlanes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="440" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="440" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1ae5a65b0202e7db1ea243ff278b8646ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structview_light__s" kindref="compound">viewLight_t</ref> *</type>
        <definition>viewLight_t* R_SetLightDefViewLight</definition>
        <argsstring>(idRenderLightLocal *light)</argsstring>
        <name>R_SetLightDefViewLight</name>
        <param>
          <type><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref> *</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="458" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="458" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a3d01032a7b535606f06557ef07ce9fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_LinkLightSurf</definition>
        <argsstring>(const drawSurf_t **link, const srfTriangles_t *tri, const viewEntity_t *space, const idRenderLightLocal *light, const idMaterial *shader, const idScreenRect &amp;scissor, bool viewInsideShadow)</argsstring>
        <name>R_LinkLightSurf</name>
        <param>
          <type>const <ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> **</type>
          <declname>link</declname>
        </param>
        <param>
          <type>const <ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type>const <ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref> *</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref> *</type>
          <declname>light</declname>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>const <ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref> &amp;</type>
          <declname>scissor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>viewInsideShadow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="658" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="658" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a271add14a0352da241ade3514ec537f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
        <definition>idScreenRect R_ClippedLightScissorRectangle</definition>
        <argsstring>(viewLight_t *vLight)</argsstring>
        <name>R_ClippedLightScissorRectangle</name>
        <param>
          <type><ref refid="structview_light__s" kindref="compound">viewLight_t</ref> *</type>
          <declname>vLight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="713" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="713" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a0398a88c3ca3b43419145d42cebf555b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
        <definition>idScreenRect R_CalcLightScissorRectangle</definition>
        <argsstring>(viewLight_t *vLight)</argsstring>
        <name>R_CalcLightScissorRectangle</name>
        <param>
          <type><ref refid="structview_light__s" kindref="compound">viewLight_t</ref> *</type>
          <declname>vLight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="793" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="793" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a6e1ec6c9cf7f069a71c4ed4e082d331c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_AddLightSurfaces</definition>
        <argsstring>(void)</argsstring>
        <name>R_AddLightSurfaces</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="875" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="875" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1abcb64bc194c1d04b7bf54ab2c867d3ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_IssueEntityDefCallback</definition>
        <argsstring>(idRenderEntityLocal *def)</argsstring>
        <name>R_IssueEntityDefCallback</name>
        <param>
          <type><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref> *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1060" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1060" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a0bb56df5c6c3903181c56bc4a6191347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_render_model" kindref="compound">idRenderModel</ref> *</type>
        <definition>idRenderModel* R_EntityDefDynamicModel</definition>
        <argsstring>(idRenderEntityLocal *def)</argsstring>
        <name>R_EntityDefDynamicModel</name>
        <param>
          <type><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref> *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1104" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1104" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1ae9c5622e9e9179c07bb2bbdd70b3dc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_AddDrawSurf</definition>
        <argsstring>(const srfTriangles_t *tri, const viewEntity_t *space, const renderEntity_t *renderEntity, const idMaterial *shader, const idScreenRect &amp;scissor)</argsstring>
        <name>R_AddDrawSurf</name>
        <param>
          <type>const <ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type>const <ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref> *</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="structrender_entity__s" kindref="compound">renderEntity_t</ref> *</type>
          <declname>renderEntity</declname>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>const <ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref> &amp;</type>
          <declname>scissor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1183" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1183" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1adda2cf3515b9a95bfaec2013aab58b37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_AddAmbientDrawsurfs</definition>
        <argsstring>(viewEntity_t *vEntity)</argsstring>
        <name>R_AddAmbientDrawsurfs</name>
        <param>
          <type><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref> *</type>
          <declname>vEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1335" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1aae4c8067517400a021720a96d4b1acc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
        <definition>idScreenRect R_CalcEntityScissorRectangle</definition>
        <argsstring>(viewEntity_t *vEntity)</argsstring>
        <name>R_CalcEntityScissorRectangle</name>
        <param>
          <type><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref> *</type>
          <declname>vEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1440" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1440" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a04b21958329b44ecad58d52cfd9f3ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_AddModelSurfaces</definition>
        <argsstring>(void)</argsstring>
        <name>R_AddModelSurfaces</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1460" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1460" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="tr__light_8cpp_1a9265ca24f11fe4bf2d9141ddd0af83ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_RemoveUnecessaryViewLights</definition>
        <argsstring>(void)</argsstring>
        <name>R_RemoveUnecessaryViewLights</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" line="1570" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp" bodystart="1570" bodyend="1619"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CHECK_BOUNDS_EPSILON<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment">===========================================================================================</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">VERTEX<sp/>CACHE<sp/>GENERATORS</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">===========================================================================================</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="47"><highlight class="comment">R_CreateAmbientCache</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">Create<sp/>it<sp/>if<sp/>needed</highlight></codeline>
<codeline lineno="50"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="51"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_CreateAmbientCache(<sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needsLighting<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;ambientCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>going<sp/>to<sp/>use<sp/>it<sp/>for<sp/>drawing,<sp/>so<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>the<sp/>tangents<sp/>and<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>needsLighting<sp/>&amp;&amp;<sp/>!tri-&gt;tangentsCalculated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_DeriveTangents(<sp/>tri<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>tri-&gt;verts,<sp/>tri-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tri-&gt;verts[0]<sp/>),<sp/>&amp;tri-&gt;ambientCache<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;ambientCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="69"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="70"><highlight class="comment">R_CreateLightingCache</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">Returns<sp/>false<sp/>if<sp/>the<sp/>cache<sp/>couldn&apos;t<sp/>be<sp/>allocated,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>surface<sp/>should<sp/>be<sp/>skipped.</highlight></codeline>
<codeline lineno="73"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_CreateLightingCache(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light,<sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>localLightOrigin;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fogs<sp/>and<sp/>blends<sp/>don&apos;t<sp/>need<sp/>light<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;lightShader-&gt;IsFogLight()<sp/>||<sp/>light-&gt;lightShader-&gt;IsBlendLight()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>needed<sp/>if<sp/>we<sp/>have<sp/>vertex<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.backEndRendererHasVertexPrograms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>ent-&gt;modelMatrix,<sp/>light-&gt;globalLightOrigin,<sp/>localLightOrigin<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>tri-&gt;ambientSurface-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structlighting_cache__s" kindref="compound">lightingCache_t</ref><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlighting_cache__s" kindref="compound">lightingCache_t</ref><sp/>*cache<sp/>=<sp/>(<ref refid="structlighting_cache__s" kindref="compound">lightingCache_t</ref><sp/>*)_alloca16(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;CreateTextureSpaceLightVectors(<sp/>&amp;cache[0].localLightVector,<sp/>localLightOrigin,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tri-&gt;ambientSurface-&gt;verts,<sp/>tri-&gt;ambientSurface-&gt;numVerts,<sp/>tri-&gt;indexes,<sp/>tri-&gt;numIndexes<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*used<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)_alloca16(<sp/>tri-&gt;ambientSurface-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>used[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>used,<sp/>0,<sp/>tri-&gt;ambientSurface-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>used[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>interaction<sp/>may<sp/>be<sp/>a<sp/>very<sp/>small<sp/>subset<sp/>of<sp/>the<sp/>full<sp/>surface,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sense<sp/>to<sp/>only<sp/>deal<sp/>with<sp/>the<sp/>verts<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>tri-&gt;numIndexes;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tri-&gt;indexes[j];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>used[i]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>lightDir;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*v;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;tri-&gt;ambientSurface-&gt;verts[i];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightDir<sp/>=<sp/>localLightOrigin<sp/>-<sp/>v-&gt;xyz;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[i].localLightVector[0]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;tangents[0];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[i].localLightVector[1]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;tangents[1];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[i].localLightVector[2]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;normal;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>cache,<sp/>size,<sp/>&amp;tri-&gt;lightingCache<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;lightingCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="135"><highlight class="comment">R_CreatePrivateShadowCache</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">This<sp/>is<sp/>used<sp/>only<sp/>for<sp/>a<sp/>specific<sp/>light</highlight></codeline>
<codeline lineno="138"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="139"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_CreatePrivateShadowCache(<sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;shadowVertexes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>tri-&gt;shadowVertexes,<sp/>tri-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*tri-&gt;shadowVertexes<sp/>),<sp/>&amp;tri-&gt;shadowCache<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="150"><highlight class="comment">R_CreateVertexProgramShadowCache</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment">This<sp/>is<sp/>constant<sp/>for<sp/>any<sp/>number<sp/>of<sp/>lights,<sp/>the<sp/>vertex<sp/>program</highlight></codeline>
<codeline lineno="153"><highlight class="comment">takes<sp/>care<sp/>of<sp/>projecting<sp/>the<sp/>verts<sp/>to<sp/>infinity.</highlight></codeline>
<codeline lineno="154"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="155"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_CreateVertexProgramShadowCache(<sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;verts<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structshadow_cache__s" kindref="compound">shadowCache_t</ref><sp/>*temp<sp/>=<sp/>(<ref refid="structshadow_cache__s" kindref="compound">shadowCache_t</ref><sp/>*)_alloca16(<sp/>tri-&gt;numVerts<sp/>*<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshadow_cache__s" kindref="compound">shadowCache_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;CreateVertexProgramShadowCache(<sp/>&amp;temp-&gt;xyz,<sp/>tri-&gt;verts,<sp/>tri-&gt;numVerts<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVerts<sp/>=<sp/>tri-&gt;numVerts;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*verts<sp/>=<sp/>tri-&gt;verts;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVerts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v<sp/>=<sp/>verts[i].xyz.ToFloatPtr();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+0].xyz[0]<sp/>=<sp/>v[0];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+1].xyz[0]<sp/>=<sp/>v[0];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+0].xyz[1]<sp/>=<sp/>v[1];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+1].xyz[1]<sp/>=<sp/>v[1];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+0].xyz[2]<sp/>=<sp/>v[2];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+1].xyz[2]<sp/>=<sp/>v[2];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+0].xyz[3]<sp/>=<sp/>1.0f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>model<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i*2+1].xyz[3]<sp/>=<sp/>0.0f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>projected<sp/>to<sp/>infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>temp,<sp/>tri-&gt;numVerts<sp/>*<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshadow_cache__s" kindref="compound">shadowCache_t</ref><sp/>),<sp/>&amp;tri-&gt;shadowCache<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="190"><highlight class="comment">R_SkyboxTexGen</highlight></codeline>
<codeline lineno="191"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SkyboxTexGen(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;viewOrg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>localViewOrigin;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>surf-&gt;space-&gt;modelMatrix,<sp/>viewOrg,<sp/>localViewOrigin<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVerts<sp/>=<sp/>surf-&gt;geo-&gt;numVerts;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*texCoords<sp/>=<sp/>(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*)<sp/>_alloca16(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*verts<sp/>=<sp/>surf-&gt;geo-&gt;verts;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVerts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][0]<sp/>=<sp/>verts[i].xyz[0]<sp/>-<sp/>localViewOrigin[0];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][1]<sp/>=<sp/>verts[i].xyz[1]<sp/>-<sp/>localViewOrigin[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][2]<sp/>=<sp/>verts[i].xyz[2]<sp/>-<sp/>localViewOrigin[2];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>surf-&gt;dynamicTexCoords<sp/>=<sp/>vertexCache.AllocFrameTemp(<sp/>texCoords,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="214"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="215"><highlight class="comment">R_WobbleskyTexGen</highlight></codeline>
<codeline lineno="216"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="217"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_WobbleskyTexGen(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;viewOrg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>localViewOrigin;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*parms<sp/>=<sp/>surf-&gt;material-&gt;GetTexGenRegisters();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>wobbleDegrees<sp/>=<sp/>surf-&gt;shaderRegisters[<sp/>parms[0]<sp/>];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>wobbleSpeed<sp/>=<sp/>surf-&gt;shaderRegisters[<sp/>parms[1]<sp/>];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>rotateSpeed<sp/>=<sp/>surf-&gt;shaderRegisters[<sp/>parms[2]<sp/>];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>wobbleDegrees<sp/>=<sp/>wobbleDegrees<sp/>*<sp/>idMath::PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>wobbleSpeed<sp/>=<sp/>wobbleSpeed<sp/>*<sp/>2<sp/>*<sp/>idMath::PI<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>rotateSpeed<sp/>=<sp/>rotateSpeed<sp/>*<sp/>2<sp/>*<sp/>idMath::PI<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>ad-hoc<sp/>&quot;wobble&quot;<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>transform[16];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>tr.viewDef-&gt;floatTime<sp/>*<sp/>wobbleSpeed;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>sin(<sp/>a<sp/>)<sp/>*<sp/>sin(<sp/>wobbleDegrees<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>cos(<sp/>a<sp/>)<sp/>*<sp/>sin(<sp/>wobbleDegrees<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>cos(<sp/>wobbleDegrees<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>axis[3];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][0]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][1]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][2]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][0]<sp/>=<sp/>-sin(<sp/>a<sp/>*<sp/>2<sp/>)<sp/>*<sp/>sin(<sp/>wobbleDegrees<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][2]<sp/>=<sp/>-s<sp/>*<sp/>sin(<sp/>wobbleDegrees<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][1]<sp/>=<sp/>sqrt(<sp/>1.0f<sp/>-<sp/>(<sp/>axis[1][0]<sp/>*<sp/>axis[1][0]<sp/>+<sp/>axis[1][2]<sp/>*<sp/>axis[1][2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>second<sp/>vector<sp/>exactly<sp/>perpendicular<sp/>to<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1]<sp/>-=<sp/>(<sp/>axis[2]<sp/>*<sp/>axis[1]<sp/>)<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1].Normalize();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>third<sp/>with<sp/>a<sp/>cross</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0].Cross(<sp/>axis[1],<sp/>axis[2]<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>rotate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sin(<sp/>rotateSpeed<sp/>*<sp/>tr.viewDef-&gt;floatTime<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>cos(<sp/>rotateSpeed<sp/>*<sp/>tr.viewDef-&gt;floatTime<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[0]<sp/>=<sp/>axis[0][0]<sp/>*<sp/>c<sp/>+<sp/>axis[1][0]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[4]<sp/>=<sp/>axis[0][1]<sp/>*<sp/>c<sp/>+<sp/>axis[1][1]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[8]<sp/>=<sp/>axis[0][2]<sp/>*<sp/>c<sp/>+<sp/>axis[1][2]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[1]<sp/>=<sp/>axis[1][0]<sp/>*<sp/>c<sp/>-<sp/>axis[0][0]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[5]<sp/>=<sp/>axis[1][1]<sp/>*<sp/>c<sp/>-<sp/>axis[0][1]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[9]<sp/>=<sp/>axis[1][2]<sp/>*<sp/>c<sp/>-<sp/>axis[0][2]<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[2]<sp/>=<sp/>axis[2][0];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[6]<sp/>=<sp/>axis[2][1];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[10]<sp/>=<sp/>axis[2][2];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[3]<sp/>=<sp/>transform[7]<sp/>=<sp/>transform[11]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>transform[12]<sp/>=<sp/>transform[13]<sp/>=<sp/>transform[14]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>surf-&gt;space-&gt;modelMatrix,<sp/>viewOrg,<sp/>localViewOrigin<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVerts<sp/>=<sp/>surf-&gt;geo-&gt;numVerts;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*texCoords<sp/>=<sp/>(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*)<sp/>_alloca16(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*verts<sp/>=<sp/>surf-&gt;geo-&gt;verts;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numVerts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>verts[i].xyz[0]<sp/>-<sp/>localViewOrigin[0];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[1]<sp/>=<sp/>verts[i].xyz[1]<sp/>-<sp/>localViewOrigin[1];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[2]<sp/>=<sp/>verts[i].xyz[2]<sp/>-<sp/>localViewOrigin[2];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>transform,<sp/>v,<sp/>texCoords[i]<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>surf-&gt;dynamicTexCoords<sp/>=<sp/>vertexCache.AllocFrameTemp(<sp/>texCoords,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="296"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="297"><highlight class="comment">R_SpecularTexGen</highlight></codeline>
<codeline lineno="298"><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment">Calculates<sp/>the<sp/>specular<sp/>coordinates<sp/>for<sp/>cards<sp/>without<sp/>vertex<sp/>programs.</highlight></codeline>
<codeline lineno="300"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="301"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SpecularTexGen(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;globalLightOrigin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;viewOrg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>localLightOrigin;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>localViewOrigin;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>surf-&gt;space-&gt;modelMatrix,<sp/>globalLightOrigin,<sp/>localLightOrigin<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>surf-&gt;space-&gt;modelMatrix,<sp/>viewOrg,<sp/>localViewOrigin<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>tri<sp/>=<sp/>surf-&gt;geo;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>change<sp/>to<sp/>3<sp/>component?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>tri-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>*texCoords<sp/>=<sp/>(<ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>*)<sp/>_alloca16(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;CreateSpecularTextureCoords(<sp/>texCoords,<sp/>localLightOrigin,<sp/>localViewOrigin,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tri-&gt;verts,<sp/>tri-&gt;numVerts,<sp/>tri-&gt;indexes,<sp/>tri-&gt;numIndexes<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*used<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)_alloca16(<sp/>tri-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>used[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>used,<sp/>0,<sp/>tri-&gt;numVerts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>used[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>interaction<sp/>may<sp/>be<sp/>a<sp/>very<sp/>small<sp/>subset<sp/>of<sp/>the<sp/>full<sp/>surface,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sense<sp/>to<sp/>only<sp/>deal<sp/>with<sp/>the<sp/>verts<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>tri-&gt;numIndexes;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tri-&gt;indexes[j];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>used[i]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ilength;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*v<sp/>=<sp/>&amp;tri-&gt;verts[i];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>lightDir<sp/>=<sp/>localLightOrigin<sp/>-<sp/>v-&gt;xyz;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>viewDir<sp/>=<sp/>localViewOrigin<sp/>-<sp/>v-&gt;xyz;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilength<sp/>=<sp/>idMath::RSqrt(<sp/>lightDir<sp/>*<sp/>lightDir<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightDir[0]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightDir[1]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightDir[2]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilength<sp/>=<sp/>idMath::RSqrt(<sp/>viewDir<sp/>*<sp/>viewDir<sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewDir[0]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewDir[1]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewDir[2]<sp/>*=<sp/>ilength;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightDir<sp/>+=<sp/>viewDir;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][0]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;tangents[0];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][1]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;tangents[1];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][2]<sp/>=<sp/>lightDir<sp/>*<sp/>v-&gt;normal;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoords[i][3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>surf-&gt;dynamicTexCoords<sp/>=<sp/>vertexCache.AllocFrameTemp(<sp/>texCoords,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//=======================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="369"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="370"><highlight class="comment">R_SetEntityDefViewEntity</highlight></codeline>
<codeline lineno="371"><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">If<sp/>the<sp/>entityDef<sp/>isn&apos;t<sp/>already<sp/>on<sp/>the<sp/>viewEntity<sp/>list,<sp/>create</highlight></codeline>
<codeline lineno="373"><highlight class="comment">a<sp/>viewEntity<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>list<sp/>with<sp/>an<sp/>empty<sp/>scissor<sp/>rect.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">This<sp/>does<sp/>not<sp/>instantiate<sp/>dynamic<sp/>models<sp/>for<sp/>the<sp/>entity<sp/>yet.</highlight></codeline>
<codeline lineno="376"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="377"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*R_SetEntityDefViewEntity(<sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*vModel;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;viewCount<sp/>==<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def-&gt;viewEntity;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>def-&gt;viewCount<sp/>=<sp/>tr.viewCount;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>model<sp/>and<sp/>modelview<sp/>matricies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>vModel<sp/>=<sp/>(<ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*)R_ClearedFrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*vModel<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>vModel-&gt;entityDef<sp/>=<sp/>def;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scissorRect<sp/>will<sp/>be<sp/>expanded<sp/>as<sp/>the<sp/>model<sp/>bounds<sp/>is<sp/>accepted<sp/>into<sp/>visible<sp/>portal<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>vModel-&gt;scissorRect.Clear();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>model<sp/>and<sp/>weapon<sp/>depth<sp/>hack<sp/>for<sp/>back-end<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>vModel-&gt;modelDepthHack<sp/>=<sp/>def-&gt;parms.modelDepthHack;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>vModel-&gt;weaponDepthHack<sp/>=<sp/>def-&gt;parms.weaponDepthHack;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>R_AxisToModelMatrix(<sp/>def-&gt;parms.axis,<sp/>def-&gt;parms.origin,<sp/>vModel-&gt;modelMatrix<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>may<sp/>not<sp/>have<sp/>a<sp/>viewDef<sp/>if<sp/>we<sp/>are<sp/>just<sp/>creating<sp/>shadows<sp/>at<sp/>entity<sp/>creation<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myGlMultMatrix(<sp/>vModel-&gt;modelMatrix,<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix,<sp/>vModel-&gt;modelViewMatrix<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vModel-&gt;next<sp/>=<sp/>tr.viewDef-&gt;viewEntitys;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewEntitys<sp/>=<sp/>vModel;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>def-&gt;viewEntity<sp/>=<sp/>vModel;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vModel;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="413"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="414"><highlight class="comment">R_TestPointInViewLight</highlight></codeline>
<codeline lineno="415"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="416"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>INSIDE_LIGHT_FRUSTUM_SLOP<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>greater<sp/>than<sp/>the<sp/>dist<sp/>from<sp/>origin<sp/>to<sp/>corner<sp/>of<sp/>near<sp/>clip<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_TestPointInViewLight(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;org,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>local;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>6<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>light-&gt;frustum[i].Distance(<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>INSIDE_LIGHT_FRUSTUM_SLOP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="434"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="435"><highlight class="comment">R_PointInFrustum</highlight></codeline>
<codeline lineno="436"><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment">Assumes<sp/>positive<sp/>sides<sp/>face<sp/>outward</highlight></codeline>
<codeline lineno="438"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="439"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_PointInFrustum(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;p,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>*planes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPlanes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numPlanes<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>planes[i].Distance(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="451"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="452"><highlight class="comment">R_SetLightDefViewLight</highlight></codeline>
<codeline lineno="453"><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">If<sp/>the<sp/>lightDef<sp/>isn&apos;t<sp/>already<sp/>on<sp/>the<sp/>viewLight<sp/>list,<sp/>create</highlight></codeline>
<codeline lineno="455"><highlight class="comment">a<sp/>viewLight<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>list<sp/>with<sp/>an<sp/>empty<sp/>scissor<sp/>rect.</highlight></codeline>
<codeline lineno="456"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="457"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*R_SetLightDefViewLight(<sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*vLight;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;viewCount<sp/>==<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>light-&gt;viewLight;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>light-&gt;viewCount<sp/>=<sp/>tr.viewCount;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>the<sp/>view<sp/>light<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight<sp/>=<sp/>(<ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*)R_ClearedFrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*vLight<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightDef<sp/>=<sp/>light;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scissorRect<sp/>will<sp/>be<sp/>expanded<sp/>as<sp/>the<sp/>light<sp/>bounds<sp/>is<sp/>accepted<sp/>into<sp/>visible<sp/>portal<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;scissorRect.Clear();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>shadow<sp/>cap<sp/>optimization<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;viewInsideLight<sp/>=<sp/>R_TestPointInViewLight(<sp/>tr.viewDef-&gt;renderView.vieworg,<sp/>light<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vLight-&gt;viewInsideLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;viewSeesShadowPlaneBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>light-&gt;numShadowFrustums<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>light-&gt;shadowFrustums[i].planes[5].Distance(<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&lt;<sp/>INSIDE_LIGHT_FRUSTUM_SLOP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;viewSeesShadowPlaneBits|=<sp/>1<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>not<sp/>be<sp/>referenced<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;viewSeesShadowPlaneBits<sp/>=<sp/>63;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>light<sp/>center<sp/>is<sp/>in<sp/>view,<sp/>which<sp/>will<sp/>allow<sp/>us<sp/>to<sp/>cull<sp/>invisible<sp/>shadows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;viewSeesGlobalLightOrigin<sp/>=<sp/>R_PointInFrustum(<sp/>light-&gt;globalLightOrigin,<sp/>tr.viewDef-&gt;frustum,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>used<sp/>by<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;globalLightOrigin<sp/>=<sp/>light-&gt;globalLightOrigin;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightProject[0]<sp/>=<sp/>light-&gt;lightProject[0];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightProject[1]<sp/>=<sp/>light-&gt;lightProject[1];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightProject[2]<sp/>=<sp/>light-&gt;lightProject[2];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightProject[3]<sp/>=<sp/>light-&gt;lightProject[3];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;fogPlane<sp/>=<sp/>light-&gt;frustum[5];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;frustumTris<sp/>=<sp/>light-&gt;frustumTris;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;falloffImage<sp/>=<sp/>light-&gt;falloffImage;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;lightShader<sp/>=<sp/>light-&gt;lightShader;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;shaderRegisters<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocated<sp/>and<sp/>evaluated<sp/>in<sp/>R_AddLightSurfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>the<sp/>view<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>vLight-&gt;next<sp/>=<sp/>tr.viewDef-&gt;viewLights;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewLights<sp/>=<sp/>vLight;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>light-&gt;viewLight<sp/>=<sp/>vLight;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vLight;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="513"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="514"><highlight class="comment">idRenderWorldLocal::CreateLightDefInteractions</highlight></codeline>
<codeline lineno="515"><highlight class="comment"></highlight></codeline>
<codeline lineno="516"><highlight class="comment">When<sp/>a<sp/>lightDef<sp/>is<sp/>determined<sp/>to<sp/>effect<sp/>the<sp/>view<sp/>(contact<sp/>the<sp/>frustum<sp/>and<sp/>non-0<sp/>light),<sp/>it<sp/>will<sp/>check<sp/>to</highlight></codeline>
<codeline lineno="517"><highlight class="comment">make<sp/>sure<sp/>that<sp/>it<sp/>has<sp/>interactions<sp/>for<sp/>all<sp/>the<sp/>entityDefs<sp/>that<sp/>it<sp/>might<sp/>possibly<sp/>contact.</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight></codeline>
<codeline lineno="519"><highlight class="comment">This<sp/>does<sp/>not<sp/>guarantee<sp/>that<sp/>all<sp/>possible<sp/>interactions<sp/>for<sp/>this<sp/>light<sp/>are<sp/>generated,<sp/>only<sp/>that</highlight></codeline>
<codeline lineno="520"><highlight class="comment">the<sp/>ones<sp/>that<sp/>may<sp/>effect<sp/>the<sp/>current<sp/>view<sp/>are<sp/>generated.<sp/>so<sp/>it<sp/>does<sp/>need<sp/>to<sp/>be<sp/>called<sp/>every<sp/>view.</highlight></codeline>
<codeline lineno="521"><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment">This<sp/>does<sp/>not<sp/>cause<sp/>entityDefs<sp/>to<sp/>create<sp/>dynamic<sp/>models,<sp/>all<sp/>work<sp/>is<sp/>done<sp/>on<sp/>the<sp/>referenceBounds.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"></highlight></codeline>
<codeline lineno="524"><highlight class="comment">All<sp/>entities<sp/>that<sp/>have<sp/>non-empty<sp/>interactions<sp/>with<sp/>viewLights<sp/>will</highlight></codeline>
<codeline lineno="525"><highlight class="comment">have<sp/>viewEntities<sp/>made<sp/>for<sp/>them<sp/>and<sp/>be<sp/>put<sp/>on<sp/>the<sp/>viewEntity<sp/>list,</highlight></codeline>
<codeline lineno="526"><highlight class="comment">even<sp/>if<sp/>their<sp/>surfaces<sp/>aren&apos;t<sp/>visible,<sp/>because<sp/>they<sp/>may<sp/>need<sp/>to<sp/>cast<sp/>shadows.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"></highlight></codeline>
<codeline lineno="528"><highlight class="comment">Interactions<sp/>are<sp/>usually<sp/>removed<sp/>when<sp/>a<sp/>entityDef<sp/>or<sp/>lightDef<sp/>is<sp/>modified,<sp/>unless<sp/>the<sp/>change</highlight></codeline>
<codeline lineno="529"><highlight class="comment">is<sp/>known<sp/>to<sp/>not<sp/>effect<sp/>them,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>danger<sp/>of<sp/>getting<sp/>a<sp/>stale<sp/>interaction,<sp/>we<sp/>just<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="530"><highlight class="comment">check<sp/>that<sp/>needed<sp/>ones<sp/>are<sp/>created.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment">An<sp/>interaction<sp/>can<sp/>be<sp/>at<sp/>several<sp/>levels:</highlight></codeline>
<codeline lineno="533"><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">Don&apos;t<sp/>interact<sp/>(but<sp/>share<sp/>an<sp/>area)<sp/>(numSurfaces<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="535"><highlight class="comment">Entity<sp/>reference<sp/>bounds<sp/>touches<sp/>light<sp/>frustum,<sp/>but<sp/>surfaces<sp/>haven&apos;t<sp/>been<sp/>generated<sp/>(numSurfaces<sp/>=<sp/>-1)</highlight></codeline>
<codeline lineno="536"><highlight class="comment">Shadow<sp/>surfaces<sp/>have<sp/>been<sp/>generated,<sp/>but<sp/>light<sp/>surfaces<sp/>have<sp/>not.<sp/><sp/>The<sp/>shadow<sp/>surface<sp/>may<sp/>still<sp/>be<sp/>empty<sp/>due<sp/>to<sp/>bounds<sp/>being<sp/>conservative.</highlight></codeline>
<codeline lineno="537"><highlight class="comment">Both<sp/>shadow<sp/>and<sp/>light<sp/>surfaces<sp/>have<sp/>been<sp/>generated.<sp/><sp/>Either<sp/>or<sp/>both<sp/>surfaces<sp/>may<sp/>still<sp/>be<sp/>empty<sp/>due<sp/>to<sp/>conservative<sp/>bounds.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="540"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idRenderWorldLocal::CreateLightDefInteractions(<sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*ldef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarea_reference__s" kindref="compound">areaReference_t</ref><sp/><sp/><sp/><sp/><sp/>*eref;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarea_reference__s" kindref="compound">areaReference_t</ref><sp/><sp/><sp/><sp/><sp/>*lref;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/><sp/><sp/><sp/><sp/>*edef;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structportal_area__s" kindref="compound">portalArea_t</ref><sp/><sp/><sp/><sp/>*area;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_interaction" kindref="compound">idInteraction</ref><sp/><sp/><sp/>*inter;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>lref<sp/>=<sp/>ldef-&gt;references<sp/>;<sp/>lref<sp/>;<sp/>lref<sp/>=<sp/>lref-&gt;ownerNext<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>area<sp/>=<sp/>lref-&gt;area;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>the<sp/>models<sp/>in<sp/>this<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>eref<sp/>=<sp/>area-&gt;entityRefs.areaNext<sp/>;<sp/>eref<sp/>!=<sp/>&amp;area-&gt;entityRefs<sp/>;<sp/>eref<sp/>=<sp/>eref-&gt;areaNext<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edef<sp/>=<sp/>eref-&gt;entity;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>entity<sp/>doesn&apos;t<sp/>have<sp/>any<sp/>light-interacting<sp/>surfaces,<sp/>we<sp/>could<sp/>skip<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>instantiate<sp/>dynamic<sp/>models<sp/>yet,<sp/>so<sp/>we<sp/>can&apos;t<sp/>check<sp/>that<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>most<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>entity<sp/>isn&apos;t<sp/>viewed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef<sp/>&amp;&amp;<sp/>edef-&gt;viewCount<sp/>!=<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>light<sp/>doesn&apos;t<sp/>cast<sp/>shadows,<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ldef-&gt;lightShader-&gt;LightCastsShadows()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>suppressing<sp/>its<sp/>shadow<sp/>in<sp/>this<sp/>view,<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!r_skipSuppress.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>edef-&gt;parms.suppressShadowInViewID<sp/>&amp;&amp;<sp/>edef-&gt;parms.suppressShadowInViewID<sp/>==<sp/>tr.viewDef-&gt;renderView.viewID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>edef-&gt;parms.suppressShadowInLightID<sp/>&amp;&amp;<sp/>edef-&gt;parms.suppressShadowInLightID<sp/>==<sp/>ldef-&gt;parms.lightId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>big<sp/>outdoor<sp/>meshes<sp/>are<sp/>flagged<sp/>to<sp/>not<sp/>create<sp/>any<sp/>dynamic<sp/>interactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>level<sp/>designer<sp/>knows<sp/>that<sp/>nearby<sp/>moving<sp/>lights<sp/>shouldn&apos;t<sp/>actually<sp/>hit<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>edef-&gt;parms.noDynamicInteractions<sp/>&amp;&amp;<sp/>edef-&gt;world-&gt;generateAllInteractionsCalled<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>any<sp/>of<sp/>the<sp/>edef&apos;s<sp/>interaction<sp/>match<sp/>this<sp/>light,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>consider<sp/>it.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useInteractionTable.GetBool()<sp/>&amp;&amp;<sp/>this-&gt;interactionTable<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocating<sp/>these<sp/>tables<sp/>may<sp/>take<sp/>several<sp/>megs<sp/>on<sp/>big<sp/>maps,<sp/>but<sp/>it<sp/>saves<sp/>3%<sp/>to<sp/>5%<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>CPU<sp/>time.<sp/><sp/>The<sp/>table<sp/>is<sp/>updated<sp/>at<sp/>interaction::AllocAndLink()<sp/>and<sp/>interaction::UnlinkAndFree()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ldef-&gt;index<sp/>*<sp/>this-&gt;interactionTableWidth<sp/>+<sp/>edef-&gt;index;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inter<sp/>=<sp/>this-&gt;interactionTable[<sp/>index<sp/>];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>entity<sp/>wasn&apos;t<sp/>in<sp/>view<sp/>already,<sp/>the<sp/>scissor<sp/>rect<sp/>will<sp/>be<sp/>empty,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>will<sp/>only<sp/>be<sp/>used<sp/>for<sp/>shadow<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!inter-&gt;IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SetEntityDefViewEntity(<sp/>edef<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>the<sp/>doubly<sp/>linked<sp/>lists,<sp/>which<sp/>may<sp/>have<sp/>several<sp/>dozen<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>could<sp/>check<sp/>either<sp/>model<sp/>refs<sp/>or<sp/>light<sp/>refs<sp/>for<sp/>matches,<sp/>but<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assumed<sp/>that<sp/>there<sp/>will<sp/>be<sp/>less<sp/>lights<sp/>in<sp/>an<sp/>area<sp/>than<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>entity<sp/>chains<sp/>should<sp/>be<sp/>somewhat<sp/>shorter<sp/>(they<sp/>tend<sp/>to<sp/>be<sp/>fairly<sp/>close).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>inter<sp/>=<sp/>edef-&gt;firstInteraction;<sp/>inter<sp/>!=<sp/>NULL;<sp/>inter<sp/>=<sp/>inter-&gt;entityNext<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inter-&gt;lightDef<sp/>==<sp/>ldef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>already<sp/>have<sp/>an<sp/>interaction,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inter<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>entity<sp/>wasn&apos;t<sp/>in<sp/>view<sp/>already,<sp/>the<sp/>scissor<sp/>rect<sp/>will<sp/>be<sp/>empty,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>will<sp/>only<sp/>be<sp/>used<sp/>for<sp/>shadow<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!inter-&gt;IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SetEntityDefViewEntity(<sp/>edef<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>interaction,<sp/>but<sp/>don&apos;t<sp/>do<sp/>any<sp/>work<sp/>other<sp/>than<sp/>bbox<sp/>to<sp/>frustum<sp/>culling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_interaction" kindref="compound">idInteraction</ref><sp/>*inter<sp/>=<sp/>idInteraction::AllocAndLink(<sp/>edef,<sp/>ldef<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>check<sp/>of<sp/>the<sp/>entity<sp/>reference<sp/>bounds<sp/>against<sp/>the<sp/>light<sp/>frustum,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>avoid<sp/>creating<sp/>a<sp/>viewEntity<sp/>if<sp/>it<sp/>hasn&apos;t<sp/>been<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>modelMatrix[16];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*m;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>edef-&gt;viewCount<sp/>==<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>edef-&gt;viewEntity-&gt;modelMatrix;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_AxisToModelMatrix(<sp/>edef-&gt;parms.axis,<sp/>edef-&gt;parms.origin,<sp/>modelMatrix<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>modelMatrix;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_CullLocalBox(<sp/>edef-&gt;referenceBounds,<sp/>m,<sp/>6,<sp/>ldef-&gt;frustum<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inter-&gt;MakeEmpty();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>do<sp/>a<sp/>more<sp/>precise<sp/>per-surface<sp/>check<sp/>when<sp/>we<sp/>are<sp/>checking<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>entity<sp/>wasn&apos;t<sp/>in<sp/>view<sp/>already,<sp/>the<sp/>scissor<sp/>rect<sp/>will<sp/>be<sp/>empty,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>will<sp/>only<sp/>be<sp/>used<sp/>for<sp/>shadow<sp/>casting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SetEntityDefViewEntity(<sp/>edef<sp/>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="654"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="655"><highlight class="comment">R_LinkLightSurf</highlight></codeline>
<codeline lineno="656"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="657"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_LinkLightSurf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>**link,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*space,<sp/></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*shader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;scissor,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>viewInsideShadow<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*drawSurf;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!space<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>=<sp/>&amp;tr.viewDef-&gt;worldSpace;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf<sp/>=<sp/>(<ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*)R_FrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*drawSurf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;geo<sp/>=<sp/>tri;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;space<sp/>=<sp/>space;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;material<sp/>=<sp/>shader;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;scissorRect<sp/>=<sp/>scissor;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;dsFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>viewInsideShadow<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;dsFlags<sp/>|=<sp/>DSF_VIEW_INSIDE_SHADOW;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shadows<sp/>won&apos;t<sp/>have<sp/>a<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;shaderRegisters<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>shader<sp/>expressions<sp/>for<sp/>conditionals<sp/>/<sp/>color<sp/>/<sp/>texcoords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*constRegs<sp/>=<sp/>shader-&gt;ConstantRegisters();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constRegs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>shader<sp/>has<sp/>only<sp/>constants<sp/>for<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;shaderRegisters<sp/>=<sp/>constRegs;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>share<sp/>with<sp/>the<sp/>ambient<sp/>surface?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*regs<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)R_FrameAlloc(<sp/>shader-&gt;GetNumRegisters()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;shaderRegisters<sp/>=<sp/>regs;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader-&gt;EvaluateRegisters(<sp/>regs,<sp/>space-&gt;entityDef-&gt;parms.shaderParms,<sp/>tr.viewDef,<sp/>space-&gt;entityDef-&gt;parms.referenceSound<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>specular<sp/>coordinates<sp/>if<sp/>we<sp/>aren&apos;t<sp/>using<sp/>vertex<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tr.backEndRendererHasVertexPrograms<sp/>&amp;&amp;<sp/>!r_skipSpecular.GetBool()<sp/>&amp;&amp;<sp/>tr.backEndRenderer<sp/>!=<sp/>BE_ARB<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SpecularTexGen(<sp/>drawSurf,<sp/>light-&gt;globalLightOrigin,<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>failed<sp/>to<sp/>allocate<sp/>space<sp/>for<sp/>the<sp/>specular<sp/>calculations,<sp/>drop<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!drawSurf-&gt;dynamicTexCoords<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>link<sp/>it<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;nextOnLight<sp/>=<sp/>*link;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>*link<sp/>=<sp/>drawSurf;</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="709"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="710"><highlight class="comment">R_ClippedLightScissorRectangle</highlight></codeline>
<codeline lineno="711"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="712"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>R_ClippedLightScissorRectangle(<sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*vLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light<sp/>=<sp/>vLight-&gt;lightDef;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>r;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_fixed_winding" kindref="compound">idFixedWinding</ref><sp/>w;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>r.Clear();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>6<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*ow<sp/>=<sp/>light-&gt;frustumWindings[i];</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>projected<sp/>lights<sp/>may<sp/>have<sp/>one<sp/>of<sp/>the<sp/>frustums<sp/>degenerated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ow<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>light<sp/>frustum<sp/>planes<sp/>face<sp/>out<sp/>from<sp/>the<sp/>light,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>planes<sp/>that<sp/>have<sp/>the<sp/>view<sp/>origin<sp/>on<sp/>the<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>side<sp/>will<sp/>be<sp/>the<sp/>&quot;back&quot;<sp/>faces<sp/>of<sp/>the<sp/>light,<sp/>which<sp/>must<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>fragment<sp/>inside<sp/>the<sp/>portalStack<sp/>to<sp/>be<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;frustum[i].Distance(<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>)<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>*ow;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>check<sp/>the<sp/>winding<sp/>against<sp/>each<sp/>of<sp/>the<sp/>frustum<sp/>planes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>5;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!w.ClipInPlace(<sp/>-tr.viewDef-&gt;frustum[j]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>these<sp/>points<sp/>to<sp/>the<sp/>screen<sp/>and<sp/>add<sp/>to<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>w.GetNumPoints();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/><sp/><sp/>eye,<sp/>clip;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>ndc;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformModelToClip(<sp/>w[j].ToVec3(),<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix,<sp/>tr.viewDef-&gt;projectionMatrix,<sp/>eye,<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip[3]<sp/>&lt;=<sp/>0.01f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip[3]<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformClipToDevice(<sp/>clip,<sp/>tr.viewDef,<sp/>ndc<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowX<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>ndc[0]<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowY<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>ndc[1]<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowX<sp/>&gt;<sp/>tr.viewDef-&gt;scissor.x2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowX<sp/>=<sp/>tr.viewDef-&gt;scissor.x2;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowX<sp/>&lt;<sp/>tr.viewDef-&gt;scissor.x1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowX<sp/>=<sp/>tr.viewDef-&gt;scissor.x1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowY<sp/>&gt;<sp/>tr.viewDef-&gt;scissor.y2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowY<sp/>=<sp/>tr.viewDef-&gt;scissor.y2;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowY<sp/>&lt;<sp/>tr.viewDef-&gt;scissor.y1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowY<sp/>=<sp/>tr.viewDef-&gt;scissor.y1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.AddPoint(<sp/>windowX,<sp/>windowY<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>fudge<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>r.Expand();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="784"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="785"><highlight class="comment">R_CalcLightScissorRectangle</highlight></codeline>
<codeline lineno="786"><highlight class="comment"></highlight></codeline>
<codeline lineno="787"><highlight class="comment">The<sp/>light<sp/>screen<sp/>bounds<sp/>will<sp/>be<sp/>used<sp/>to<sp/>crop<sp/>the<sp/>scissor<sp/>rect<sp/>during</highlight></codeline>
<codeline lineno="788"><highlight class="comment">stencil<sp/>clears<sp/>and<sp/>interaction<sp/>drawing</highlight></codeline>
<codeline lineno="789"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="790"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_clippedLight,<sp/>c_unclippedLight;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/><sp/><sp/><sp/>R_CalcLightScissorRectangle(<sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*vLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/><sp/><sp/><sp/>r;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye,<sp/>clip;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndc;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vLight-&gt;lightDef-&gt;parms.pointLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*lightDef<sp/>=<sp/>vLight-&gt;lightDef;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.ProjectionBounds(<sp/><ref refid="classid_box" kindref="compound">idBox</ref>(<sp/>lightDef-&gt;parms.origin,<sp/>lightDef-&gt;parms.lightRadius,<sp/>lightDef-&gt;parms.axis<sp/>),<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_ScreenRectFromViewFrustumBounds(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useClippedLightScissors.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_ClippedLightScissorRectangle(<sp/>vLight<sp/>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>r.Clear();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>tri<sp/>=<sp/>vLight-&gt;lightDef-&gt;frustumTris;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>tri-&gt;numVerts<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformModelToClip(<sp/>tri-&gt;verts[i].xyz,<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix,<sp/>eye,<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>near<sp/>clipped,<sp/>clip<sp/>the<sp/>winding<sp/>polygons<sp/>to<sp/>the<sp/>view<sp/>frustum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip[3]<sp/>&lt;=<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_clippedLight++;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useClippedLightScissors.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_ClippedLightScissorRectangle(<sp/>vLight<sp/>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.x1<sp/>=<sp/>r.y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.x2<sp/>=<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.y2<sp/>=<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformClipToDevice(<sp/>clip,<sp/>tr.viewDef,<sp/>ndc<sp/>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowX<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>ndc[0]<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowY<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>ndc[1]<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowX<sp/>&gt;<sp/>tr.viewDef-&gt;scissor.x2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowX<sp/>=<sp/>tr.viewDef-&gt;scissor.x2;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowX<sp/>&lt;<sp/>tr.viewDef-&gt;scissor.x1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowX<sp/>=<sp/>tr.viewDef-&gt;scissor.x1;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowY<sp/>&gt;<sp/>tr.viewDef-&gt;scissor.y2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowY<sp/>=<sp/>tr.viewDef-&gt;scissor.y2;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>windowY<sp/>&lt;<sp/>tr.viewDef-&gt;scissor.y1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowY<sp/>=<sp/>tr.viewDef-&gt;scissor.y1;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.AddPoint(<sp/>windowX,<sp/>windowY<sp/>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>fudge<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>r.Expand();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>c_unclippedLight++;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="858"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="859"><highlight class="comment">R_AddLightSurfaces</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment">Calc<sp/>the<sp/>light<sp/>shader<sp/>values,<sp/>removing<sp/>any<sp/>light<sp/>from<sp/>the<sp/>viewLight<sp/>list</highlight></codeline>
<codeline lineno="862"><highlight class="comment">if<sp/>it<sp/>is<sp/>determined<sp/>to<sp/>not<sp/>have<sp/>any<sp/>visible<sp/>effect<sp/>due<sp/>to<sp/>being<sp/>flashed<sp/>off<sp/>or<sp/>turned<sp/>off.</highlight></codeline>
<codeline lineno="863"><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment">Adds<sp/>entities<sp/>to<sp/>the<sp/>viewEntity<sp/>list<sp/>if<sp/>they<sp/>are<sp/>needed<sp/>for<sp/>shadow<sp/>casting.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"></highlight></codeline>
<codeline lineno="866"><highlight class="comment">Add<sp/>any<sp/>precomputed<sp/>shadow<sp/>volumes.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"></highlight></codeline>
<codeline lineno="868"><highlight class="comment">Removes<sp/>lights<sp/>from<sp/>the<sp/>viewLights<sp/>list<sp/>if<sp/>they<sp/>are<sp/>completely</highlight></codeline>
<codeline lineno="869"><highlight class="comment">turned<sp/>off,<sp/>or<sp/>completely<sp/>off<sp/>screen.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment">Create<sp/>any<sp/>new<sp/>interactions<sp/>needed<sp/>between<sp/>the<sp/>viewLights</highlight></codeline>
<codeline lineno="872"><highlight class="comment">and<sp/>the<sp/>viewEntitys<sp/>due<sp/>to<sp/>game<sp/>movement</highlight></codeline>
<codeline lineno="873"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="874"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_AddLightSurfaces(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/><sp/><sp/><sp/><sp/>*vLight;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/>*light;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/><sp/><sp/><sp/><sp/>**ptr;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>each<sp/>visible<sp/>light,<sp/>possibly<sp/>removing<sp/>some<sp/>from<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>&amp;tr.viewDef-&gt;viewLights;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light<sp/>=<sp/>vLight-&gt;lightDef;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/><sp/><sp/><sp/>*lightShader<sp/>=<sp/>light-&gt;lightShader;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lightShader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;R_AddLightSurfaces:<sp/>NULL<sp/>lightShader&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>are<sp/>suppressing<sp/>the<sp/>light<sp/>in<sp/>this<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!r_skipSuppress.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;parms.suppressLightInViewID</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>light-&gt;parms.suppressLightInViewID<sp/>==<sp/>tr.viewDef-&gt;renderView.viewID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>vLight-&gt;next;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;viewCount<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;parms.allowLightInViewID<sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>light-&gt;parms.allowLightInViewID<sp/>!=<sp/>tr.viewDef-&gt;renderView.viewID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>vLight-&gt;next;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;viewCount<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>the<sp/>light<sp/>shader<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lightRegs<sp/>=(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)R_FrameAlloc(<sp/>lightShader-&gt;GetNumRegisters()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;shaderRegisters<sp/>=<sp/>lightRegs;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightShader-&gt;EvaluateRegisters(<sp/>lightRegs,<sp/>light-&gt;parms.shaderParms,<sp/>tr.viewDef,<sp/>light-&gt;parms.referenceSound<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>a<sp/>purely<sp/>additive<sp/>light<sp/>and<sp/>no<sp/>stage<sp/>in<sp/>the<sp/>light<sp/>shader<sp/>evaluates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>positive<sp/>light<sp/>value,<sp/>we<sp/>can<sp/>completely<sp/>skip<sp/>the<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lightShader-&gt;IsFogLight()<sp/>&amp;&amp;<sp/>!lightShader-&gt;IsBlendLight()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lightStageNum;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>lightStageNum<sp/>=<sp/>0<sp/>;<sp/>lightStageNum<sp/>&lt;<sp/>lightShader-&gt;GetNumStages()<sp/>;<sp/>lightStageNum++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshader_stage__t" kindref="compound">shaderStage_t</ref><sp/>*lightStage<sp/>=<sp/>lightShader-&gt;GetStage(<sp/>lightStageNum<sp/>);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>stages<sp/>that<sp/>fail<sp/>the<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lightRegs[<sp/>lightStage-&gt;conditionRegister<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*registers<sp/>=<sp/>lightStage-&gt;color.registers;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>snap<sp/>tiny<sp/>values<sp/>to<sp/>zero<sp/>to<sp/>avoid<sp/>lights<sp/>showing<sp/>up<sp/>with<sp/>the<sp/>wrong<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightRegs[<sp/>registers[0]<sp/>]<sp/>&lt;<sp/>0.001f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightRegs[<sp/>registers[0]<sp/>]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightRegs[<sp/>registers[1]<sp/>]<sp/>&lt;<sp/>0.001f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightRegs[<sp/>registers[1]<sp/>]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightRegs[<sp/>registers[2]<sp/>]<sp/>&lt;<sp/>0.001f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightRegs[<sp/>registers[2]<sp/>]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/><sp/><sp/>when<sp/>using<sp/>the<sp/>following<sp/>values<sp/>the<sp/>light<sp/>shows<sp/>up<sp/>bright<sp/>red<sp/>when<sp/>using<sp/>nvidia<sp/>drivers/hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>seems<sp/>to<sp/>have<sp/>been<sp/>fixed<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lightRegs[<sp/>registers[0]<sp/>]<sp/>=<sp/>1.5143074e-005f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lightRegs[<sp/>registers[1]<sp/>]<sp/>=<sp/>1.5483369e-005f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lightRegs[<sp/>registers[2]<sp/>]<sp/>=<sp/>1.7014690e-005f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightRegs[<sp/>registers[0]<sp/>]<sp/>&gt;<sp/>0.0f<sp/>||</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightRegs[<sp/>registers[1]<sp/>]<sp/>&gt;<sp/>0.0f<sp/>||</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightRegs[<sp/>registers[2]<sp/>]<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightStageNum<sp/>==<sp/>lightShader-&gt;GetNumStages()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>went<sp/>through<sp/>all<sp/>the<sp/>stages<sp/>and<sp/>didn&apos;t<sp/>find<sp/>one<sp/>that<sp/>adds<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>light<sp/>from<sp/>the<sp/>viewLights<sp/>list,<sp/>and<sp/>change<sp/>its<sp/>frame<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>interaction<sp/>generation<sp/>doesn&apos;t<sp/>think<sp/>the<sp/>light<sp/>is<sp/>visible<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>shadow<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>vLight-&gt;next;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;viewCount<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useLightScissors.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>screen<sp/>area<sp/>covered<sp/>by<sp/>the<sp/>light<sp/>frustum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>used<sp/>to<sp/>crop<sp/>the<sp/>stencil<sp/>cull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>scissorRect<sp/>=<sp/>R_CalcLightScissorRectangle(<sp/>vLight<sp/>);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersect<sp/>with<sp/>the<sp/>portal<sp/>crossing<sp/>scissor<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;scissorRect.Intersect(<sp/>scissorRect<sp/>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_showLightScissors.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_ShowColoredScreenRect(<sp/>vLight-&gt;scissorRect,<sp/>light-&gt;index<sp/>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>never<sp/>happens,<sp/>because<sp/>CullLightByPortals()<sp/>does<sp/>a<sp/>more<sp/>precise<sp/>job</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vLight-&gt;scissorRect.IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>light<sp/>doesn&apos;t<sp/>touch<sp/>anything<sp/>on<sp/>screen,<sp/>so<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>vLight-&gt;next;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>one<sp/>stays<sp/>on<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>&amp;vLight-&gt;next;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>doing<sp/>a<sp/>soft-shadow<sp/>novelty<sp/>test,<sp/>regenerate<sp/>the<sp/>light<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>random<sp/>offset<sp/>every<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_lightSourceRadius.GetFloat()<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>3<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;globalLightOrigin[i]<sp/>+=<sp/>r_lightSourceRadius.GetFloat()<sp/>*<sp/>(<sp/>-1<sp/>+<sp/>2<sp/>*<sp/>(rand()&amp;0xfff)/(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)0xfff<sp/>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>interactions<sp/>with<sp/>all<sp/>entities<sp/>the<sp/>light<sp/>may<sp/>touch,<sp/>and<sp/>add<sp/>viewEntities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>cast<sp/>shadows,<sp/>even<sp/>if<sp/>they<sp/>aren&apos;t<sp/>directly<sp/>visible.<sp/><sp/>Any<sp/>real<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>deferred<sp/>until<sp/>we<sp/>walk<sp/>through<sp/>the<sp/>viewEntities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderWorld-&gt;CreateLightDefInteractions(<sp/>light<sp/>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.pc.c_viewLights++;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fog<sp/>lights<sp/>will<sp/>need<sp/>to<sp/>draw<sp/>the<sp/>light<sp/>frustum<sp/>triangles,<sp/>so<sp/>make<sp/>sure<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>in<sp/>the<sp/>vertex<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lightShader-&gt;IsFogLight()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!light-&gt;frustumTris-&gt;ambientCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!R_CreateAmbientCache(<sp/>light-&gt;frustumTris,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>if<sp/>we<sp/>are<sp/>out<sp/>of<sp/>vertex<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>touch<sp/>the<sp/>surface<sp/>so<sp/>it<sp/>won&apos;t<sp/>get<sp/>purged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Touch(<sp/>light-&gt;frustumTris-&gt;ambientCache<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>prelight<sp/>shadows<sp/>for<sp/>the<sp/>static<sp/>world<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>light-&gt;parms.prelightModel<sp/>&amp;&amp;<sp/>r_useOptimizedShadows.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!light-&gt;parms.prelightModel-&gt;NumSurfaces()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>surfs<sp/>in<sp/>prelight<sp/>model<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>light-&gt;parms.prelightModel-&gt;Name()<sp/>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/><sp/>*tri<sp/>=<sp/>light-&gt;parms.prelightModel-&gt;Surface(<sp/>0<sp/>)-&gt;geometry;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;shadowVertexes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;R_AddLightSurfaces:<sp/>prelight<sp/>model<sp/>&apos;%s&apos;<sp/>without<sp/>shadowVertexes&quot;</highlight><highlight class="normal">,<sp/>light-&gt;parms.prelightModel-&gt;Name()<sp/>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>shadows<sp/>will<sp/>all<sp/>have<sp/>valid<sp/>bounds,<sp/>and<sp/>can<sp/>be<sp/>culled<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useShadowCulling.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_CullLocalBox(<sp/>tri-&gt;bounds,<sp/>tr.viewDef-&gt;worldSpace.modelMatrix,<sp/>5,<sp/>tr.viewDef-&gt;frustum<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>been<sp/>purged,<sp/>re-upload<sp/>the<sp/>shadowVertexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;shadowCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_CreatePrivateShadowCache(<sp/>tri<sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;shadowCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>touch<sp/>the<sp/>shadow<sp/>surface<sp/>so<sp/>it<sp/>won&apos;t<sp/>get<sp/>purged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Touch(<sp/>tri-&gt;shadowCache<sp/>);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;indexCache<sp/>&amp;&amp;<sp/>r_useIndexBuffers.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>tri-&gt;indexes,<sp/>tri-&gt;numIndexes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tri-&gt;indexes[0]<sp/>),<sp/>&amp;tri-&gt;indexCache,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;indexCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Touch(<sp/>tri-&gt;indexCache<sp/>);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LinkLightSurf(<sp/>&amp;vLight-&gt;globalShadows,<sp/>tri,<sp/>NULL,<sp/>light,<sp/>NULL,<sp/>vLight-&gt;scissorRect,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>FIXME?<sp/>*/</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1057"><highlight class="comment">R_IssueEntityDefCallback</highlight></codeline>
<codeline lineno="1058"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_IssueEntityDefCallback(<sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>oldBounds;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_checkBounds.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds<sp/>=<sp/>def-&gt;referenceBounds;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>def-&gt;archived<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>need<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>demo<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.pc.c_entityDefCallbacks++;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update<sp/>=<sp/>def-&gt;parms.callback(<sp/>&amp;def-&gt;parms,<sp/>&amp;tr.viewDef-&gt;renderView<sp/>);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update<sp/>=<sp/>def-&gt;parms.callback(<sp/>&amp;def-&gt;parms,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!def-&gt;parms.hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;R_IssueEntityDefCallback:<sp/>dynamic<sp/>entity<sp/>callback<sp/>didn&apos;t<sp/>set<sp/>model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_checkBounds.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>oldBounds[0][0]<sp/>&gt;<sp/>def-&gt;referenceBounds[0][0]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds[0][1]<sp/>&gt;<sp/>def-&gt;referenceBounds[0][1]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds[0][2]<sp/>&gt;<sp/>def-&gt;referenceBounds[0][2]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds[1][0]<sp/>&lt;<sp/>def-&gt;referenceBounds[1][0]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds[1][1]<sp/>&lt;<sp/>def-&gt;referenceBounds[1][1]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldBounds[1][2]<sp/>&lt;<sp/>def-&gt;referenceBounds[1][2]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;entity<sp/>%i<sp/>callback<sp/>extended<sp/>reference<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>def-&gt;index<sp/>);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>update;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">R_EntityDefDynamicModel</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"></highlight></codeline>
<codeline lineno="1098"><highlight class="comment">Issues<sp/>a<sp/>deferred<sp/>entity<sp/>callback<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">If<sp/>the<sp/>model<sp/>isn&apos;t<sp/>dynamic,<sp/>it<sp/>returns<sp/>the<sp/>original.</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">Returns<sp/>the<sp/>cached<sp/>dynamic<sp/>model<sp/>if<sp/>present,<sp/>otherwise<sp/>creates</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">it<sp/>and<sp/>any<sp/>necessary<sp/>overlays</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><ref refid="classid_render_model" kindref="compound">idRenderModel</ref><sp/>*R_EntityDefDynamicModel(<sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callbackUpdate;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>deferred<sp/>entities<sp/>to<sp/>construct<sp/>themselves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;parms.callback<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callbackUpdate<sp/>=<sp/>R_IssueEntityDefCallback(<sp/>def<sp/>);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callbackUpdate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_model" kindref="compound">idRenderModel</ref><sp/>*model<sp/>=<sp/>def-&gt;parms.hModel;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;R_EntityDefDynamicModel:<sp/>NULL<sp/>model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model-&gt;IsDynamicModel()<sp/>==<sp/>DM_STATIC<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;dynamicModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;dynamicModelFrameCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continously<sp/>animating<sp/>models<sp/>(particle<sp/>systems,<sp/>etc)<sp/>will<sp/>have<sp/>their<sp/>snapshot<sp/>updated<sp/>every<sp/>single<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>callbackUpdate<sp/>||<sp/>(<sp/>model-&gt;IsDynamicModel()<sp/>==<sp/>DM_CONTINUOUS<sp/>&amp;&amp;<sp/>def-&gt;dynamicModelFrameCount<sp/>!=<sp/>tr.frameCount<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_ClearEntityDefDynamicModel(<sp/>def<sp/>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>snapshot<sp/>of<sp/>the<sp/>dynamic<sp/>model,<sp/>generate<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!def-&gt;dynamicModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instantiate<sp/>the<sp/>snapshot<sp/>of<sp/>the<sp/>dynamic<sp/>model,<sp/>possibly<sp/>reusing<sp/>memory<sp/>from<sp/>the<sp/>cached<sp/>snapshot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;cachedDynamicModel<sp/>=<sp/>model-&gt;InstantiateDynamicModel(<sp/>&amp;def-&gt;parms,<sp/>tr.viewDef,<sp/>def-&gt;cachedDynamicModel<sp/>);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;cachedDynamicModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>any<sp/>overlays<sp/>to<sp/>the<sp/>snapshot<sp/>of<sp/>the<sp/>dynamic<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;overlay<sp/>&amp;&amp;<sp/>!r_skipOverlays.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;overlay-&gt;AddOverlaySurfacesToModel(<sp/>def-&gt;cachedDynamicModel<sp/>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idRenderModelOverlay::RemoveOverlaySurfacesFromModel(<sp/>def-&gt;cachedDynamicModel<sp/>);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_checkBounds.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>b<sp/>=<sp/>def-&gt;cachedDynamicModel-&gt;Bounds();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>b[0][0]<sp/>&lt;<sp/>def-&gt;referenceBounds[0][0]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0][1]<sp/>&lt;<sp/>def-&gt;referenceBounds[0][1]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0][2]<sp/>&lt;<sp/>def-&gt;referenceBounds[0][2]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1][0]<sp/>&gt;<sp/>def-&gt;referenceBounds[1][0]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1][1]<sp/>&gt;<sp/>def-&gt;referenceBounds[1][1]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>||</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1][2]<sp/>&gt;<sp/>def-&gt;referenceBounds[1][2]<sp/>+<sp/>CHECK_BOUNDS_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;entity<sp/>%i<sp/>dynamic<sp/>model<sp/>exceeded<sp/>reference<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>def-&gt;index<sp/>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;dynamicModel<sp/>=<sp/>def-&gt;cachedDynamicModel;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;dynamicModelFrameCount<sp/>=<sp/>tr.frameCount;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>model<sp/>depth<sp/>hack<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;dynamicModel<sp/>&amp;&amp;<sp/>model-&gt;DepthHack()<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>tr.viewDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>eye,<sp/>clip;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ndc;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformModelToClip(<sp/>def-&gt;parms.origin,<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix,<sp/>tr.viewDef-&gt;projectionMatrix,<sp/>eye,<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformClipToDevice(<sp/>clip,<sp/>tr.viewDef,<sp/>ndc<sp/>);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;parms.modelDepthHack<sp/>=<sp/>model-&gt;DepthHack()<sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>ndc.z<sp/>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>if<sp/>any<sp/>of<sp/>the<sp/>surfaces<sp/>have<sp/>deforms,<sp/>create<sp/>a<sp/>frame-temporary<sp/>model<sp/>with<sp/>references<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>undeformed<sp/>surfaces.<sp/><sp/>This<sp/>would<sp/>allow<sp/>deforms<sp/>to<sp/>be<sp/>light<sp/>interacting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def-&gt;dynamicModel;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">R_AddDrawSurf</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1182"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_AddDrawSurf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*space,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrender_entity__s" kindref="compound">renderEntity_t</ref><sp/>*renderEntity,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*shader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;scissor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*drawSurf;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*shaderParms;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>refRegs[MAX_EXPRESSION_REGISTERS];<sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>put<sp/>on<sp/>stack,<sp/>or<sp/>VC++<sp/>will<sp/>do<sp/>a<sp/>page<sp/>touch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedShaderParms[MAX_ENTITY_SHADER_PARMS];</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf<sp/>=<sp/>(<ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*)R_FrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*drawSurf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;geo<sp/>=<sp/>tri;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;space<sp/>=<sp/>space;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;material<sp/>=<sp/>shader;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;scissorRect<sp/>=<sp/>scissor;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;sort<sp/>=<sp/>shader-&gt;GetSort()<sp/>+<sp/>tr.sortOffset;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>drawSurf-&gt;dsFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumping<sp/>this<sp/>offset<sp/>each<sp/>time<sp/>causes<sp/>surfaces<sp/>with<sp/>equal<sp/>sort<sp/>orders<sp/>to<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deterministically<sp/>draw<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.sortOffset<sp/>+=<sp/>0.000001f;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>fit,<sp/>resize<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;numDrawSurfs<sp/>==<sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/>**old<sp/>=<sp/>tr.viewDef-&gt;drawSurfs;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>=<sp/>INITIAL_DRAWSURFS;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tr.viewDef-&gt;drawSurfs[0]<sp/>);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;drawSurfs<sp/>=<sp/>(<ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>**)R_FrameAlloc(<sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tr.viewDef-&gt;drawSurfs[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>tr.viewDef-&gt;drawSurfs,<sp/>old,<sp/>count<sp/>);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;drawSurfs[tr.viewDef-&gt;numDrawSurfs]<sp/>=<sp/>drawSurf;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;numDrawSurfs++;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>shader<sp/>expressions<sp/>for<sp/>conditionals<sp/>/<sp/>color<sp/>/<sp/>texcoords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*constRegs<sp/>=<sp/>shader-&gt;ConstantRegisters();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constRegs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shader<sp/>only<sp/>uses<sp/>constant<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;shaderRegisters<sp/>=<sp/>constRegs;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*regs<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)R_FrameAlloc(<sp/>shader-&gt;GetNumRegisters()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf-&gt;shaderRegisters<sp/>=<sp/>regs;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>reference<sp/>shader<sp/>will<sp/>take<sp/>the<sp/>calculated<sp/>stage<sp/>color<sp/>value<sp/>from<sp/>another<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>use<sp/>that<sp/>for<sp/>the<sp/>parm0-parm3<sp/>of<sp/>the<sp/>current<sp/>shader,<sp/>which<sp/>allows<sp/>a<sp/>stage<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>light<sp/>model<sp/>and<sp/>light<sp/>flares<sp/>to<sp/>pick<sp/>up<sp/>different<sp/>flashing<sp/>tables<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>light<sp/>shaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity-&gt;referenceShader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>the<sp/>reference<sp/>shader<sp/>to<sp/>find<sp/>our<sp/>shader<sp/>parms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshader_stage__t" kindref="compound">shaderStage_t</ref><sp/>*pStage;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;referenceShader-&gt;EvaluateRegisters(<sp/>refRegs,<sp/>renderEntity-&gt;shaderParms,<sp/>tr.viewDef,<sp/>renderEntity-&gt;referenceSound<sp/>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pStage<sp/>=<sp/>renderEntity-&gt;referenceShader-&gt;GetStage(0);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>generatedShaderParms,<sp/>renderEntity-&gt;shaderParms,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>generatedShaderParms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedShaderParms[0]<sp/>=<sp/>refRegs[<sp/>pStage-&gt;color.registers[0]<sp/>];</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedShaderParms[1]<sp/>=<sp/>refRegs[<sp/>pStage-&gt;color.registers[1]<sp/>];</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedShaderParms[2]<sp/>=<sp/>refRegs[<sp/>pStage-&gt;color.registers[2]<sp/>];</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaderParms<sp/>=<sp/>generatedShaderParms;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>with<sp/>the<sp/>entityDef&apos;s<sp/>shader<sp/>parms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaderParms<sp/>=<sp/>renderEntity-&gt;shaderParms;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldTime;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>space-&gt;entityDef<sp/>&amp;&amp;<sp/>space-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldFloatTime<sp/>=<sp/>tr.viewDef-&gt;floatTime;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldTime<sp/>=<sp/>tr.viewDef-&gt;renderView.time;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>space-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>*<sp/>0.001;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>space-&gt;entityDef-&gt;parms.timeGroup<sp/>);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader-&gt;EvaluateRegisters(<sp/>regs,<sp/>shaderParms,<sp/>tr.viewDef,<sp/>renderEntity-&gt;referenceSound<sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>space-&gt;entityDef<sp/>&amp;&amp;<sp/>space-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>deformations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>R_DeformDrawSurf(<sp/>drawSurf<sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skybox<sp/>surfaces<sp/>need<sp/>a<sp/>dynamic<sp/>texgen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>shader-&gt;Texgen()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TG_SKYBOX_CUBE:</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SkyboxTexGen(<sp/>drawSurf,<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TG_WOBBLESKY_CUBE:</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_WobbleskyTexGen(<sp/>drawSurf,<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>gui<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>*gui<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!space-&gt;entityDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>shader-&gt;GlobalGui();</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guiNum<sp/>=<sp/>shader-&gt;GetEntityGui()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>guiNum<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>guiNum<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>renderEntity-&gt;gui[<sp/>guiNum<sp/>];</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gui<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>shader-&gt;GlobalGui();</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gui<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>guis<sp/>on<sp/>the<sp/>fast<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldTime;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldFloatTime<sp/>=<sp/>tr.viewDef-&gt;floatTime;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldTime<sp/>=<sp/>tr.viewDef-&gt;renderView.time;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>1<sp/>)<sp/>*<sp/>0.001;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>ndcBounds;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!R_PreciseCullSurface(<sp/>drawSurf,<sp/>ndcBounds<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>we<sp/>ever<sp/>use<sp/>this<sp/>to<sp/>forward<sp/>an<sp/>entity<sp/>color<sp/>to<sp/>a<sp/>gui<sp/>that<sp/>didn&apos;t<sp/>set<sp/>color?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>tr.guiShaderParms,<sp/>shaderParms,<sp/>sizeof(<sp/>tr.guiShaderParms<sp/>)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_RenderGuiSurf(<sp/>gui,<sp/>drawSurf<sp/>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can&apos;t<sp/>add<sp/>subviews<sp/>at<sp/>this<sp/>point,<sp/>because<sp/>that<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>tr.viewCount,<sp/>messing<sp/>up<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adds<sp/>for<sp/>this<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1327"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="1328"><highlight class="comment">R_AddAmbientDrawsurfs</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"></highlight></codeline>
<codeline lineno="1330"><highlight class="comment">Adds<sp/>surfaces<sp/>for<sp/>the<sp/>given<sp/>viewEntity</highlight></codeline>
<codeline lineno="1331"><highlight class="comment">Walks<sp/>through<sp/>the<sp/>viewEntitys<sp/>list<sp/>and<sp/>creates<sp/>drawSurf_t<sp/>for<sp/>each<sp/>surface<sp/>of</highlight></codeline>
<codeline lineno="1332"><highlight class="comment">each<sp/>viewEntity<sp/>that<sp/>has<sp/>a<sp/>non-empty<sp/>scissorRect</highlight></codeline>
<codeline lineno="1333"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_AddAmbientDrawsurfs(<sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*vEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>total;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*def;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*tri;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_model" kindref="compound">idRenderModel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*model;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/><sp/><sp/><sp/>*shader;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>=<sp/>vEntity-&gt;entityDef;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def-&gt;dynamicModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>def-&gt;dynamicModel;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>def-&gt;parms.hModel;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>all<sp/>the<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>model-&gt;NumSurfaces();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>total<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodel_surface__s" kindref="compound">modelSurface_t</ref><sp/><sp/><sp/><sp/>*surf<sp/>=<sp/>model-&gt;Surface(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>debugging,<sp/>only<sp/>show<sp/>a<sp/>single<sp/>surface<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_singleSurface.GetInteger()<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>r_singleSurface.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tri<sp/>=<sp/>surf-&gt;geometry;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tri-&gt;numIndexes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>surf-&gt;shader;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>R_RemapShaderBySkin(<sp/>shader,<sp/>def-&gt;parms.customSkin,<sp/>def-&gt;parms.customShader<sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_GlobalShaderOverride(<sp/>&amp;shader<sp/>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shader<sp/>)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shader-&gt;IsDrawn()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debugging<sp/>tool<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>are<sp/>have<sp/>the<sp/>correct<sp/>pre-calculated<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_checkBounds.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>tri-&gt;numVerts<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>3<sp/>;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;verts[j].xyz[k]<sp/>&gt;<sp/>tri-&gt;bounds[1][k]<sp/>+<sp/>CHECK_BOUNDS_EPSILON</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>tri-&gt;verts[j].xyz[k]<sp/>&lt;<sp/>tri-&gt;bounds[0][k]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>tri-&gt;bounds<sp/>on<sp/>%s:%s\n&quot;</highlight><highlight class="normal">,<sp/>def-&gt;parms.hModel-&gt;Name(),<sp/>shader-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;verts[j].xyz[k]<sp/>&gt;<sp/>def-&gt;referenceBounds[1][k]<sp/>+<sp/>CHECK_BOUNDS_EPSILON</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>tri-&gt;verts[j].xyz[k]<sp/>&lt;<sp/>def-&gt;referenceBounds[0][k]<sp/>-<sp/>CHECK_BOUNDS_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>referenceBounds<sp/>on<sp/>%s:%s\n&quot;</highlight><highlight class="normal">,<sp/>def-&gt;parms.hModel-&gt;Name(),<sp/>shader-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>!=<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!R_CullLocalBox(<sp/>tri-&gt;bounds,<sp/>vEntity-&gt;modelMatrix,<sp/>5,<sp/>tr.viewDef-&gt;frustum<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def-&gt;visibleCount<sp/>=<sp/>tr.viewCount;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>an<sp/>ambient<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!R_CreateAmbientCache(<sp/>tri,<sp/>shader-&gt;ReceivesLighting()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>add<sp/>anything<sp/>if<sp/>the<sp/>vertex<sp/>cache<sp/>was<sp/>too<sp/>full<sp/>to<sp/>give<sp/>us<sp/>an<sp/>ambient<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>touch<sp/>it<sp/>so<sp/>it<sp/>won&apos;t<sp/>get<sp/>purged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Touch(<sp/>tri-&gt;ambientCache<sp/>);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useIndexBuffers.GetBool()<sp/>&amp;&amp;<sp/>!tri-&gt;indexCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Alloc(<sp/>tri-&gt;indexes,<sp/>tri-&gt;numIndexes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tri-&gt;indexes[0]<sp/>),<sp/>&amp;tri-&gt;indexCache,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tri-&gt;indexCache<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache.Touch(<sp/>tri-&gt;indexCache<sp/>);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>surface<sp/>for<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_AddDrawSurf(<sp/>tri,<sp/>vEntity,<sp/>&amp;vEntity-&gt;entityDef-&gt;parms,<sp/>shader,<sp/>vEntity-&gt;scissorRect<sp/>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ambientViewCount<sp/>is<sp/>used<sp/>to<sp/>allow<sp/>light<sp/>interactions<sp/>to<sp/>be<sp/>rejected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>ambient<sp/>surface<sp/>isn&apos;t<sp/>visible<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tri-&gt;ambientViewCount<sp/>=<sp/>tr.viewCount;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>lightweight<sp/>decal<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classid_render_model_decal" kindref="compound">idRenderModelDecal</ref><sp/>*decal<sp/>=<sp/>def-&gt;decals;<sp/>decal;<sp/>decal<sp/>=<sp/>decal-&gt;Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decal-&gt;AddDecalDrawSurf(<sp/>vEntity<sp/>);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1436"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1437"><highlight class="comment">R_CalcEntityScissorRectangle</highlight></codeline>
<codeline lineno="1438"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1439"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>R_CalcEntityScissorRectangle(<sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*vEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_entity_local" kindref="compound">idRenderEntityLocal</ref><sp/>*def<sp/>=<sp/>vEntity-&gt;entityDef;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.ProjectionBounds(<sp/><ref refid="classid_box" kindref="compound">idBox</ref>(<sp/>def-&gt;referenceBounds,<sp/>def-&gt;parms.origin,<sp/>def-&gt;parms.axis<sp/>),<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_ScreenRectFromViewFrustumBounds(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1450"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1451"><highlight class="comment">R_AddModelSurfaces</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment">Here<sp/>is<sp/>where<sp/>dynamic<sp/>models<sp/>actually<sp/>get<sp/>instantiated,<sp/>and<sp/>necessary</highlight></codeline>
<codeline lineno="1454"><highlight class="comment">interactions<sp/>get<sp/>created.<sp/><sp/>This<sp/>is<sp/>all<sp/>done<sp/>on<sp/>a<sp/>sort-by-model<sp/>basis</highlight></codeline>
<codeline lineno="1455"><highlight class="comment">to<sp/>keep<sp/>source<sp/>data<sp/>in<sp/>cache<sp/>(most<sp/>likely<sp/>L2)<sp/>as<sp/>any<sp/>interactions<sp/>and</highlight></codeline>
<codeline lineno="1456"><highlight class="comment">shadows<sp/>are<sp/>generated,<sp/>since<sp/>dynamic<sp/>models<sp/>will<sp/>typically<sp/>be<sp/>lit<sp/>by</highlight></codeline>
<codeline lineno="1457"><highlight class="comment">two<sp/>or<sp/>more<sp/>lights.</highlight></codeline>
<codeline lineno="1458"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1459"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_AddModelSurfaces(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*vEntity;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_interaction" kindref="compound">idInteraction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*inter,<sp/>*next;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_model" kindref="compound">idRenderModel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*model;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>ambient<sp/>surface<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;numDrawSurfs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;maxDrawSurfs<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>set<sp/>to<sp/>INITIAL_DRAWSURFS<sp/>on<sp/>R_AddDrawSurf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>each<sp/>entity<sp/>that<sp/>is<sp/>either<sp/>visible<sp/>to<sp/>the<sp/>view,<sp/>or<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>light<sp/>that<sp/>intersects<sp/>the<sp/>view<sp/>(for<sp/>shadows)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vEntity<sp/>=<sp/>tr.viewDef-&gt;viewEntitys;<sp/>vEntity;<sp/>vEntity<sp/>=<sp/>vEntity-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useEntityScissors.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>screen<sp/>area<sp/>covered<sp/>by<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>scissorRect<sp/>=<sp/>R_CalcEntityScissorRectangle(<sp/>vEntity<sp/>);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersect<sp/>with<sp/>the<sp/>portal<sp/>crossing<sp/>scissor<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vEntity-&gt;scissorRect.Intersect(<sp/>scissorRect<sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_showEntityScissors.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_ShowColoredScreenRect(<sp/>vEntity-&gt;scissorRect,<sp/>vEntity-&gt;entityDef-&gt;index<sp/>);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldTime;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;SelectTimeGroup(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldFloatTime<sp/>=<sp/>tr.viewDef-&gt;floatTime;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldTime<sp/>=<sp/>tr.viewDef-&gt;renderView.time;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>*<sp/>0.001;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>game-&gt;GetTimeGroupTime(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;isXraySubview<sp/>&amp;&amp;<sp/>vEntity-&gt;entityDef-&gt;parms.xrayIndex<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tr.viewDef-&gt;isXraySubview<sp/>&amp;&amp;<sp/>vEntity-&gt;entityDef-&gt;parms.xrayIndex<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>ambient<sp/>surface<sp/>if<sp/>it<sp/>has<sp/>a<sp/>visible<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vEntity-&gt;scissorRect.IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>R_EntityDefDynamicModel(<sp/>vEntity-&gt;entityDef<sp/>);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>==<sp/>NULL<sp/>||<sp/>model-&gt;NumSurfaces()<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_AddAmbientDrawsurfs(<sp/>vEntity<sp/>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.pc.c_visibleViewEntities++;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.pc.c_shadowViewEntities++;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>the<sp/>entity<sp/>/<sp/>light<sp/>interactions<sp/>on<sp/>this<sp/>entity,<sp/>add<sp/>them<sp/>to<sp/>the<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;isXraySubview<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.xrayIndex<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>inter<sp/>=<sp/>vEntity-&gt;entityDef-&gt;firstInteraction;<sp/>inter<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!inter-&gt;IsEmpty();<sp/>inter<sp/>=<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>inter-&gt;entityNext;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inter-&gt;lightDef-&gt;viewCount<sp/>!=<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inter-&gt;AddActiveInteraction();</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>empty<sp/>interactions<sp/>are<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>so<sp/>once<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>is<sp/>encountered<sp/>all<sp/>the<sp/>remaining<sp/>interactions<sp/>are<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>inter<sp/>=<sp/>vEntity-&gt;entityDef-&gt;firstInteraction;<sp/>inter<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!inter-&gt;IsEmpty();<sp/>inter<sp/>=<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>inter-&gt;entityNext;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>any<sp/>lights<sp/>that<sp/>aren&apos;t<sp/>currently<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>run<sp/>after<sp/>any<sp/>lights<sp/>that<sp/>are<sp/>turned<sp/>off<sp/>have<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>removed<sp/>from<sp/>the<sp/>viewLights<sp/>list,<sp/>and<sp/>had<sp/>their<sp/>viewCount<sp/>cleared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inter-&gt;lightDef-&gt;viewCount<sp/>!=<sp/>tr.viewCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inter-&gt;AddActiveInteraction();</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vEntity-&gt;entityDef-&gt;parms.timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;floatTime<sp/>=<sp/>oldFloatTime;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderView.time<sp/>=<sp/>oldTime;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1566"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="1567"><highlight class="comment">R_RemoveUnecessaryViewLights</highlight></codeline>
<codeline lineno="1568"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="1569"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_RemoveUnecessaryViewLights(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/><sp/><sp/><sp/><sp/>*vLight;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>each<sp/>visible<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vLight<sp/>=<sp/>tr.viewDef-&gt;viewLights<sp/>;<sp/>vLight<sp/>;<sp/>vLight<sp/>=<sp/>vLight-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>light<sp/>didn&apos;t<sp/>have<sp/>any<sp/>lit<sp/>surfaces<sp/>visible,<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>any<sp/>of<sp/>the<sp/>shadows.<sp/><sp/>We<sp/>still<sp/>keep<sp/>the<sp/>vLight<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draws</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vLight-&gt;localInteractions<sp/>&amp;&amp;<sp/>!vLight-&gt;globalInteractions<sp/>&amp;&amp;<sp/>!vLight-&gt;translucentInteractions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;localShadows<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;globalShadows<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useShadowSurfaceScissor.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shrink<sp/>the<sp/>light<sp/>scissor<sp/>rect<sp/>to<sp/>only<sp/>intersect<sp/>the<sp/>surfaces<sp/>that<sp/>will<sp/>actually<sp/>be<sp/>drawn.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>actually<sp/>help,<sp/>perhaps<sp/>because<sp/>the<sp/>surface<sp/>scissor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rects<sp/>aren&apos;t<sp/>actually<sp/>the<sp/>surface,<sp/>but<sp/>only<sp/>the<sp/>portal<sp/>clippings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vLight<sp/>=<sp/>tr.viewDef-&gt;viewLights<sp/>;<sp/>vLight<sp/>;<sp/>vLight<sp/>=<sp/>vLight-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/><sp/><sp/>*surf;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/><sp/><sp/><sp/>surfRect;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vLight-&gt;lightShader-&gt;LightCastsShadows()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfRect.Clear();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>=<sp/>vLight-&gt;globalInteractions<sp/>;<sp/>surf<sp/>;<sp/>surf<sp/>=<sp/>surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfRect.Union(<sp/>surf-&gt;scissorRect<sp/>);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>=<sp/>vLight-&gt;localShadows<sp/>;<sp/>surf<sp/>;<sp/>surf<sp/>=<sp/>surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(surf)-&gt;scissorRect.Intersect(<sp/>surfRect<sp/>);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>=<sp/>vLight-&gt;localInteractions<sp/>;<sp/>surf<sp/>;<sp/>surf<sp/>=<sp/>surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfRect.Union(<sp/>surf-&gt;scissorRect<sp/>);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>=<sp/>vLight-&gt;globalShadows<sp/>;<sp/>surf<sp/>;<sp/>surf<sp/>=<sp/>surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(surf)-&gt;scissorRect.Intersect(<sp/>surfRect<sp/>);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>=<sp/>vLight-&gt;translucentInteractions<sp/>;<sp/>surf<sp/>;<sp/>surf<sp/>=<sp/>surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfRect.Union(<sp/>surf-&gt;scissorRect<sp/>);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vLight-&gt;scissorRect.Intersect(<sp/>surfRect<sp/>);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_light.cpp"/>
  </compounddef>
</doxygen>
