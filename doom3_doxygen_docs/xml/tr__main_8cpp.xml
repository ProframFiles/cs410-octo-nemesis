<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="tr__main_8cpp" kind="file">
    <compoundname>tr_main.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="tr__main_8cpp_1a23da24ab92e9e4d709796ece94205a99" prot="public" static="no">
        <name>MEMORY_BLOCK_SIZE</name>
        <initializer>0x100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="213" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tr__main_8cpp_1afe6abd966dac696b50e87ed15bba7e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
        <definition>idScreenRect R_ScreenRectFromViewFrustumBounds</definition>
        <argsstring>(const idBounds &amp;bounds)</argsstring>
        <name>R_ScreenRectFromViewFrustumBounds</name>
        <param>
          <type>const <ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="151" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a6e0fcb827700b694defb72c5430d5dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_ShowColoredScreenRect</definition>
        <argsstring>(const idScreenRect &amp;rect, int colorIndex)</argsstring>
        <name>R_ShowColoredScreenRect</name>
        <param>
          <type>const <ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colorIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="172" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="172" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1afdd7dc63719e14eb118a909ba7e1915a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_ToggleSmpFrame</definition>
        <argsstring>(void)</argsstring>
        <name>R_ToggleSmpFrame</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="184" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="184" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1af726a94ce5d91dff4cfc6f6b1953207b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_ShutdownFrameData</definition>
        <argsstring>(void)</argsstring>
        <name>R_ShutdownFrameData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="220" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="220" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1ad6fef3bfb0a020857f9be3f45bc35d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_InitFrameData</definition>
        <argsstring>(void)</argsstring>
        <name>R_InitFrameData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="246" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="246" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a2c7eb1fef314db2f3444f3426246e48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int R_CountFrameData</definition>
        <argsstring>(void)</argsstring>
        <name>R_CountFrameData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="274" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="274" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a1541ac1be31dc4534c4785c3f149037c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* R_StaticAlloc</definition>
        <argsstring>(int bytes)</argsstring>
        <name>R_StaticAlloc</name>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="301" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="301" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a36eb88ce25c1f8120af5fe5d1764783d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* R_ClearedStaticAlloc</definition>
        <argsstring>(int bytes)</argsstring>
        <name>R_ClearedStaticAlloc</name>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="322" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="322" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a9b5415d21d166ca9b6f73ac85edca2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_StaticFree</definition>
        <argsstring>(void *data)</argsstring>
        <name>R_StaticFree</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a7e7fbe2d8b889a9b2748814104f68c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* R_FrameAlloc</definition>
        <argsstring>(int bytes)</argsstring>
        <name>R_FrameAlloc</name>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="365" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="365" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a32329f3400333d9a2037662e7bc33147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* R_ClearedFrameAlloc</definition>
        <argsstring>(int bytes)</argsstring>
        <name>R_ClearedFrameAlloc</name>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="417" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="417" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a263b1323640eba4ef3fd665bb08285c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_FrameFree</definition>
        <argsstring>(void *data)</argsstring>
        <name>R_FrameFree</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="438" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="438" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a7f2e811ae4e4b1d6f088b5a8eaf04224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_AxisToModelMatrix</definition>
        <argsstring>(const idMat3 &amp;axis, const idVec3 &amp;origin, float modelMatrix[16])</argsstring>
        <name>R_AxisToModelMatrix</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="445" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="445" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a2f8dd0de70d635a0beb4a849661a67f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_LocalPointToGlobal</definition>
        <argsstring>(const float modelMatrix[16], const idVec3 &amp;in, idVec3 &amp;out)</argsstring>
        <name>R_LocalPointToGlobal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="470" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="470" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a8c510ff18d9c2cbbe298da05278a4657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_PointTimesMatrix</definition>
        <argsstring>(const float modelMatrix[16], const idVec4 &amp;in, idVec4 &amp;out)</argsstring>
        <name>R_PointTimesMatrix</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_vec4" kindref="compound">idVec4</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="511" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="511" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1aae17c44476a779c3c3153d5bb8851408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_GlobalPointToLocal</definition>
        <argsstring>(const float modelMatrix[16], const idVec3 &amp;in, idVec3 &amp;out)</argsstring>
        <name>R_GlobalPointToLocal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="522" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="522" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1abc1cd18b36b1522b007d86759ffd8560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_LocalVectorToGlobal</definition>
        <argsstring>(const float modelMatrix[16], const idVec3 &amp;in, idVec3 &amp;out)</argsstring>
        <name>R_LocalVectorToGlobal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="532" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="532" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1ac2abc7f8e05311fc6929b3dc9dcd4e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_GlobalVectorToLocal</definition>
        <argsstring>(const float modelMatrix[16], const idVec3 &amp;in, idVec3 &amp;out)</argsstring>
        <name>R_GlobalVectorToLocal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="541" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="541" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a6b6e1554511d3ee239a3c94ae5879a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_GlobalPlaneToLocal</definition>
        <argsstring>(const float modelMatrix[16], const idPlane &amp;in, idPlane &amp;out)</argsstring>
        <name>R_GlobalPlaneToLocal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="547" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="547" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a51100a52f7b453cc5f6ae9920e8a762f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_LocalPlaneToGlobal</definition>
        <argsstring>(const float modelMatrix[16], const idPlane &amp;in, idPlane &amp;out)</argsstring>
        <name>R_LocalPlaneToGlobal</name>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="554" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="554" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a40b2d52eea993e35c7d9a337e3fc006d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_TransformEyeZToWin</definition>
        <argsstring>(float src_z, const float *projectionMatrix, float &amp;dst_z)</argsstring>
        <name>R_TransformEyeZToWin</name>
        <param>
          <type>float</type>
          <declname>src_z</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>projectionMatrix</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dst_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="564" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="564" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1ab6ac192e69c3ad44d0cec990a1955f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_RadiusCullLocalBox</definition>
        <argsstring>(const idBounds &amp;bounds, const float modelMatrix[16], int numPlanes, const idPlane *planes)</argsstring>
        <name>R_RadiusCullLocalBox</name>
        <param>
          <type>const <ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>int</type>
          <declname>numPlanes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="587" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="587" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a0135f0e6fb39b07e44e905a09c99403c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_CornerCullLocalBox</definition>
        <argsstring>(const idBounds &amp;bounds, const float modelMatrix[16], int numPlanes, const idPlane *planes)</argsstring>
        <name>R_CornerCullLocalBox</name>
        <param>
          <type>const <ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>int</type>
          <declname>numPlanes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="625" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="625" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1ac2b89f25388d9d72dc099a8025d967bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_CullLocalBox</definition>
        <argsstring>(const idBounds &amp;bounds, const float modelMatrix[16], int numPlanes, const idPlane *planes)</argsstring>
        <name>R_CullLocalBox</name>
        <param>
          <type>const <ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>modelMatrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>int</type>
          <declname>numPlanes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="675" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="675" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a3dd67b6f8733311d9999f5f402c8cbc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_TransformModelToClip</definition>
        <argsstring>(const idVec3 &amp;src, const float *modelMatrix, const float *projectionMatrix, idPlane &amp;eye, idPlane &amp;dst)</argsstring>
        <name>R_TransformModelToClip</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>modelMatrix</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>projectionMatrix</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>eye</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="687" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="687" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a3dbab99658012b749eddae2f54ad763d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_GlobalToNormalizedDeviceCoordinates</definition>
        <argsstring>(const idVec3 &amp;global, idVec3 &amp;ndc)</argsstring>
        <name>R_GlobalToNormalizedDeviceCoordinates</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>global</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>ndc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="714" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="714" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a30a87b83765f158488e34d3818275bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_TransformClipToDevice</definition>
        <argsstring>(const idPlane &amp;clip, const viewDef_t *view, idVec3 &amp;normalized)</argsstring>
        <name>R_TransformClipToDevice</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>clip</declname>
        </param>
        <param>
          <type>const <ref refid="structview_def__s" kindref="compound">viewDef_t</ref> *</type>
          <declname>view</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normalized</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="771" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="771" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a903966c0539e7da063ea127a9f6bfc7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myGlMultMatrix</definition>
        <argsstring>(const float a[16], const float b[16], float out[16])</argsstring>
        <name>myGlMultMatrix</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>float</type>
          <declname>out</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="783" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="783" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a3f00bf71386e9829c1e50c140c0a31bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_TransposeGLMatrix</definition>
        <argsstring>(const float in[16], float out[16])</argsstring>
        <name>R_TransposeGLMatrix</name>
        <param>
          <type>const float</type>
          <declname>in</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>float</type>
          <declname>out</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="821" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="821" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1abe986972f72cad3dc38c8560315111c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SetViewMatrix</definition>
        <argsstring>(viewDef_t *viewDef)</argsstring>
        <name>R_SetViewMatrix</name>
        <param>
          <type><ref refid="structview_def__s" kindref="compound">viewDef_t</ref> *</type>
          <declname>viewDef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="838" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="838" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1add25dae61ddc2d814c04571bccced5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SetupProjection</definition>
        <argsstring>(void)</argsstring>
        <name>R_SetupProjection</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="895" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="895" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a1dcc61660559b08624fa655b34940098" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_SetupViewFrustum</definition>
        <argsstring>(void)</argsstring>
        <name>R_SetupViewFrustum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="968" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="968" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a17b5412321466af7d7291174d8755b4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_ConstrainViewFrustum</definition>
        <argsstring>(void)</argsstring>
        <name>R_ConstrainViewFrustum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="1016" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="1016" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a8d298a88d8551f1496d78b3a6fe25a4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int R_QsortSurfaces</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>R_QsortSurfaces</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="1049" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="1049" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1a76e14f7c7274c9ca98d3d0546923236f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_SortDrawSurfs</definition>
        <argsstring>(void)</argsstring>
        <name>R_SortDrawSurfs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="1070" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="1070" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="tr__main_8cpp_1ac697f21ba377c3bdc2e4d64f2d954af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_RenderView</definition>
        <argsstring>(viewDef_t *parms)</argsstring>
        <name>R_RenderView</name>
        <param>
          <type><ref refid="structview_def__s" kindref="compound">viewDef_t</ref> *</type>
          <declname>parms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" line="1095" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp" bodystart="1095" bodyend="1163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__ppc__</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;vecLib/vecLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__)</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;xmmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//====================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="44"><highlight class="comment">idScreenRect::Clear</highlight></codeline>
<codeline lineno="45"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="46"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idScreenRect::Clear()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>y1<sp/>=<sp/>32000;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>y2<sp/>=<sp/>-32000;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>zmin<sp/>=<sp/>0.0f;<sp/>zmax<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="55"><highlight class="comment">idScreenRect::AddPoint</highlight></codeline>
<codeline lineno="56"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="57"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idScreenRect::AddPoint(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>idMath::FtoiFast(<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>idMath::FtoiFast(<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ix<sp/>&lt;<sp/>x1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ix<sp/>&gt;<sp/>x2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iy<sp/>&lt;<sp/>y1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>iy;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iy<sp/>&gt;<sp/>y2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>iy;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="77"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="78"><highlight class="comment">idScreenRect::Expand</highlight></codeline>
<codeline lineno="79"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="80"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idScreenRect::Expand()<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>x1--;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>y1--;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>x2++;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>y2++;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="89"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="90"><highlight class="comment">idScreenRect::Intersect</highlight></codeline>
<codeline lineno="91"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="92"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idScreenRect::Intersect(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;rect<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.x1<sp/>&gt;<sp/>x1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>rect.x1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.x2<sp/>&lt;<sp/>x2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>rect.x2;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.y1<sp/>&gt;<sp/>y1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>rect.y1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.y2<sp/>&lt;<sp/>y2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>rect.y2;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="110"><highlight class="comment">idScreenRect::Union</highlight></codeline>
<codeline lineno="111"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idScreenRect::Union(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;rect<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.x1<sp/>&lt;<sp/>x1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>rect.x1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.x2<sp/>&gt;<sp/>x2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>rect.x2;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.y1<sp/>&lt;<sp/>y1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>rect.y1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rect.y2<sp/>&gt;<sp/>y2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>rect.y2;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="129"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="130"><highlight class="comment">idScreenRect::Equals</highlight></codeline>
<codeline lineno="131"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="132"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idScreenRect::Equals(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;rect<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>x1<sp/>==<sp/>rect.x1<sp/>&amp;&amp;<sp/>x2<sp/>==<sp/>rect.x2<sp/>&amp;&amp;<sp/>y1<sp/>==<sp/>rect.y1<sp/>&amp;&amp;<sp/>y2<sp/>==<sp/>rect.y2<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="139"><highlight class="comment">idScreenRect::IsEmpty</highlight></codeline>
<codeline lineno="140"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idScreenRect::IsEmpty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>x1<sp/>&gt;<sp/>x2<sp/>||<sp/>y1<sp/>&gt;<sp/>y2<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="147"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="148"><highlight class="comment">R_ScreenRectFromViewFrustumBounds</highlight></codeline>
<codeline lineno="149"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>R_ScreenRectFromViewFrustumBounds(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>screenRect;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>screenRect.x1<sp/>=<sp/>idMath::FtoiFast(<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>bounds[1].y<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>screenRect.x2<sp/>=<sp/>idMath::FtoiFast(<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>bounds[0].y<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>screenRect.y1<sp/>=<sp/>idMath::FtoiFast(<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>bounds[0].z<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>screenRect.y2<sp/>=<sp/>idMath::FtoiFast(<sp/>0.5f<sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>bounds[1].z<sp/>)<sp/>*<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useDepthBoundsTest.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformEyeZToWin(<sp/>-bounds[0].x,<sp/>tr.viewDef-&gt;projectionMatrix,<sp/>screenRect.zmin<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformEyeZToWin(<sp/>-bounds[1].x,<sp/>tr.viewDef-&gt;projectionMatrix,<sp/>screenRect.zmax<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>screenRect;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="169"><highlight class="comment">R_ShowColoredScreenRect</highlight></codeline>
<codeline lineno="170"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_ShowColoredScreenRect(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!rect.IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>colors[]<sp/>=<sp/>{<sp/>colorRed,<sp/>colorGreen,<sp/>colorBlue,<sp/>colorYellow,<sp/>colorMagenta,<sp/>colorCyan,<sp/>colorWhite,<sp/>colorPurple<sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;renderWorld-&gt;DebugScreenRect(<sp/>colors[colorIndex<sp/>&amp;<sp/>7],<sp/>rect,<sp/>tr.viewDef<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="181"><highlight class="comment">R_ToggleSmpFrame</highlight></codeline>
<codeline lineno="182"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="183"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_ToggleSmpFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_lockSurfaces.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>R_FreeDeferredTriSurfs(<sp/>frameData<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>frame-temporary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/><sp/><sp/><sp/><sp/>*frame;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/><sp/>*block;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>highwater<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>R_CountFrameData();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frameData;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>memory<sp/>allocation<sp/>to<sp/>the<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;alloc<sp/>=<sp/>frame-&gt;memory;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>all<sp/>the<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>frame-&gt;memory<sp/>;<sp/>block<sp/>;<sp/>block<sp/>=<sp/>block-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>R_ClearCommandChain();</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//=====================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEMORY_BLOCK_SIZE<sp/><sp/><sp/>0x100000</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="217"><highlight class="comment">R_ShutdownFrameData</highlight></codeline>
<codeline lineno="218"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="219"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_ShutdownFrameData(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/>*frame;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/>*block;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>any<sp/>current<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frameData;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!frame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>R_FreeDeferredTriSurfs(<sp/>frame<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/>*nextBlock;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>frame-&gt;memory<sp/>;<sp/>block<sp/>;<sp/>block<sp/>=<sp/>nextBlock<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextBlock<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>block<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>frame<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>frameData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="242"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="243"><highlight class="comment">R_InitFrameData</highlight></codeline>
<codeline lineno="244"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="245"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_InitFrameData(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/>*frame;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/>*block;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>R_ShutdownFrameData();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>frameData<sp/>=<sp/>(<ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*frameData<sp/>));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frameData;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>MEMORY_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>(<ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/>*)Mem_Alloc(<sp/>size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*block<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_InitFrameData:<sp/>Mem_Alloc()<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;memory<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;memoryHighwater<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>R_ToggleSmpFrame();</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="270"><highlight class="comment">================</highlight></codeline>
<codeline lineno="271"><highlight class="comment">R_CountFrameData</highlight></codeline>
<codeline lineno="272"><highlight class="comment">================</highlight></codeline>
<codeline lineno="273"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>R_CountFrameData(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/><sp/><sp/><sp/><sp/>*frame;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/><sp/>*block;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frameData;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>frame-&gt;memory<sp/>;<sp/>block<sp/>;<sp/>block=block-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>block-&gt;used;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>==<sp/>frame-&gt;alloc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>if<sp/>this<sp/>is<sp/>a<sp/>new<sp/>highwater<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>count<sp/>&gt;<sp/>frame-&gt;memoryHighwater<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;memoryHighwater<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="297"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="298"><highlight class="comment">R_StaticAlloc</highlight></codeline>
<codeline lineno="299"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="300"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*R_StaticAlloc(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*buf;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.pc.c_alloc++;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.staticAllocCount<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>Mem_Alloc(<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>exit<sp/>on<sp/>failure<sp/>on<sp/>zero<sp/>length<sp/>allocations<sp/>since<sp/>the<sp/>old<sp/>code<sp/>didn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buf<sp/>&amp;&amp;<sp/>(<sp/>bytes<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_StaticAlloc<sp/>failed<sp/>on<sp/>%i<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="318"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="319"><highlight class="comment">R_ClearedStaticAlloc</highlight></codeline>
<codeline lineno="320"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="321"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*R_ClearedStaticAlloc(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*buf;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>R_StaticAlloc(<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memset(<sp/>buf,<sp/>0,<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="331"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="332"><highlight class="comment">R_StaticFree</highlight></codeline>
<codeline lineno="333"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_StaticFree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.pc.c_free++;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="341"><highlight class="comment">================</highlight></codeline>
<codeline lineno="342"><highlight class="comment">R_FrameAlloc</highlight></codeline>
<codeline lineno="343"><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment">This<sp/>data<sp/>will<sp/>be<sp/>automatically<sp/>freed<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="345"><highlight class="comment">current<sp/>frame&apos;s<sp/>back<sp/>end<sp/>completes.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">This<sp/>should<sp/>only<sp/>be<sp/>called<sp/>by<sp/>the<sp/>front<sp/>end.<sp/><sp/>The</highlight></codeline>
<codeline lineno="348"><highlight class="comment">back<sp/>end<sp/>shouldn&apos;t<sp/>need<sp/>to<sp/>allocate<sp/>memory.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment">If<sp/>we<sp/>passed<sp/>smpFrame<sp/>in,<sp/>the<sp/>back<sp/>end<sp/>could</highlight></codeline>
<codeline lineno="351"><highlight class="comment">alloc<sp/>memory,<sp/>because<sp/>it<sp/>will<sp/>always<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="352"><highlight class="comment">different<sp/>frameData<sp/>than<sp/>the<sp/>front<sp/>end<sp/>is<sp/>using.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">All<sp/>temporary<sp/>data,<sp/>like<sp/>dynamic<sp/>tesselations</highlight></codeline>
<codeline lineno="355"><highlight class="comment">and<sp/>local<sp/>spaces<sp/>are<sp/>allocated<sp/>here.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment">The<sp/>memory<sp/>will<sp/>not<sp/>move,<sp/>but<sp/>it<sp/>may<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="358"><highlight class="comment">contiguous<sp/>with<sp/>previous<sp/>allocations<sp/>even</highlight></codeline>
<codeline lineno="359"><highlight class="comment">from<sp/>this<sp/>frame.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"></highlight></codeline>
<codeline lineno="361"><highlight class="comment">The<sp/>memory<sp/>is<sp/>NOT<sp/>zero<sp/>filled.</highlight></codeline>
<codeline lineno="362"><highlight class="comment">Should<sp/>part<sp/>of<sp/>this<sp/>be<sp/>inlined<sp/>in<sp/>a<sp/>macro?</highlight></codeline>
<codeline lineno="363"><highlight class="comment">================</highlight></codeline>
<codeline lineno="364"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*R_FrameAlloc(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_data__t" kindref="compound">frameData_t</ref><sp/><sp/><sp/><sp/><sp/>*frame;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/><sp/>*block;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buf;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>=<sp/>(bytes+16)&amp;~15;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>it<sp/>can<sp/>be<sp/>satisfied<sp/>in<sp/>the<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frameData;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>frame-&gt;alloc;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;size<sp/>-<sp/>block-&gt;used<sp/>&gt;=<sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>block-&gt;base<sp/>+<sp/>block-&gt;used;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;used<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>to<sp/>the<sp/>next<sp/>memory<sp/>block<sp/>if<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>block<sp/>if<sp/>we<sp/>are<sp/>at<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>MEMORY_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>(<ref refid="structframe_memory_block__s" kindref="compound">frameMemoryBlock_t</ref><sp/>*)Mem_Alloc(<sp/>size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*block<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_FrameAlloc:<sp/>Mem_Alloc()<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;alloc-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>could<sp/>fix<sp/>this<sp/>if<sp/>we<sp/>needed<sp/>to...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bytes<sp/>&gt;<sp/>block-&gt;size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_FrameAlloc<sp/>of<sp/>%i<sp/>exceeded<sp/>MEMORY_BLOCK_SIZE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;alloc<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;used<sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block-&gt;base;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="413"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="414"><highlight class="comment">R_ClearedFrameAlloc</highlight></codeline>
<codeline lineno="415"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="416"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*R_ClearedFrameAlloc(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*r;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>R_FrameAlloc(<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memset(<sp/>r,<sp/>0,<sp/>bytes<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="427"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="428"><highlight class="comment">R_FrameFree</highlight></codeline>
<codeline lineno="429"><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment">This<sp/>does<sp/>nothing<sp/>at<sp/>all,<sp/>as<sp/>the<sp/>frame<sp/>data<sp/>is<sp/>reused<sp/>every<sp/>frame</highlight></codeline>
<codeline lineno="431"><highlight class="comment">and<sp/>can<sp/>only<sp/>be<sp/>stack<sp/>allocated.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">The<sp/>only<sp/>reason<sp/>for<sp/>it&apos;s<sp/>existance<sp/>is<sp/>so<sp/>functions<sp/>that<sp/>can</highlight></codeline>
<codeline lineno="434"><highlight class="comment">use<sp/>either<sp/>static<sp/>or<sp/>frame<sp/>memory<sp/>can<sp/>set<sp/>function<sp/>pointers</highlight></codeline>
<codeline lineno="435"><highlight class="comment">to<sp/>both<sp/>alloc<sp/>and<sp/>free.</highlight></codeline>
<codeline lineno="436"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_FrameFree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_AxisToModelMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[0]<sp/>=<sp/>axis[0][0];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[4]<sp/>=<sp/>axis[1][0];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[8]<sp/>=<sp/>axis[2][0];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[12]<sp/>=<sp/>origin[0];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[1]<sp/>=<sp/>axis[0][1];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[5]<sp/>=<sp/>axis[1][1];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[9]<sp/>=<sp/>axis[2][1];</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[13]<sp/>=<sp/>origin[1];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[2]<sp/>=<sp/>axis[0][2];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[6]<sp/>=<sp/>axis[1][2];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[10]<sp/>=<sp/>axis[2][2];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[14]<sp/>=<sp/>origin[2];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[7]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[11]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrix[15]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>these<sp/>assume<sp/>no<sp/>skewing<sp/>or<sp/>scaling<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_LocalPointToGlobal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;in,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__)</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>m0,<sp/>m1,<sp/>m2,<sp/>m3;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>in0,<sp/>in1,<sp/>in2;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>i0,i1,i2;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>i0<sp/>=<sp/>in[0];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>in[1];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>in[2];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>_mm_loadu_ps(&amp;modelMatrix[0]);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>_mm_loadu_ps(&amp;modelMatrix[4]);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>_mm_loadu_ps(&amp;modelMatrix[8]);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>_mm_loadu_ps(&amp;modelMatrix[12]);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>in0<sp/>=<sp/>_mm_load1_ps(&amp;i0);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>in1<sp/>=<sp/>_mm_load1_ps(&amp;i1);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>in2<sp/>=<sp/>_mm_load1_ps(&amp;i2);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>_mm_mul_ps(m0,<sp/>in0);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>_mm_mul_ps(m1,<sp/>in1);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>_mm_mul_ps(m2,<sp/>in2);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>_mm_add_ps(m0,<sp/>m1);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>_mm_add_ps(m0,<sp/>m2);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>_mm_add_ps(m0,<sp/>m3);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_store_ss(&amp;out[0],<sp/>m0);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>(__m128)<sp/>_mm_shuffle_epi32((__m128i)m0,<sp/>0x55);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_store_ss(&amp;out[1],<sp/>m1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>_mm_movehl_ps(m2,<sp/>m0);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_store_ss(&amp;out[2],<sp/>m2);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[0]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[4]</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[8]<sp/>+<sp/>modelMatrix[12];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[1]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[5]</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[9]<sp/>+<sp/>modelMatrix[13];</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[2]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[6]</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[10]<sp/>+<sp/>modelMatrix[14];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_PointTimesMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;in,<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[0]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[4]</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[8]<sp/>+<sp/>modelMatrix[12];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[1]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[5]</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[9]<sp/>+<sp/>modelMatrix[13];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[2]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[6]</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[10]<sp/>+<sp/>modelMatrix[14];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[3]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[7]</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[11]<sp/>+<sp/>modelMatrix[15];</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_GlobalPointToLocal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;in,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorSubtract(<sp/>in,<sp/>&amp;modelMatrix[12],<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>DotProduct(<sp/>temp,<sp/>&amp;modelMatrix[0]<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>DotProduct(<sp/>temp,<sp/>&amp;modelMatrix[4]<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>DotProduct(<sp/>temp,<sp/>&amp;modelMatrix[8]<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_LocalVectorToGlobal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;in,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[0]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[4]</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[8];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[1]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[5]</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[9];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>in[0]<sp/>*<sp/>modelMatrix[2]<sp/>+<sp/>in[1]<sp/>*<sp/>modelMatrix[6]</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>in[2]<sp/>*<sp/>modelMatrix[10];</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_GlobalVectorToLocal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;in,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[0]<sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[4]<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[8]<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_GlobalPlaneToLocal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;in,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[0]<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[4]<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>DotProduct(<sp/>in,<sp/>&amp;modelMatrix[8]<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>in[3]<sp/>+<sp/>modelMatrix[12]<sp/>*<sp/>in[0]<sp/>+<sp/>modelMatrix[13]<sp/>*<sp/>in[1]<sp/>+<sp/>modelMatrix[14]<sp/>*<sp/>in[2];</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_LocalPlaneToGlobal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;in,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>offset;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>R_LocalVectorToGlobal(<sp/>modelMatrix,<sp/>in.Normal(),<sp/>out.Normal()<sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>modelMatrix[12]<sp/>*<sp/>out[0]<sp/>+<sp/>modelMatrix[13]<sp/>*<sp/>out[1]<sp/>+<sp/>modelMatrix[14]<sp/>*<sp/>out[2];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>in[3]<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transform<sp/>Z<sp/>in<sp/>eye<sp/>coordinates<sp/>to<sp/>window<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_TransformEyeZToWin(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>src_z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*projectionMatrix,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;dst_z<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clip_z,<sp/>clip_w;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>clip_z<sp/>=<sp/>src_z<sp/>*<sp/>projectionMatrix[<sp/>2<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+<sp/>projectionMatrix[<sp/>2<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>clip_w<sp/>=<sp/>src_z<sp/>*<sp/>projectionMatrix[<sp/>3<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+<sp/>projectionMatrix[<sp/>3<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip_w<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_z<sp/>=<sp/>0.0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>near<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_z<sp/>=<sp/>clip_z<sp/>/<sp/>clip_w;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_z<sp/>=<sp/>dst_z<sp/>*<sp/>0.5f<sp/>+<sp/>0.5f;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>window<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="580"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="581"><highlight class="comment">R_RadiusCullLocalBox</highlight></codeline>
<codeline lineno="582"><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">A<sp/>fast,<sp/>conservative<sp/>center-to-corner<sp/>culling<sp/>test</highlight></codeline>
<codeline lineno="584"><highlight class="comment">Returns<sp/>true<sp/>if<sp/>the<sp/>box<sp/>is<sp/>outside<sp/>the<sp/>given<sp/>global<sp/>frustum,<sp/>(positive<sp/>sides<sp/>are<sp/>out)</highlight></codeline>
<codeline lineno="585"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="586"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_RadiusCullLocalBox(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPlanes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>*planes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>worldOrigin;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldRadius;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/>*frust;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCulling.GetInteger()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>surface<sp/>bounds<sp/>into<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>localOrigin<sp/>=<sp/>(<sp/>bounds[0]<sp/>+<sp/>bounds[1]<sp/>)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>modelMatrix,<sp/>localOrigin,<sp/>worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>worldRadius<sp/>=<sp/>(bounds[0]<sp/>-<sp/>localOrigin).Length();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>won&apos;t<sp/>be<sp/>correct<sp/>for<sp/>scaled<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numPlanes<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frust<sp/>=<sp/>planes<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>frust-&gt;Distance(<sp/>worldOrigin<sp/>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>worldRadius<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>culled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>culled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="617"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="618"><highlight class="comment">R_CornerCullLocalBox</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">Tests<sp/>all<sp/>corners<sp/>against<sp/>the<sp/>frustum.</highlight></codeline>
<codeline lineno="621"><highlight class="comment">Can<sp/>still<sp/>generate<sp/>a<sp/>few<sp/>false<sp/>positives<sp/>when<sp/>the<sp/>box<sp/>is<sp/>outside<sp/>a<sp/>corner.</highlight></codeline>
<codeline lineno="622"><highlight class="comment">Returns<sp/>true<sp/>if<sp/>the<sp/>box<sp/>is<sp/>outside<sp/>the<sp/>given<sp/>global<sp/>frustum,<sp/>(positive<sp/>sides<sp/>are<sp/>out)</highlight></codeline>
<codeline lineno="623"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="624"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_CornerCullLocalBox(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPlanes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>*planes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>transformed[8];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dists[8];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>v;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>*frust;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>disable<sp/>box<sp/>culling<sp/>for<sp/>experimental<sp/>timing<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCulling.GetInteger()<sp/>&lt;<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>into<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>8<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>bounds[i&amp;1][0];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[1]<sp/>=<sp/>bounds[(i&gt;&gt;1)&amp;1][1];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[2]<sp/>=<sp/>bounds[(i&gt;&gt;2)&amp;1][2];</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>modelMatrix,<sp/>v,<sp/>transformed[i]<sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>against<sp/>frustum<sp/>planes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numPlanes<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frust<sp/>=<sp/>planes<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>8<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dists[j]<sp/>=<sp/>frust-&gt;Distance(<sp/>transformed[j]<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dists[j]<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>==<sp/>8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>points<sp/>were<sp/>behind<sp/>one<sp/>of<sp/>the<sp/>planes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.pc.c_box_cull_out++;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.pc.c_box_cull_in++;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>culled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="668"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="669"><highlight class="comment">R_CullLocalBox</highlight></codeline>
<codeline lineno="670"><highlight class="comment"></highlight></codeline>
<codeline lineno="671"><highlight class="comment">Performs<sp/>quick<sp/>test<sp/>before<sp/>expensive<sp/>test</highlight></codeline>
<codeline lineno="672"><highlight class="comment">Returns<sp/>true<sp/>if<sp/>the<sp/>box<sp/>is<sp/>outside<sp/>the<sp/>given<sp/>global<sp/>frustum,<sp/>(positive<sp/>sides<sp/>are<sp/>out)</highlight></codeline>
<codeline lineno="673"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="674"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_CullLocalBox(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>modelMatrix[16],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPlanes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>*planes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_RadiusCullLocalBox(<sp/>bounds,<sp/>modelMatrix,<sp/>numPlanes,<sp/>planes<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_CornerCullLocalBox(<sp/>bounds,<sp/>modelMatrix,<sp/>numPlanes,<sp/>planes<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="683"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="684"><highlight class="comment">R_TransformModelToClip</highlight></codeline>
<codeline lineno="685"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="686"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_TransformModelToClip(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*modelMatrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*projectionMatrix,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;eye,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;dst<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src[0]<sp/>*<sp/>modelMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src[1]<sp/>*<sp/>modelMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src[2]<sp/>*<sp/>modelMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>*<sp/>modelMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye[0]<sp/>*<sp/>projectionMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye[1]<sp/>*<sp/>projectionMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye[2]<sp/>*<sp/>projectionMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eye[3]<sp/>*<sp/>projectionMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="708"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="709"><highlight class="comment">R_GlobalToNormalizedDeviceCoordinates</highlight></codeline>
<codeline lineno="710"><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment">-1<sp/>to<sp/>1<sp/>range<sp/>in<sp/>x,<sp/>y,<sp/>and<sp/>z</highlight></codeline>
<codeline lineno="712"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="713"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_GlobalToNormalizedDeviceCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;global,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;ndc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>view;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>clip;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_D3XP<sp/>added<sp/>work<sp/>on<sp/>primaryView<sp/>when<sp/>no<sp/>viewDef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tr.viewDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i<sp/>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[0]<sp/>*<sp/>tr.primaryView-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[1]<sp/>*<sp/>tr.primaryView-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[2]<sp/>*<sp/>tr.primaryView-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.primaryView-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i<sp/>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[0]<sp/>*<sp/>tr.primaryView-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[1]<sp/>*<sp/>tr.primaryView-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[2]<sp/>*<sp/>tr.primaryView-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[3]<sp/>*<sp/>tr.primaryView-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i<sp/>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[0]<sp/>*<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[1]<sp/>*<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global[2]<sp/>*<sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;worldSpace.modelViewMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i<sp/>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip[i]<sp/>=<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[0]<sp/>*<sp/>tr.viewDef-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>0<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[1]<sp/>*<sp/>tr.viewDef-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>1<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[2]<sp/>*<sp/>tr.viewDef-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>2<sp/>*<sp/>4<sp/>]<sp/>+</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view[3]<sp/>*<sp/>tr.viewDef-&gt;projectionMatrix[<sp/>i<sp/>+<sp/>3<sp/>*<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>ndc[0]<sp/>=<sp/>clip[0]<sp/>/<sp/>clip[3];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>ndc[1]<sp/>=<sp/>clip[1]<sp/>/<sp/>clip[3];</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>ndc[2]<sp/>=<sp/>(<sp/>clip[2]<sp/>+<sp/>clip[3]<sp/>)<sp/>/<sp/>(<sp/>2<sp/>*<sp/>clip[3]<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="765"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="766"><highlight class="comment">R_TransformClipToDevice</highlight></codeline>
<codeline lineno="767"><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment">Clip<sp/>to<sp/>normalized<sp/>device<sp/>coordinates</highlight></codeline>
<codeline lineno="769"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="770"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_TransformClipToDevice(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;clip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*view,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;normalized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized[0]<sp/>=<sp/>clip[0]<sp/>/<sp/>clip[3];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized[1]<sp/>=<sp/>clip[1]<sp/>/<sp/>clip[3];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized[2]<sp/>=<sp/>clip[2]<sp/>/<sp/>clip[3];</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="779"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="780"><highlight class="comment">myGlMultMatrix</highlight></codeline>
<codeline lineno="781"><highlight class="comment">==========================</highlight></codeline>
<codeline lineno="782"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>myGlMultMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b[16],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out[16]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>4<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[<sp/>i<sp/>*<sp/>4<sp/>+<sp/>j<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>[<sp/>i<sp/>*<sp/>4<sp/>+<sp/>0<sp/>]<sp/>*<sp/>b<sp/>[<sp/>0<sp/>*<sp/>4<sp/>+<sp/>j<sp/>]</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>a<sp/>[<sp/>i<sp/>*<sp/>4<sp/>+<sp/>1<sp/>]<sp/>*<sp/>b<sp/>[<sp/>1<sp/>*<sp/>4<sp/>+<sp/>j<sp/>]</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>a<sp/>[<sp/>i<sp/>*<sp/>4<sp/>+<sp/>2<sp/>]<sp/>*<sp/>b<sp/>[<sp/>2<sp/>*<sp/>4<sp/>+<sp/>j<sp/>]</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>a<sp/>[<sp/>i<sp/>*<sp/>4<sp/>+<sp/>3<sp/>]<sp/>*<sp/>b<sp/>[<sp/>3<sp/>*<sp/>4<sp/>+<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>out[0*4+0]<sp/>=<sp/>a[0*4+0]*b[0*4+0]<sp/>+<sp/>a[0*4+1]*b[1*4+0]<sp/>+<sp/>a[0*4+2]*b[2*4+0]<sp/>+<sp/>a[0*4+3]*b[3*4+0];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0*4+1]<sp/>=<sp/>a[0*4+0]*b[0*4+1]<sp/>+<sp/>a[0*4+1]*b[1*4+1]<sp/>+<sp/>a[0*4+2]*b[2*4+1]<sp/>+<sp/>a[0*4+3]*b[3*4+1];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0*4+2]<sp/>=<sp/>a[0*4+0]*b[0*4+2]<sp/>+<sp/>a[0*4+1]*b[1*4+2]<sp/>+<sp/>a[0*4+2]*b[2*4+2]<sp/>+<sp/>a[0*4+3]*b[3*4+2];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0*4+3]<sp/>=<sp/>a[0*4+0]*b[0*4+3]<sp/>+<sp/>a[0*4+1]*b[1*4+3]<sp/>+<sp/>a[0*4+2]*b[2*4+3]<sp/>+<sp/>a[0*4+3]*b[3*4+3];</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1*4+0]<sp/>=<sp/>a[1*4+0]*b[0*4+0]<sp/>+<sp/>a[1*4+1]*b[1*4+0]<sp/>+<sp/>a[1*4+2]*b[2*4+0]<sp/>+<sp/>a[1*4+3]*b[3*4+0];</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1*4+1]<sp/>=<sp/>a[1*4+0]*b[0*4+1]<sp/>+<sp/>a[1*4+1]*b[1*4+1]<sp/>+<sp/>a[1*4+2]*b[2*4+1]<sp/>+<sp/>a[1*4+3]*b[3*4+1];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1*4+2]<sp/>=<sp/>a[1*4+0]*b[0*4+2]<sp/>+<sp/>a[1*4+1]*b[1*4+2]<sp/>+<sp/>a[1*4+2]*b[2*4+2]<sp/>+<sp/>a[1*4+3]*b[3*4+2];</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1*4+3]<sp/>=<sp/>a[1*4+0]*b[0*4+3]<sp/>+<sp/>a[1*4+1]*b[1*4+3]<sp/>+<sp/>a[1*4+2]*b[2*4+3]<sp/>+<sp/>a[1*4+3]*b[3*4+3];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2*4+0]<sp/>=<sp/>a[2*4+0]*b[0*4+0]<sp/>+<sp/>a[2*4+1]*b[1*4+0]<sp/>+<sp/>a[2*4+2]*b[2*4+0]<sp/>+<sp/>a[2*4+3]*b[3*4+0];</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2*4+1]<sp/>=<sp/>a[2*4+0]*b[0*4+1]<sp/>+<sp/>a[2*4+1]*b[1*4+1]<sp/>+<sp/>a[2*4+2]*b[2*4+1]<sp/>+<sp/>a[2*4+3]*b[3*4+1];</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2*4+2]<sp/>=<sp/>a[2*4+0]*b[0*4+2]<sp/>+<sp/>a[2*4+1]*b[1*4+2]<sp/>+<sp/>a[2*4+2]*b[2*4+2]<sp/>+<sp/>a[2*4+3]*b[3*4+2];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2*4+3]<sp/>=<sp/>a[2*4+0]*b[0*4+3]<sp/>+<sp/>a[2*4+1]*b[1*4+3]<sp/>+<sp/>a[2*4+2]*b[2*4+3]<sp/>+<sp/>a[2*4+3]*b[3*4+3];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3*4+0]<sp/>=<sp/>a[3*4+0]*b[0*4+0]<sp/>+<sp/>a[3*4+1]*b[1*4+0]<sp/>+<sp/>a[3*4+2]*b[2*4+0]<sp/>+<sp/>a[3*4+3]*b[3*4+0];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3*4+1]<sp/>=<sp/>a[3*4+0]*b[0*4+1]<sp/>+<sp/>a[3*4+1]*b[1*4+1]<sp/>+<sp/>a[3*4+2]*b[2*4+1]<sp/>+<sp/>a[3*4+3]*b[3*4+1];</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3*4+2]<sp/>=<sp/>a[3*4+0]*b[0*4+2]<sp/>+<sp/>a[3*4+1]*b[1*4+2]<sp/>+<sp/>a[3*4+2]*b[2*4+2]<sp/>+<sp/>a[3*4+3]*b[3*4+2];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3*4+3]<sp/>=<sp/>a[3*4+0]*b[0*4+3]<sp/>+<sp/>a[3*4+1]*b[1*4+3]<sp/>+<sp/>a[3*4+2]*b[2*4+3]<sp/>+<sp/>a[3*4+3]*b[3*4+3];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="818"><highlight class="comment">R_TransposeGLMatrix</highlight></codeline>
<codeline lineno="819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="820"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_TransposeGLMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>in[16],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out[16]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>4<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i*4+j]<sp/>=<sp/>in[j*4+i];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="832"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="833"><highlight class="comment">R_SetViewMatrix</highlight></codeline>
<codeline lineno="834"><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment">Sets<sp/>up<sp/>the<sp/>world<sp/>to<sp/>view<sp/>matrix<sp/>for<sp/>a<sp/>given<sp/>viewParm</highlight></codeline>
<codeline lineno="836"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="837"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SetViewMatrix(<sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*viewDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>origin;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*world;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>viewerMatrix[16];</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>s_flipMatrix[16]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>from<sp/>our<sp/>coordinate<sp/>system<sp/>(looking<sp/>down<sp/>X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>OpenGL&apos;s<sp/>coordinate<sp/>system<sp/>(looking<sp/>down<sp/>-Z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>-1,<sp/>0,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>1</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>world<sp/>=<sp/>&amp;viewDef-&gt;worldSpace;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>world,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*world)<sp/>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>model<sp/>matrix<sp/>is<sp/>an<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;modelMatrix[0*4+0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;modelMatrix[1*4+1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>world-&gt;modelMatrix[2*4+2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>by<sp/>the<sp/>camera<sp/>placement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>viewDef-&gt;renderView.vieworg;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[0]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[0][0];</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[4]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[0][1];</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[8]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[0][2];</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[12]<sp/>=<sp/>-origin[0]<sp/>*<sp/>viewerMatrix[0]<sp/>+<sp/>-origin[1]<sp/>*<sp/>viewerMatrix[4]<sp/>+<sp/>-origin[2]<sp/>*<sp/>viewerMatrix[8];</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[1]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[1][0];</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[5]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[1][1];</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[9]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[1][2];</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[13]<sp/>=<sp/>-origin[0]<sp/>*<sp/>viewerMatrix[1]<sp/>+<sp/>-origin[1]<sp/>*<sp/>viewerMatrix[5]<sp/>+<sp/>-origin[2]<sp/>*<sp/>viewerMatrix[9];</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[2]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[2][0];</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[6]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[2][1];</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[10]<sp/>=<sp/>viewDef-&gt;renderView.viewaxis[2][2];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[14]<sp/>=<sp/>-origin[0]<sp/>*<sp/>viewerMatrix[2]<sp/>+<sp/>-origin[1]<sp/>*<sp/>viewerMatrix[6]<sp/>+<sp/>-origin[2]<sp/>*<sp/>viewerMatrix[10];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[7]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[11]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>viewerMatrix[15]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>from<sp/>our<sp/>coordinate<sp/>system<sp/>(looking<sp/>down<sp/>X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>OpenGL&apos;s<sp/>coordinate<sp/>system<sp/>(looking<sp/>down<sp/>-Z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>myGlMultMatrix(<sp/>viewerMatrix,<sp/>s_flipMatrix,<sp/>world-&gt;modelViewMatrix<sp/>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="889"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="890"><highlight class="comment">R_SetupProjection</highlight></codeline>
<codeline lineno="891"><highlight class="comment"></highlight></codeline>
<codeline lineno="892"><highlight class="comment">This<sp/>uses<sp/>the<sp/>&quot;infinite<sp/>far<sp/>z&quot;<sp/>trick</highlight></codeline>
<codeline lineno="893"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="894"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SetupProjection(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>xmin,<sp/>xmax,<sp/>ymin,<sp/>ymax;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>zNear;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>jitterx,<sp/>jittery;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/><ref refid="classid_random" kindref="compound">idRandom</ref><sp/>random;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random<sp/>jittering<sp/>is<sp/>usefull<sp/>when<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>frames<sp/>are<sp/>going<sp/>to<sp/>be<sp/>blended<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>motion<sp/>blurred<sp/>anti-aliasing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_jitter.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterx<sp/>=<sp/>random.RandomFloat();</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jittery<sp/>=<sp/>random.RandomFloat();</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterx<sp/>=<sp/>jittery<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>projection<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>zNear<sp/><sp/><sp/>=<sp/>r_znear.GetFloat();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;renderView.cramZNear<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zNear<sp/>*=<sp/>0.25;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>zNear<sp/>*<sp/>tan(<sp/>tr.viewDef-&gt;renderView.fov_y<sp/>*<sp/>idMath::PI<sp/>/<sp/>360.0f<sp/>);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>-ymax;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>zNear<sp/>*<sp/>tan(<sp/>tr.viewDef-&gt;renderView.fov_x<sp/>*<sp/>idMath::PI<sp/>/<sp/>360.0f<sp/>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>-xmax;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>xmax<sp/>-<sp/>xmin;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>ymax<sp/>-<sp/>ymin;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>jitterx<sp/>=<sp/>jitterx<sp/>*<sp/>width<sp/>/<sp/>(<sp/>tr.viewDef-&gt;viewport.x2<sp/>-<sp/>tr.viewDef-&gt;viewport.x1<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>+=<sp/>jitterx;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>+=<sp/>jitterx;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>jittery<sp/>=<sp/>jittery<sp/>*<sp/>height<sp/>/<sp/>(<sp/>tr.viewDef-&gt;viewport.y2<sp/>-<sp/>tr.viewDef-&gt;viewport.y1<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>+=<sp/>jittery;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>+=<sp/>jittery;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[0]<sp/>=<sp/>2<sp/>*<sp/>zNear<sp/>/<sp/>width;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[8]<sp/>=<sp/>(<sp/>xmax<sp/>+<sp/>xmin<sp/>)<sp/>/<sp/>width;<sp/><sp/></highlight><highlight class="comment">//<sp/>normally<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[12]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[5]<sp/>=<sp/>2<sp/>*<sp/>zNear<sp/>/<sp/>height;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[9]<sp/>=<sp/>(<sp/>ymax<sp/>+<sp/>ymin<sp/>)<sp/>/<sp/>height;<sp/></highlight><highlight class="comment">//<sp/>normally<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[13]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>far-plane-at-infinity<sp/>formulation,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>crunches<sp/>the<sp/>Z<sp/>range<sp/>slightly<sp/>so<sp/>w=0<sp/>vertexes<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rasterize<sp/>right<sp/>at<sp/>the<sp/>wraparound<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[6]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[10]<sp/>=<sp/>-0.999f;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[14]<sp/>=<sp/>-2.0f<sp/>*<sp/>zNear;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[7]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[11]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix[15]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="961"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="962"><highlight class="comment">R_SetupViewFrustum</highlight></codeline>
<codeline lineno="963"><highlight class="comment"></highlight></codeline>
<codeline lineno="964"><highlight class="comment">Setup<sp/>that<sp/>culling<sp/>frustum<sp/>planes<sp/>for<sp/>the<sp/>current<sp/>view</highlight></codeline>
<codeline lineno="965"><highlight class="comment">FIXME:<sp/>derive<sp/>from<sp/>modelview<sp/>matrix<sp/>times<sp/>projection<sp/>matrix</highlight></codeline>
<codeline lineno="966"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="967"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SetupViewFrustum(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>xs,<sp/>xc;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>ang;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>ang<sp/>=<sp/>DEG2RAD(<sp/>tr.viewDef-&gt;renderView.fov_x<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>idMath::SinCos(<sp/>ang,<sp/>xs,<sp/>xc<sp/>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[0]<sp/>=<sp/>xs<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[0]<sp/>+<sp/>xc<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[1];</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[1]<sp/>=<sp/>xs<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[0]<sp/>-<sp/>xc<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[1];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>ang<sp/>=<sp/>DEG2RAD(<sp/>tr.viewDef-&gt;renderView.fov_y<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>idMath::SinCos(<sp/>ang,<sp/>xs,<sp/>xc<sp/>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[2]<sp/>=<sp/>xs<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[0]<sp/>+<sp/>xc<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[2];</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[3]<sp/>=<sp/>xs<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[0]<sp/>-<sp/>xc<sp/>*<sp/>tr.viewDef-&gt;renderView.viewaxis[2];</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>plane<sp/>four<sp/>is<sp/>the<sp/>front<sp/>clipping<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[4]<sp/>=<sp/></highlight><highlight class="comment">/*<sp/>vec3_origin<sp/>-<sp/>*/</highlight><highlight class="normal"><sp/>tr.viewDef-&gt;renderView.viewaxis[0];</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flip<sp/>direction<sp/>so<sp/>positive<sp/>side<sp/>faces<sp/>out<sp/>(FIXME:<sp/>globally<sp/>unify<sp/>this)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[i]<sp/>=<sp/>-tr.viewDef-&gt;frustum[i].Normal();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;frustum[i][3]<sp/>=<sp/>-(<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>*<sp/>tr.viewDef-&gt;frustum[i].Normal()<sp/>);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually,<sp/>plane<sp/>five<sp/>will<sp/>be<sp/>the<sp/>rear<sp/>clipping<sp/>plane<sp/>for<sp/>fog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dNear,<sp/>dFar,<sp/>dLeft,<sp/>dUp;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>dNear<sp/>=<sp/>r_znear.GetFloat();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.viewDef-&gt;renderView.cramZNear<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNear<sp/>*=<sp/>0.25f;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>dFar<sp/>=<sp/>MAX_WORLD_SIZE;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>dLeft<sp/>=<sp/>dFar<sp/>*<sp/>tan(<sp/>DEG2RAD(<sp/>tr.viewDef-&gt;renderView.fov_x<sp/>*<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>dUp<sp/>=<sp/>dFar<sp/>*<sp/>tan(<sp/>DEG2RAD(<sp/>tr.viewDef-&gt;renderView.fov_y<sp/>*<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.SetOrigin(<sp/>tr.viewDef-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.SetAxis(<sp/>tr.viewDef-&gt;renderView.viewaxis<sp/>);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.SetSize(<sp/>dNear,<sp/>dFar,<sp/>dLeft,<sp/>dUp<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">R_ConstrainViewFrustum</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_ConstrainViewFrustum(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constrain<sp/>the<sp/>view<sp/>frustum<sp/>to<sp/>the<sp/>total<sp/>bounds<sp/>of<sp/>all<sp/>visible<sp/>lights<sp/>and<sp/>visible<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds.Clear();</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/>*vLight<sp/>=<sp/>tr.viewDef-&gt;viewLights;<sp/>vLight;<sp/>vLight<sp/>=<sp/>vLight-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.AddBounds(<sp/>vLight-&gt;lightDef-&gt;frustumTris-&gt;bounds<sp/>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structview_entity__s" kindref="compound">viewEntity_t</ref><sp/>*vEntity<sp/>=<sp/>tr.viewDef-&gt;viewEntitys;<sp/>vEntity;<sp/>vEntity<sp/>=<sp/>vEntity-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.AddBounds(<sp/>vEntity-&gt;entityDef-&gt;referenceBounds<sp/>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.ConstrainToBounds(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useFrustumFarDistance.GetFloat()<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;viewFrustum.MoveFarDistance(<sp/>r_useFrustumFarDistance.GetFloat()<sp/>);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">==========================================================================================</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"></highlight></codeline>
<codeline lineno="1037"><highlight class="comment">DRAWSURF<sp/>SORTING</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment">==========================================================================================</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">=======================</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">R_QsortSurfaces</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"></highlight></codeline>
<codeline lineno="1047"><highlight class="comment">=======================</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>R_QsortSurfaces(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/><sp/><sp/>*ea,<sp/>*eb;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>ea<sp/>=<sp/>*(<ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>**)a;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>eb<sp/>=<sp/>*(<ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>**)b;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ea-&gt;sort<sp/>&lt;<sp/>eb-&gt;sort<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ea-&gt;sort<sp/>&gt;<sp/>eb-&gt;sort<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1067"><highlight class="comment">R_SortDrawSurfs</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1069"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SortDrawSurfs(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>drawsurfs<sp/>by<sp/>sort<sp/>type,<sp/>then<sp/>orientation,<sp/>then<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(<sp/>tr.viewDef-&gt;drawSurfs,<sp/>tr.viewDef-&gt;numDrawSurfs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>tr.viewDef-&gt;drawSurfs[0]<sp/>),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_QsortSurfaces<sp/>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">R_RenderView</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"></highlight></codeline>
<codeline lineno="1089"><highlight class="comment">A<sp/>view<sp/>may<sp/>be<sp/>either<sp/>the<sp/>actual<sp/>camera<sp/>view,</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">a<sp/>mirror<sp/>/<sp/>remote<sp/>location,<sp/>or<sp/>a<sp/>3D<sp/>view<sp/>on<sp/>a<sp/>gui<sp/>surface.</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"></highlight></codeline>
<codeline lineno="1092"><highlight class="comment">Parms<sp/>will<sp/>typically<sp/>be<sp/>allocated<sp/>with<sp/>R_FrameAlloc</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_RenderView(<sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*parms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*oldView;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parms-&gt;renderView.width<sp/>&lt;=<sp/>0<sp/>||<sp/>parms-&gt;renderView.height<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewCount++;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>view<sp/>in<sp/>case<sp/>we<sp/>are<sp/>a<sp/>subview</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>oldView<sp/>=<sp/>tr.viewDef;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef<sp/>=<sp/>parms;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.sortOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>matrix<sp/>for<sp/>world<sp/>space<sp/>to<sp/>eye<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>R_SetViewMatrix(<sp/>tr.viewDef<sp/>);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>four<sp/>sides<sp/>of<sp/>the<sp/>view<sp/>frustum<sp/>are<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>culling<sp/>and<sp/>portal<sp/>visibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>R_SetupViewFrustum();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>set<sp/>the<sp/>projection<sp/>matrix<sp/>before<sp/>doing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>portal-to-screen<sp/>scissor<sp/>box<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>R_SetupProjection();</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>identify<sp/>all<sp/>the<sp/>visible<sp/>portalAreas,<sp/>and<sp/>the<sp/>entityDefs<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lightDefs<sp/>that<sp/>are<sp/>in<sp/>them<sp/>and<sp/>pass<sp/>culling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_render_world_local" kindref="compound">idRenderWorldLocal</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parms-&gt;renderWorld)-&gt;FindViewLightsAndEntities();</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constrain<sp/>the<sp/>view<sp/>frustum<sp/>to<sp/>the<sp/>view<sp/>lights<sp/>and<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>R_ConstrainViewFrustum();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>that<sp/>interactions<sp/>exist<sp/>for<sp/>all<sp/>light<sp/>/<sp/>entity<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>any<sp/>pre-generated<sp/>light<sp/>shadows,<sp/>and<sp/>calculate<sp/>the<sp/>light<sp/>shader<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>R_AddLightSurfaces();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adds<sp/>ambient<sp/>surfaces<sp/>and<sp/>create<sp/>any<sp/>necessary<sp/>interaction<sp/>surfaces<sp/>to<sp/>add<sp/>to<sp/>the<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>R_AddModelSurfaces();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>viewLight<sp/>that<sp/>didn&apos;t<sp/>have<sp/>visible<sp/>surfaces<sp/>can<sp/>have<sp/>it&apos;s<sp/>shadows<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>R_RemoveUnecessaryViewLights();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>all<sp/>the<sp/>ambient<sp/>surfaces<sp/>for<sp/>translucency<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>R_SortDrawSurfs();</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>any<sp/>subviews<sp/>(mirrors,<sp/>cameras,<sp/>etc)<sp/>before<sp/>adding<sp/>this<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_GenerateSubViews()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>debugging<sp/>subviews,<sp/>allow<sp/>the<sp/>skipping<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>view<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_subviewOnly.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>everything<sp/>needed<sp/>to<sp/>the<sp/>demo<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>session-&gt;writeDemo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_render_world_local" kindref="compound">idRenderWorldLocal</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parms-&gt;renderWorld)-&gt;WriteVisibleDefs(<sp/>tr.viewDef<sp/>);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>rendering<sp/>commands<sp/>for<sp/>this<sp/>viewDef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>R_AddDrawViewCmd(<sp/>parms<sp/>);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>view<sp/>in<sp/>case<sp/>we<sp/>are<sp/>a<sp/>subview</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.viewDef<sp/>=<sp/>oldView;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_main.cpp"/>
  </compounddef>
</doxygen>
