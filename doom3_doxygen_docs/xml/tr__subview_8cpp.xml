<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="tr__subview_8cpp" kind="file">
    <compoundname>tr_subview.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
    <innerclass refid="structorientation__t" prot="public">orientation_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="tr__subview_8cpp_1a8deaa6df7e0aa03a84d6d386d012bb95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_MirrorPoint</definition>
        <argsstring>(const idVec3 in, orientation_t *surface, orientation_t *camera, idVec3 &amp;out)</argsstring>
        <name>R_MirrorPoint</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structorientation__t" kindref="compound">orientation_t</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="structorientation__t" kindref="compound">orientation_t</ref> *</type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="46" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a77c9e98d36db7d126138c68a6596c8b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_MirrorVector</definition>
        <argsstring>(const idVec3 in, orientation_t *surface, orientation_t *camera, idVec3 &amp;out)</argsstring>
        <name>R_MirrorVector</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structorientation__t" kindref="compound">orientation_t</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="structorientation__t" kindref="compound">orientation_t</ref> *</type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a4f0ce8f5c38bb89d9ae5dc7310c751b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_PlaneForSurface</definition>
        <argsstring>(const srfTriangles_t *tri, idPlane &amp;plane)</argsstring>
        <name>R_PlaneForSurface</name>
        <param>
          <type>const <ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a6a05b4a72b3f5c628cbd96c203e8dfba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_PreciseCullSurface</definition>
        <argsstring>(const drawSurf_t *drawSurf, idBounds &amp;ndcBounds)</argsstring>
        <name>R_PreciseCullSurface</name>
        <param>
          <type>const <ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>drawSurf</declname>
        </param>
        <param>
          <type><ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>ndcBounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="109" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="109" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a971f3204418adc05b1f8022984af6641" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structview_def__s" kindref="compound">viewDef_t</ref> *</type>
        <definition>static viewDef_t* R_MirrorViewBySurface</definition>
        <argsstring>(drawSurf_t *drawSurf)</argsstring>
        <name>R_MirrorViewBySurface</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>drawSurf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="217" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="217" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a87efa8653801a7c776b737104baad509" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structview_def__s" kindref="compound">viewDef_t</ref> *</type>
        <definition>static viewDef_t* R_XrayViewBySurface</definition>
        <argsstring>(drawSurf_t *drawSurf)</argsstring>
        <name>R_XrayViewBySurface</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>drawSurf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="271" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="271" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1ab213ec9fa67e6e023b72987eb3d085ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_RemoteRender</definition>
        <argsstring>(drawSurf_t *surf, textureStage_t *stage)</argsstring>
        <name>R_RemoteRender</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref> *</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="292" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="292" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a9ecf74a64e6f848b77eadbbbddc5f8b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_MirrorRender</definition>
        <argsstring>(drawSurf_t *surf, textureStage_t *stage, idScreenRect scissor)</argsstring>
        <name>R_MirrorRender</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref> *</type>
          <declname>stage</declname>
        </param>
        <param>
          <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
          <declname>scissor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="351" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="351" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a6e4b46308ba379dab7716936a88a0dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_XrayRender</definition>
        <argsstring>(drawSurf_t *surf, textureStage_t *stage, idScreenRect scissor)</argsstring>
        <name>R_XrayRender</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref> *</type>
          <declname>stage</declname>
        </param>
        <param>
          <type><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref></type>
          <declname>scissor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="401" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="401" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1adb8411c7b9a4eb2fc1c84dc27b3edede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_GenerateSurfaceSubview</definition>
        <argsstring>(drawSurf_t *drawSurf)</argsstring>
        <name>R_GenerateSurfaceSubview</name>
        <param>
          <type><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>drawSurf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="451" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="451" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="tr__subview_8cpp_1a24f573c55e72beae07abfa3083a28a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool R_GenerateSubViews</definition>
        <argsstring>(void)</argsstring>
        <name>R_GenerateSubViews</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" line="549" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp" bodystart="549" bodyend="578"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structorientation__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>origin;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>axis;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="42"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="43"><highlight class="comment">R_MirrorPoint</highlight></codeline>
<codeline lineno="44"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="45"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_MirrorPoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>in,<sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/>*surface,<sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/>*camera,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>local;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>transformed;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>d;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>local<sp/>=<sp/>in<sp/>-<sp/>surface-&gt;origin;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>transformed<sp/>=<sp/>vec3_origin;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>3<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>local<sp/>*<sp/>surface-&gt;axis[i];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformed<sp/>+=<sp/>d<sp/>*<sp/>camera-&gt;axis[i];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>transformed<sp/>+<sp/>camera-&gt;origin;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="65"><highlight class="comment">R_MirrorVector</highlight></codeline>
<codeline lineno="66"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="67"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_MirrorVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>in,<sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/>*surface,<sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/>*camera,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>d;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>vec3_origin;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>3<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>in<sp/>*<sp/>surface-&gt;axis[i];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>d<sp/>*<sp/>camera-&gt;axis[i];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="81"><highlight class="comment">R_PlaneForSurface</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">Returns<sp/>the<sp/>plane<sp/>for<sp/>the<sp/>first<sp/>triangle<sp/>in<sp/>the<sp/>surface</highlight></codeline>
<codeline lineno="84"><highlight class="comment">FIXME:<sp/>check<sp/>for<sp/>degenerate<sp/>triangle?</highlight></codeline>
<codeline lineno="85"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="86"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_PlaneForSurface(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/><sp/><sp/><sp/><sp/><sp/>*v1,<sp/>*v2,<sp/>*v3;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>tri-&gt;verts<sp/>+<sp/>tri-&gt;indexes[0];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>tri-&gt;verts<sp/>+<sp/>tri-&gt;indexes[1];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>tri-&gt;verts<sp/>+<sp/>tri-&gt;indexes[2];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>plane.FromPoints(<sp/>v1-&gt;xyz,<sp/>v2-&gt;xyz,<sp/>v3-&gt;xyz<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="97"><highlight class="comment">=========================</highlight></codeline>
<codeline lineno="98"><highlight class="comment">R_PreciseCullSurface</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">Check<sp/>the<sp/>surface<sp/>for<sp/>visibility<sp/>on<sp/>a<sp/>per-triangle<sp/>basis</highlight></codeline>
<codeline lineno="101"><highlight class="comment">for<sp/>cases<sp/>when<sp/>it<sp/>is<sp/>going<sp/>to<sp/>be<sp/>VERY<sp/>expensive<sp/>to<sp/>draw<sp/>(subviews)</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">If<sp/>not<sp/>culled,<sp/>also<sp/>returns<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>the<sp/>surface<sp/>in<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="comment">Normalized<sp/>Device<sp/>Coordinates,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>used<sp/>to<sp/>crop<sp/>the<sp/>scissor<sp/>rect.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">OPTIMIZE:<sp/>we<sp/>could<sp/>also<sp/>take<sp/>exact<sp/>portal<sp/>passing<sp/>into<sp/>consideration</highlight></codeline>
<codeline lineno="107"><highlight class="comment">=========================</highlight></codeline>
<codeline lineno="108"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_PreciseCullSurface(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*drawSurf,<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;ndcBounds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*tri;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numTriangles;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>clip,<sp/>eye;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointOr;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointAnd;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>localView;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_fixed_winding" kindref="compound">idFixedWinding</ref><sp/>w;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>tri<sp/>=<sp/>drawSurf-&gt;geo;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>pointOr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>pointAnd<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)~0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>exact<sp/>bounds<sp/>of<sp/>the<sp/>triangles<sp/>for<sp/>scissor<sp/>cropping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ndcBounds.Clear();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tri-&gt;numVerts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointFlags;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_TransformModelToClip(<sp/>tri-&gt;verts[i].xyz,<sp/>drawSurf-&gt;space-&gt;modelViewMatrix,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr.viewDef-&gt;projectionMatrix,<sp/>eye,<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip[j]<sp/>&gt;=<sp/>clip[3]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointFlags<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>(j*2));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip[j]<sp/>&lt;=<sp/>-clip[3]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointFlags<sp/>|=<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>(j*2+1));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointAnd<sp/>&amp;=<sp/>pointFlags;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointOr<sp/>|=<sp/>pointFlags;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trivially<sp/>reject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pointAnd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backface<sp/>and<sp/>frustum<sp/>cull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>numTriangles<sp/>=<sp/>tri-&gt;numIndexes<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>R_GlobalPointToLocal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>tr.viewDef-&gt;renderView.vieworg,<sp/>localView<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tri-&gt;numIndexes;<sp/>i<sp/>+=<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>dir,<sp/>normal;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>dot;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;v1<sp/>=<sp/>tri-&gt;verts[tri-&gt;indexes[i]].xyz;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;v2<sp/>=<sp/>tri-&gt;verts[tri-&gt;indexes[i+1]].xyz;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;v3<sp/>=<sp/>tri-&gt;verts[tri-&gt;indexes[i+2]].xyz;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>hack,<sp/>because<sp/>R_GlobalPointToLocal<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>the<sp/>non-normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>that<sp/>we<sp/>get<sp/>from<sp/>the<sp/>gui<sp/>view<sp/>transform.<sp/><sp/>It<sp/>doesn&apos;t<sp/>hurt<sp/>anything,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>know<sp/>that<sp/>all<sp/>gui<sp/>generated<sp/>surfaces<sp/>are<sp/>front<sp/>facing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.guiRecursionLevel<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>care<sp/>that<sp/>it<sp/>isn&apos;t<sp/>normalized,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>we<sp/>want<sp/>is<sp/>the<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>v2<sp/>-<sp/>v1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>v3<sp/>-<sp/>v1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>d2.Cross(<sp/>d1<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>v1<sp/>-<sp/>localView;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dot<sp/>=<sp/>normal<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dot<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>find<sp/>the<sp/>exact<sp/>screen<sp/>bounds<sp/>of<sp/>the<sp/>clipped<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.SetNumPoints(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>v1,<sp/>w[0].ToVec3()<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>v2,<sp/>w[1].ToVec3()<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>v3,<sp/>w[2].ToVec3()<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[0].s<sp/>=<sp/>w[0].t<sp/>=<sp/>w[1].s<sp/>=<sp/>w[1].t<sp/>=<sp/>w[2].s<sp/>=<sp/>w[2].t<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!w.ClipInPlace(<sp/>-tr.viewDef-&gt;frustum[j],<sp/>0.1f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>w.GetNumPoints();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>screen;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_GlobalToNormalizedDeviceCoordinates(<sp/>w[j].ToVec3(),<sp/>screen<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndcBounds.AddPoint(<sp/>screen<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>enclose<sp/>any<sp/>area,<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ndcBounds.IsCleared()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="213"><highlight class="comment">========================</highlight></codeline>
<codeline lineno="214"><highlight class="comment">R_MirrorViewBySurface</highlight></codeline>
<codeline lineno="215"><highlight class="comment">========================</highlight></codeline>
<codeline lineno="216"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*R_MirrorViewBySurface(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*drawSurf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/><sp/><sp/>surface,<sp/>camera;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalPlane,<sp/>plane;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>viewport<sp/>size<sp/>from<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>(<ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*)R_FrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*parms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>*parms<sp/>=<sp/>*tr.viewDef;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.viewID<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>to<sp/>allow<sp/>player<sp/>bodies<sp/>to<sp/>show<sp/>up,<sp/>and<sp/>suppress<sp/>view<sp/>weapons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isSubview<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isMirror<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>plane<sp/>axis<sp/>for<sp/>the<sp/>portal<sp/>we<sp/>are<sp/>seeing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>R_PlaneForSurface(<sp/>drawSurf-&gt;geo,<sp/>originalPlane<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>R_LocalPlaneToGlobal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>originalPlane,<sp/>plane<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.origin<sp/>=<sp/>plane.Normal()<sp/>*<sp/>-plane[3];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.axis[0]<sp/>=<sp/>plane.Normal();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.axis[0].NormalVectors(<sp/>surface.axis[1],<sp/>surface.axis[2]<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.axis[2]<sp/>=<sp/>-surface.axis[2];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>camera.origin<sp/>=<sp/>surface.origin;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>camera.axis[0]<sp/>=<sp/>-surface.axis[0];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>camera.axis[1]<sp/>=<sp/>surface.axis[1];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>camera.axis[2]<sp/>=<sp/>surface.axis[2];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>mirrored<sp/>origin<sp/>and<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>R_MirrorPoint(<sp/>tr.viewDef-&gt;renderView.vieworg,<sp/>&amp;surface,<sp/>&amp;camera,<sp/>parms-&gt;renderView.vieworg<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>R_MirrorVector(<sp/>tr.viewDef-&gt;renderView.viewaxis[0],<sp/>&amp;surface,<sp/>&amp;camera,<sp/>parms-&gt;renderView.viewaxis[0]<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>R_MirrorVector(<sp/>tr.viewDef-&gt;renderView.viewaxis[1],<sp/>&amp;surface,<sp/>&amp;camera,<sp/>parms-&gt;renderView.viewaxis[1]<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>R_MirrorVector(<sp/>tr.viewDef-&gt;renderView.viewaxis[2],<sp/>&amp;surface,<sp/>&amp;camera,<sp/>parms-&gt;renderView.viewaxis[2]<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>view<sp/>origin<sp/>16<sp/>units<sp/>away<sp/>from<sp/>the<sp/>center<sp/>of<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>viewOrigin<sp/>=<sp/>(<sp/>drawSurf-&gt;geo-&gt;bounds[0]<sp/>+<sp/>drawSurf-&gt;geo-&gt;bounds[1]<sp/>)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>viewOrigin<sp/>+=<sp/>(<sp/>originalPlane.Normal()<sp/>*<sp/>16<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>R_LocalPointToGlobal(<sp/>drawSurf-&gt;space-&gt;modelMatrix,<sp/>viewOrigin,<sp/>parms-&gt;initialViewAreaOrigin<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>mirror<sp/>clip<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;numClipPlanes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;clipPlanes[0]<sp/>=<sp/>-camera.axis[0];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;clipPlanes[0][3]<sp/>=<sp/>-(<sp/>camera.origin<sp/>*<sp/>parms-&gt;clipPlanes[0].Normal()<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parms;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="267"><highlight class="comment">========================</highlight></codeline>
<codeline lineno="268"><highlight class="comment">R_XrayViewBySurface</highlight></codeline>
<codeline lineno="269"><highlight class="comment">========================</highlight></codeline>
<codeline lineno="270"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*R_XrayViewBySurface(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*drawSurf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structorientation__t" kindref="compound">orientation_t</ref><sp/><sp/><sp/>surface,<sp/>camera;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalPlane,<sp/>plane;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>viewport<sp/>size<sp/>from<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>(<ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*)R_FrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*parms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>*parms<sp/>=<sp/>*tr.viewDef;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.viewID<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>to<sp/>allow<sp/>player<sp/>bodies<sp/>to<sp/>show<sp/>up,<sp/>and<sp/>suppress<sp/>view<sp/>weapons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isSubview<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isXraySubview<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parms;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="288"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="289"><highlight class="comment">R_RemoteRender</highlight></codeline>
<codeline lineno="290"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="291"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_RemoteRender(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref><sp/>*stage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>views<sp/>can<sp/>be<sp/>reused<sp/>in<sp/>a<sp/>single<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stage-&gt;dynamicFrameCount<sp/>==<sp/>tr.frameCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>entity<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>remoteRenderView,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!surf-&gt;space-&gt;entityDef-&gt;parms.remoteRenderView<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>viewport<sp/>size<sp/>from<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>(<ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/>*)R_FrameAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*parms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>*parms<sp/>=<sp/>*tr.viewDef;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isSubview<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isMirror<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView<sp/>=<sp/>*surf-&gt;space-&gt;entityDef-&gt;parms.remoteRenderView;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.viewID<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>to<sp/>allow<sp/>player<sp/>bodies<sp/>to<sp/>show<sp/>up,<sp/>and<sp/>suppress<sp/>view<sp/>weapons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;initialViewAreaOrigin<sp/>=<sp/>parms-&gt;renderView.vieworg;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CropRenderSize(<sp/>stage-&gt;width,<sp/>stage-&gt;height,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.width<sp/>=<sp/>SCREEN_WIDTH;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.height<sp/>=<sp/>SCREEN_HEIGHT;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.RenderViewToViewport(<sp/>&amp;parms-&gt;renderView,<sp/>&amp;parms-&gt;viewport<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x2<sp/>=<sp/>parms-&gt;viewport.x2<sp/>-<sp/>parms-&gt;viewport.x1;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y2<sp/>=<sp/>parms-&gt;viewport.y2<sp/>-<sp/>parms-&gt;viewport.y1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;superView<sp/>=<sp/>tr.viewDef;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;subviewSurface<sp/>=<sp/>surf;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>render<sp/>commands<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>R_RenderView(parms);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>this<sp/>rendering<sp/>to<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;dynamicFrameCount<sp/>=<sp/>tr.frameCount;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stage-&gt;image)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage-&gt;image<sp/>=<sp/>globalImages-&gt;scratchImage;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CaptureRenderToImage(<sp/>stage-&gt;image-&gt;imgName<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.UnCrop();</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="347"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="348"><highlight class="comment">R_MirrorRender</highlight></codeline>
<codeline lineno="349"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_MirrorRender(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref><sp/>*stage,<sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>scissor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>views<sp/>can<sp/>be<sp/>reused<sp/>in<sp/>a<sp/>single<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stage-&gt;dynamicFrameCount<sp/>==<sp/>tr.frameCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue<sp/>a<sp/>new<sp/>view<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>R_MirrorViewBySurface(<sp/>surf<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CropRenderSize(<sp/>stage-&gt;width,<sp/>stage-&gt;height,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.width<sp/>=<sp/>SCREEN_WIDTH;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.height<sp/>=<sp/>SCREEN_HEIGHT;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.RenderViewToViewport(<sp/>&amp;parms-&gt;renderView,<sp/>&amp;parms-&gt;viewport<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x2<sp/>=<sp/>parms-&gt;viewport.x2<sp/>-<sp/>parms-&gt;viewport.x1;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y2<sp/>=<sp/>parms-&gt;viewport.y2<sp/>-<sp/>parms-&gt;viewport.y1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;superView<sp/>=<sp/>tr.viewDef;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;subviewSurface<sp/>=<sp/>surf;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triangle<sp/>culling<sp/>order<sp/>changes<sp/>with<sp/>mirroring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isMirror<sp/>=<sp/>(<sp/>(<sp/>(int)parms-&gt;isMirror<sp/>^<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)tr.viewDef-&gt;isMirror<sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>render<sp/>commands<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>R_RenderView(<sp/>parms<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>this<sp/>rendering<sp/>to<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;dynamicFrameCount<sp/>=<sp/>tr.frameCount;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;image<sp/>=<sp/>globalImages-&gt;scratchImage;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CaptureRenderToImage(<sp/>stage-&gt;image-&gt;imgName<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.UnCrop();</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="397"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="398"><highlight class="comment">R_XrayRender</highlight></codeline>
<codeline lineno="399"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="400"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_XrayRender(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf,<sp/><ref refid="structtexture_stage__t" kindref="compound">textureStage_t</ref><sp/>*stage,<sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/>scissor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>views<sp/>can<sp/>be<sp/>reused<sp/>in<sp/>a<sp/>single<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stage-&gt;dynamicFrameCount<sp/>==<sp/>tr.frameCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue<sp/>a<sp/>new<sp/>view<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>R_XrayViewBySurface(<sp/>surf<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CropRenderSize(<sp/>stage-&gt;width,<sp/>stage-&gt;height,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.width<sp/>=<sp/>SCREEN_WIDTH;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;renderView.height<sp/>=<sp/>SCREEN_HEIGHT;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.RenderViewToViewport(<sp/>&amp;parms-&gt;renderView,<sp/>&amp;parms-&gt;viewport<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.x2<sp/>=<sp/>parms-&gt;viewport.x2<sp/>-<sp/>parms-&gt;viewport.x1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor.y2<sp/>=<sp/>parms-&gt;viewport.y2<sp/>-<sp/>parms-&gt;viewport.y1;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;superView<sp/>=<sp/>tr.viewDef;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;subviewSurface<sp/>=<sp/>surf;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triangle<sp/>culling<sp/>order<sp/>changes<sp/>with<sp/>mirroring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isMirror<sp/>=<sp/>(<sp/>(<sp/>(int)parms-&gt;isMirror<sp/>^<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)tr.viewDef-&gt;isMirror<sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>render<sp/>commands<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>R_RenderView(<sp/>parms<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>this<sp/>rendering<sp/>to<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;dynamicFrameCount<sp/>=<sp/>tr.frameCount;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;image<sp/>=<sp/>globalImages-&gt;scratchImage2;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.CaptureRenderToImage(<sp/>stage-&gt;image-&gt;imgName<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.UnCrop();</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="447"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="448"><highlight class="comment">R_GenerateSurfaceSubview</highlight></codeline>
<codeline lineno="449"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="450"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>R_GenerateSurfaceSubview(<sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*drawSurf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndcBounds;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_def__s" kindref="compound">viewDef_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parms;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*shader;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>testing<sp/>the<sp/>performance<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_skipSubviews.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_PreciseCullSurface(<sp/>drawSurf,<sp/>ndcBounds<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>drawSurf-&gt;material;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>recurse<sp/>through<sp/>a<sp/>subview<sp/>surface<sp/>that<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>seeing<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>parms<sp/>=<sp/>tr.viewDef<sp/>;<sp/>parms<sp/>;<sp/>parms<sp/>=<sp/>parms-&gt;superView<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parms-&gt;subviewSurface</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>parms-&gt;subviewSurface-&gt;geo<sp/>==<sp/>drawSurf-&gt;geo</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>parms-&gt;subviewSurface-&gt;space-&gt;entityDef<sp/>==<sp/>drawSurf-&gt;space-&gt;entityDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>crop<sp/>the<sp/>scissor<sp/>bounds<sp/>based<sp/>on<sp/>the<sp/>precise<sp/>cull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/><sp/><sp/><sp/>scissor;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_screen_rect" kindref="compound">idScreenRect</ref><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>&amp;tr.viewDef-&gt;viewport;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.x1<sp/>=<sp/>v-&gt;x1<sp/>+<sp/>(int)(<sp/>(v-&gt;x2<sp/>-<sp/>v-&gt;x1<sp/>+<sp/>1<sp/>)<sp/>*<sp/>0.5f<sp/>*<sp/>(<sp/>ndcBounds[0][0]<sp/>+<sp/>1.0f<sp/>));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.y1<sp/>=<sp/>v-&gt;y1<sp/>+<sp/>(int)(<sp/>(v-&gt;y2<sp/>-<sp/>v-&gt;y1<sp/>+<sp/>1<sp/>)<sp/>*<sp/>0.5f<sp/>*<sp/>(<sp/>ndcBounds[0][1]<sp/>+<sp/>1.0f<sp/>));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.x2<sp/>=<sp/>v-&gt;x1<sp/>+<sp/>(int)(<sp/>(v-&gt;x2<sp/>-<sp/>v-&gt;x1<sp/>+<sp/>1<sp/>)<sp/>*<sp/>0.5f<sp/>*<sp/>(<sp/>ndcBounds[1][0]<sp/>+<sp/>1.0f<sp/>));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.y2<sp/>=<sp/>v-&gt;y1<sp/>+<sp/>(int)(<sp/>(v-&gt;y2<sp/>-<sp/>v-&gt;y1<sp/>+<sp/>1<sp/>)<sp/>*<sp/>0.5f<sp/>*<sp/>(<sp/>ndcBounds[1][1]<sp/>+<sp/>1.0f<sp/>));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nudge<sp/>a<sp/>bit<sp/>for<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.Expand();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.Intersect(<sp/>tr.viewDef-&gt;scissor<sp/>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scissor.IsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cropped<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>what<sp/>kind<sp/>of<sp/>subview<sp/>we<sp/>are<sp/>making</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>shader-&gt;GetSort()<sp/>!=<sp/>SS_SUBVIEW<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>shader-&gt;GetNumStages()<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshader_stage__t" kindref="compound">shaderStage_t</ref><sp/>*stage<sp/>=<sp/>shader-&gt;GetStage(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>stage-&gt;texture.dynamic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DI_REMOTE_RENDER:</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_RemoteRender(<sp/>drawSurf,<sp/>const_cast&lt;textureStage_t<sp/>*&gt;(&amp;stage-&gt;texture)<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DI_MIRROR_RENDER:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_MirrorRender(<sp/>drawSurf,<sp/>const_cast&lt;textureStage_t<sp/>*&gt;(&amp;stage-&gt;texture),<sp/>scissor<sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DI_XRAY_RENDER:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_XrayRender(<sp/>drawSurf,<sp/>const_cast&lt;textureStage_t<sp/>*&gt;(&amp;stage-&gt;texture),<sp/>scissor<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue<sp/>a<sp/>new<sp/>view<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>R_MirrorViewBySurface(<sp/>drawSurf<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parms<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;scissor<sp/>=<sp/>scissor;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;superView<sp/>=<sp/>tr.viewDef;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;subviewSurface<sp/>=<sp/>drawSurf;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triangle<sp/>culling<sp/>order<sp/>changes<sp/>with<sp/>mirroring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>parms-&gt;isMirror<sp/>=<sp/>(<sp/>(<sp/>(int)parms-&gt;isMirror<sp/>^<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)tr.viewDef-&gt;isMirror<sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>render<sp/>commands<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>R_RenderView(<sp/>parms<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="538"><highlight class="comment">================</highlight></codeline>
<codeline lineno="539"><highlight class="comment">R_GenerateSubViews</highlight></codeline>
<codeline lineno="540"><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment">If<sp/>we<sp/>need<sp/>to<sp/>render<sp/>another<sp/>view<sp/>to<sp/>complete<sp/>the<sp/>current<sp/>view,</highlight></codeline>
<codeline lineno="542"><highlight class="comment">generate<sp/>it<sp/>first.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment">It<sp/>is<sp/>important<sp/>to<sp/>do<sp/>this<sp/>after<sp/>all<sp/>drawSurfs<sp/>for<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="545"><highlight class="comment">view<sp/>have<sp/>been<sp/>generated,<sp/>because<sp/>it<sp/>may<sp/>create<sp/>a<sp/>subview<sp/>which</highlight></codeline>
<codeline lineno="546"><highlight class="comment">would<sp/>change<sp/>tr.viewCount.</highlight></codeline>
<codeline lineno="547"><highlight class="comment">================</highlight></codeline>
<codeline lineno="548"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>R_GenerateSubViews(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*drawSurf;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subviews;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*shader;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>testing<sp/>the<sp/>performance<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_skipSubviews.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>subviews<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>the<sp/>surfaces<sp/>until<sp/>we<sp/>either<sp/>find<sp/>a<sp/>subview,<sp/>or<sp/>determine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>no<sp/>more<sp/>subview<sp/>surfaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>tr.viewDef-&gt;numDrawSurfs<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawSurf<sp/>=<sp/>tr.viewDef-&gt;drawSurfs[i];</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>drawSurf-&gt;material;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shader<sp/>||<sp/>!shader-&gt;HasSubview()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>R_GenerateSurfaceSubview(<sp/>drawSurf<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subviews<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subviews;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/tr_subview.cpp"/>
  </compounddef>
</doxygen>
