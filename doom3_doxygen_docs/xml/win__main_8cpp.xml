<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="win__main_8cpp" kind="file">
    <compoundname>win_main.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">direct.h</includes>
    <includes local="no">io.h</includes>
    <includes local="no">conio.h</includes>
    <includes local="no">mapi.h</includes>
    <includes local="no">ShellAPI.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="sys__local_8h" local="yes">../sys_local.h</includes>
    <includes refid="win__local_8h" local="yes">win_local.h</includes>
    <includes refid="_create_resource_i_ds_8h" local="yes">rc/CreateResourceIDs.h</includes>
    <includes refid="tr__local_8h" local="yes">../../renderer/tr_local.h</includes>
    <incdepgraph>
      <node id="2569">
        <label>sys/stat.h</label>
      </node>
      <node id="2561">
        <label>float.h</label>
      </node>
      <node id="2559">
        <label>E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp</label>
        <link refid="win_main.cpp"/>
        <childnode refid="2560" relation="include">
        </childnode>
        <childnode refid="2561" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
        <childnode refid="2563" relation="include">
        </childnode>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
        <childnode refid="2567" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2569" relation="include">
        </childnode>
      </node>
      <node id="2560">
        <label>errno.h</label>
      </node>
      <node id="2564">
        <label>io.h</label>
      </node>
      <node id="2562">
        <label>fcntl.h</label>
      </node>
      <node id="2565">
        <label>conio.h</label>
      </node>
      <node id="2563">
        <label>direct.h</label>
      </node>
      <node id="2568">
        <label>sys/types.h</label>
      </node>
      <node id="2566">
        <label>mapi.h</label>
      </node>
      <node id="2567">
        <label>ShellAPI.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="win__main_8cpp_1ab7f347e6426456fcc8702ac02da8307b" prot="public" static="no">
        <name>MAXPRINTMSG</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="388" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1ab7f347e6426456fcc8702ac02da8307b" prot="public" static="no">
        <name>MAXPRINTMSG</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="411" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1aca53c310c84569c8a5bbbca899fe18a4" prot="public" static="no">
        <name>MAX_QUED_EVENTS</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="716" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1a016580251597b1b5d1732c7b58729aad" prot="public" static="no">
        <name>MASK_QUED_EVENTS</name>
        <initializer>( MAX_QUED_EVENTS - 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="717" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1ad4573031e343e6c9996e8cf7d0a6ef69" prot="public" static="no">
        <name>OSR2_BUILD_NUMBER</name>
        <initializer>1111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="961" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1ae9b21f87586a331cc552d147c233475f" prot="public" static="no">
        <name>WIN98_BUILD_NUMBER</name>
        <initializer>1998</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="962" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="win__main_8cpp_1a744a5905e09b0afe1bb328e4522e6be8" prot="public" static="no">
        <name>TEST_FPU_EXCEPTIONS</name>
        <initializer>/*	FPU_EXCEPTION_INVALID_OPERATION |		*/	\
							/*	FPU_EXCEPTION_DENORMALIZED_OPERAND |	*/	\
							/*	FPU_EXCEPTION_DIVIDE_BY_ZERO |			*/	\
							/*	FPU_EXCEPTION_NUMERIC_OVERFLOW |		*/	\
							/*	FPU_EXCEPTION_NUMERIC_UNDERFLOW |		*/	\
							/*	FPU_EXCEPTION_INEXACT_RESULT |			*/	\
								0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1352" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="win__main_8cpp_1a86d48ba73e07a491dee454443e4afb96" prot="public" static="no" mutable="no">
        <type><ref refid="struct_win32_vars__t" kindref="compound">Win32Vars_t</ref></type>
        <definition>Win32Vars_t win32</definition>
        <argsstring></argsstring>
        <name>win32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1af3872244cf3f2936a46131954fbc6a53" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char sys_cmdline[MAX_STRING_CHARS]</definition>
        <argsstring>[MAX_STRING_CHARS]</argsstring>
        <name>sys_cmdline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1ac9a6605904442457f111bdc849c4eeb0" prot="public" static="no" mutable="no">
        <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> *</type>
        <definition>xthreadInfo* g_threads[MAX_THREADS]</definition>
        <argsstring>[MAX_THREADS]</argsstring>
        <name>g_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="70" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1a77e19e501e58cec4761b60fe160ffec9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int g_thread_count</definition>
        <argsstring></argsstring>
        <name>g_thread_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1aa3a9646014a72d3d0b94e83c37f9006d" prot="public" static="yes" mutable="no">
        <type><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref></type>
        <definition>sysMemoryStats_t exeLaunchMemoryStats</definition>
        <argsstring></argsstring>
        <name>exeLaunchMemoryStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1a56397ecbd51eed683cdac72ae81f362c" prot="public" static="yes" mutable="no">
        <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref></type>
        <definition>xthreadInfo threadInfo</definition>
        <argsstring></argsstring>
        <name>threadInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="76" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1a21390c34bee7f48d595ee2e161747bfa" prot="public" static="yes" mutable="no">
        <type>HANDLE</type>
        <definition>HANDLE hTimer</definition>
        <argsstring></argsstring>
        <name>hTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1ad2b147ea32a3eb3380336046e446fce0" prot="public" static="no" mutable="no">
        <type><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref></type>
        <definition>sysEvent_t eventQue[256]</definition>
        <argsstring>[256]</argsstring>
        <name>eventQue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="719" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1adb73aeb0be068e90c60663e92873fc86" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int eventHead</definition>
        <argsstring></argsstring>
        <name>eventHead</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="720" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1a068d0fcfbc35a95216134bd532c63134" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int eventTail</definition>
        <argsstring></argsstring>
        <name>eventTail</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="721" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="win__main_8cpp_1a67c676abc322a4f197ef267a93d58608" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int parmBytes</definition>
        <argsstring></argsstring>
        <name>parmBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1515" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1515" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="win__main_8cpp_1aca01ce6e936e3a167dd3adbb1bff6d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GetExeLaunchMemoryStatus</definition>
        <argsstring>(sysMemoryStats_t &amp;stats)</argsstring>
        <name>Sys_GetExeLaunchMemoryStatus</name>
        <param>
          <type><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1ac0118c74dd1843c97312bec58d396fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_CreateThread</definition>
        <argsstring>(xthread_t function, void *parms, xthreadPriority priority, xthreadInfo &amp;info, const char *name, xthreadInfo *threads[MAX_THREADS], int *thread_count)</argsstring>
        <name>Sys_CreateThread</name>
        <param>
          <type>xthread_t</type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>xthreadPriority</type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> *</type>
          <declname>threads</declname>
          <array>[MAX_THREADS]</array>
        </param>
        <param>
          <type>int *</type>
          <declname>thread_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="93" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a7e9f31d078a6f29dd8dfe485e718878b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DestroyThread</definition>
        <argsstring>(xthreadInfo &amp;info)</argsstring>
        <name>Sys_DestroyThread</name>
        <param>
          <type><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="119" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a45141518bda42b70a42e9964d5f93031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Sentry</definition>
        <argsstring>()</argsstring>
        <name>Sys_Sentry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="130" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a57326ad3bcc4158c53826a191b457d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetThreadName</definition>
        <argsstring>(int *index)</argsstring>
        <name>Sys_GetThreadName</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="139" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="139" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a113dd198ae29ebfa863491fe00bd8a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_EnterCriticalSection</definition>
        <argsstring>(int index)</argsstring>
        <name>Sys_EnterCriticalSection</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="161" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa74bb7f93f8f257c935c431a8128f39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_LeaveCriticalSection</definition>
        <argsstring>(int index)</argsstring>
        <name>Sys_LeaveCriticalSection</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="174" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a1f553e47c75fe2d4275b038d1db43f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_WaitForEvent</definition>
        <argsstring>(int index)</argsstring>
        <name>Sys_WaitForEvent</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="184" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a6475628ed8b3fcc71c3471534a796c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_TriggerEvent</definition>
        <argsstring>(int index)</argsstring>
        <name>Sys_TriggerEvent</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="198" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a56bfbf93a8c5c4a784a15fcf8d8d4854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_FlushCacheMemory</definition>
        <argsstring>(void *base, int bytes)</argsstring>
        <name>Sys_FlushCacheMemory</name>
        <param>
          <type>void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="325" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="325" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a2fe6e82a2dd55741246a156d74cc7dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Error</definition>
        <argsstring>(const char *error,...)</argsstring>
        <name>Sys_Error</name>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="335" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a745fd700e60470ed4e547bd6c67d4630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Quit</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Quit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="375" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="375" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a2e96c9ccfa6d43e1677769d19dbc1a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Printf</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>Sys_Printf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="389" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="389" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1af411596d6995be6d63ca2a6519bd4502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DebugPrintf</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>Sys_DebugPrintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="412" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="412" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a81e19af95cf4217ba1e72710c8412aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DebugVPrintf</definition>
        <argsstring>(const char *fmt, va_list arg)</argsstring>
        <name>Sys_DebugVPrintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="429" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="429" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a46d48b4e802487e4c09ebcd334dcdd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Sleep</definition>
        <argsstring>(int msec)</argsstring>
        <name>Sys_Sleep</name>
        <param>
          <type>int</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="443" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a3651490e78358ac63ab428d6f0658980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ShowWindow</definition>
        <argsstring>(bool show)</argsstring>
        <name>Sys_ShowWindow</name>
        <param>
          <type>bool</type>
          <declname>show</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="452" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="452" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1afa507eb6752adcff6084d7c2b1c06d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_IsWindowVisible</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_IsWindowVisible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="461" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="461" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa84f938329dcfac4d14c1804cc89bfab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Mkdir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>Sys_Mkdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="470" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="470" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a62a5dc9d458a2a2b6df3e20ca7ed884a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ID_TIME_T</type>
        <definition>ID_TIME_T Sys_FileTimeStamp</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>Sys_FileTimeStamp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="479" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="479" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a1ac00207cbc5069c1e69484f1db14e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_Cwd</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Cwd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="490" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="490" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa0165c9192fc63bcdf12a8ac2259ed8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultCDPath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultCDPath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="504" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a042b1c70df9ab85f80355e5afb56dedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultBasePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultBasePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="513" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="513" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a0ee02302c9ad08c25911a3af3a565729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_DefaultSavePath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DefaultSavePath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="522" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="522" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a1b3d67203c74397f3d8a48b59fb0422d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_EXEPath</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_EXEPath</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="531" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="531" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1ad416b91f664a3e79c2609051bcec0742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_ListFiles</definition>
        <argsstring>(const char *directory, const char *extension, idStrList &amp;list)</argsstring>
        <name>Sys_ListFiles</name>
        <param>
          <type>const char *</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type><ref refid="classid_list" kindref="compound">idStrList</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="542" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="542" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a5896b948b6201a1f9abf99d5bb4a19c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* Sys_GetClipboardData</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetClipboardData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="587" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="587" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a27ead74bc686bc4f21a2940864f25efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_SetClipboardData</definition>
        <argsstring>(const char *string)</argsstring>
        <name>Sys_SetClipboardData</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="613" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="613" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a4d9643c51baac8f61c507560fd984665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_DLL_Load</definition>
        <argsstring>(const char *dllName)</argsstring>
        <name>Sys_DLL_Load</name>
        <param>
          <type>const char *</type>
          <declname>dllName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="658" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="658" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1add611c75d2c0f87c1ab67f6b9fa3285d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* Sys_DLL_GetProcAddress</definition>
        <argsstring>(int dllHandle, const char *procName)</argsstring>
        <name>Sys_DLL_GetProcAddress</name>
        <param>
          <type>int</type>
          <declname>dllHandle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>procName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="679" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="679" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a0d3cf20d895421c582aabcef8dfb9547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DLL_Unload</definition>
        <argsstring>(int dllHandle)</argsstring>
        <name>Sys_DLL_Unload</name>
        <param>
          <type>int</type>
          <declname>dllHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="688" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="688" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a16e0fc16644743d910293e9600baa969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_QueEvent</definition>
        <argsstring>(int time, sysEventType_t type, int value, int value2, int ptrLength, void *ptr)</argsstring>
        <name>Sys_QueEvent</name>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <param>
          <type>sysEventType_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ptrLength</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="731" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="731" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1acfb9827fbe2e248549a2a968fa71a806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_PumpEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_PumpEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="761" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="761" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a9a1d68982152ef5fa2d60ca5b90d0078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_GenerateEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GenerateEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="794" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="794" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a1a25cb489bebadf5deb79907cdd4db7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_ClearEvents</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_ClearEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="829" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="829" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1af9912ad968f804081611d0911152ef69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref></type>
        <definition>sysEvent_t Sys_GetEvent</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetEvent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="838" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="838" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a6e30a3ea3605901c3ee41411c2714af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_In_Restart_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>Sys_In_Restart_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="862" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="862" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a7b59bf2635d022005080c0b7b2186ac4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Sys_AsyncThread</definition>
        <argsstring>(void *parm)</argsstring>
        <name>Sys_AsyncThread</name>
        <param>
          <type>void *</type>
          <declname>parm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="873" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="873" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a9697da3d7be2df8431f243d798ce2a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_StartAsyncThread</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_StartAsyncThread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="912" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="912" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a863759e63ab6a38ac2be86d8be9b998a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Sys_AlreadyRunning</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_AlreadyRunning</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="942" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="942" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1adfdb874494a7e96ac1256869f1a7e9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="964" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="964" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aab717bf5c56454273cb0e6368c271360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_Shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_Shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1128" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa76c178778fb3ec5e780a479db5c944f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cpuid_t</type>
        <definition>cpuid_t Sys_GetProcessorId</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1137" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1137" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa5702f4d360f47cc2077dee0d52221b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Sys_GetProcessorString</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_GetProcessorString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1146" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1146" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a06712f9e3125e57dd7e207eb3ee4431c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Win_Frame</definition>
        <argsstring>(void)</argsstring>
        <name>Win_Frame</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1160" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1160" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a2a12b64a5ad4c4db9d350547faffe146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _chkstk</definition>
        <argsstring>(int size)</argsstring>
        <name>_chkstk</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a18b79909fe4d2e9bb8415c5487b5f252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clrstk</definition>
        <argsstring>(void)</argsstring>
        <name>clrstk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1abf3342f59755acd43a9dbedee4ffd85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestChkStk</definition>
        <argsstring>(void)</argsstring>
        <name>TestChkStk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1178" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1178" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa80524ec67933111f06239bf716c93dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HackChkStk</definition>
        <argsstring>(void)</argsstring>
        <name>HackChkStk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1189" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1189" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a5a149914275d98eefaa94f7b4961aa03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* GetExceptionCodeInfo</definition>
        <argsstring>(UINT code)</argsstring>
        <name>GetExceptionCodeInfo</name>
        <param>
          <type>UINT</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1203" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1203" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a561f955e7605898868a4e06608975940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmailCrashReport</definition>
        <argsstring>(LPSTR messageText)</argsstring>
        <name>EmailCrashReport</name>
        <param>
          <type>LPSTR</type>
          <declname>messageText</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1236" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1236" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a2ceaeae3844d3ad4d50f5f3be7dc5cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Sys_FPU_PrintStateFlags</definition>
        <argsstring>(char *ptr, int ctrl, int stat, int tags, int inof, int inse, int opof, int opse)</argsstring>
        <name>Sys_FPU_PrintStateFlags</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inof</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opof</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1279" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_cpu.cpp" bodystart="648" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a0e310beaa494fdf4d3aa1045071ec6e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXCEPTION_DISPOSITION __cdecl</type>
        <definition>EXCEPTION_DISPOSITION __cdecl _except_handler</definition>
        <argsstring>(struct _EXCEPTION_RECORD *ExceptionRecord, void *EstablisherFrame, struct _CONTEXT *ContextRecord, void *DispatcherContext)</argsstring>
        <name>_except_handler</name>
        <param>
          <type>struct _EXCEPTION_RECORD *</type>
          <declname>ExceptionRecord</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>EstablisherFrame</declname>
        </param>
        <param>
          <type>struct _CONTEXT *</type>
          <declname>ContextRecord</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DispatcherContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1286" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1286" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a661c2abc03926acfaeb93b4ae7db4943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int WINAPI</type>
        <definition>int WINAPI WinMain</definition>
        <argsstring>(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)</argsstring>
        <name>WinMain</name>
        <param>
          <type>HINSTANCE</type>
          <declname>hInstance</declname>
        </param>
        <param>
          <type>HINSTANCE</type>
          <declname>hPrevInstance</declname>
        </param>
        <param>
          <type>LPSTR</type>
          <declname>lpCmdLine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCmdShow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1365" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1365" bodyend="1506"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1aa167479c95e7a08da58e76ee272937aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__declspec</definition>
        <argsstring>(naked) void clrstk(void)</argsstring>
        <name>__declspec</name>
        <param>
          <type>naked</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1516" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1516" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1a763307df029e6fc578256668e8652bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_SetFatalError</definition>
        <argsstring>(const char *error)</argsstring>
        <name>Sys_SetFatalError</name>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1606" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1606" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="win__main_8cpp_1adbbc536942512450a87c4ada7dcd6dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sys_DoPreferences</definition>
        <argsstring>(void)</argsstring>
        <name>Sys_DoPreferences</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" line="1614" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp" bodystart="1614" bodyend="1615"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;conio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mapi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ShellAPI.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__MRC__</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sys_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;win_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rc/CreateResourceIDs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../renderer/tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::sys_arch(<sp/></highlight><highlight class="stringliteral">&quot;sys_arch&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INIT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::sys_cpustring(<sp/></highlight><highlight class="stringliteral">&quot;sys_cpustring&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;detect&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INIT,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::in_mouse(<sp/></highlight><highlight class="stringliteral">&quot;in_mouse&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;enable<sp/>mouse<sp/>input&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_allowAltTab(<sp/></highlight><highlight class="stringliteral">&quot;win_allowAltTab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;allow<sp/>Alt-Tab<sp/>when<sp/>fullscreen&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_notaskkeys(<sp/></highlight><highlight class="stringliteral">&quot;win_notaskkeys&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;disable<sp/>windows<sp/>task<sp/>keys&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_username(<sp/></highlight><highlight class="stringliteral">&quot;win_username&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INIT,<sp/></highlight><highlight class="stringliteral">&quot;windows<sp/>user<sp/>name&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_xpos(<sp/></highlight><highlight class="stringliteral">&quot;win_xpos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;horizontal<sp/>position<sp/>of<sp/>window&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_ypos(<sp/></highlight><highlight class="stringliteral">&quot;win_ypos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;22&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;vertical<sp/>position<sp/>of<sp/>window&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_outputDebugString(<sp/></highlight><highlight class="stringliteral">&quot;win_outputDebugString&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_outputEditString(<sp/></highlight><highlight class="stringliteral">&quot;win_outputEditString&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_viewlog(<sp/></highlight><highlight class="stringliteral">&quot;win_viewlog&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_timerUpdate(<sp/></highlight><highlight class="stringliteral">&quot;win_timerUpdate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;allows<sp/>the<sp/>game<sp/>to<sp/>be<sp/>updated<sp/>while<sp/>dragging<sp/>the<sp/>window&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>Win32Vars_t::win_allowMultipleInstances(<sp/></highlight><highlight class="stringliteral">&quot;win_allowMultipleInstances&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL,<sp/></highlight><highlight class="stringliteral">&quot;allow<sp/>multiple<sp/>instances<sp/>running<sp/>concurrently&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="struct_win32_vars__t" kindref="compound">Win32Vars_t</ref><sp/>win32;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sys_cmdline[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>hard<sp/>limit,<sp/>just<sp/>what<sp/>we<sp/>keep<sp/>track<sp/>of<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>*g_threads[MAX_THREADS];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_thread_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref><sp/>exeLaunchMemoryStats;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>threadInfo;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/>HANDLE<sp/><sp/><sp/><sp/><sp/><sp/>hTimer;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment">================</highlight></codeline>
<codeline lineno="81"><highlight class="comment">Sys_GetExeLaunchMemoryStatus</highlight></codeline>
<codeline lineno="82"><highlight class="comment">================</highlight></codeline>
<codeline lineno="83"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_GetExeLaunchMemoryStatus(<sp/><ref refid="structsys_memory_stats__s" kindref="compound">sysMemoryStats_t</ref><sp/>&amp;stats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>stats<sp/>=<sp/>exeLaunchMemoryStats;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="89"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="90"><highlight class="comment">Sys_Createthread</highlight></codeline>
<codeline lineno="91"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="92"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_CreateThread(<sp/><sp/>xthread_t<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parms,<sp/>xthreadPriority<sp/>priority,<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>&amp;info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref><sp/>*threads[MAX_THREADS],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*thread_count<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>temp<sp/>=<sp/>CreateThread(<sp/>NULL,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LPSECURITY_ATTRIBUTES<sp/>lpsa,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DWORD<sp/>cbStack,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LPTHREAD_START_ROUTINE)</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LPTHREAD_START_ROUTINE<sp/>lpStartAddr,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms,<sp/><sp/></highlight><highlight class="comment">//<sp/>LPVOID<sp/>lpvThreadParm,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DWORD<sp/>fdwCreate,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info.threadId);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>info.threadHandle<sp/>=<sp/>(int)<sp/>temp;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(priority<sp/>==<sp/>THREAD_HIGHEST)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetThreadPriority(<sp/>(HANDLE)info.threadHandle,<sp/>THREAD_PRIORITY_HIGHEST<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>we<sp/>better<sp/>sleep<sp/>enough<sp/>to<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(priority<sp/>==<sp/>THREAD_ABOVE_NORMAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetThreadPriority(<sp/>(HANDLE)info.threadHandle,<sp/>THREAD_PRIORITY_ABOVE_NORMAL<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>info.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*thread_count<sp/>&lt;<sp/>MAX_THREADS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads[(*thread_count)++]<sp/>=<sp/>&amp;info;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>MAX_THREADS<sp/>reached\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="116"><highlight class="comment">Sys_DestroyThread</highlight></codeline>
<codeline lineno="117"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="118"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DestroyThread(<sp/><ref refid="structxthread_info" kindref="compound">xthreadInfo</ref>&amp;<sp/>info<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitForSingleObject(<sp/>(HANDLE)info.threadHandle,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseHandle(<sp/>(HANDLE)info.threadHandle<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>info.threadHandle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="126"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="127"><highlight class="comment">Sys_Sentry</highlight></codeline>
<codeline lineno="128"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="129"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Sentry()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="135"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="136"><highlight class="comment">Sys_GetThreadName</highlight></codeline>
<codeline lineno="137"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Sys_GetThreadName(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>GetCurrentThreadId();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g_thread_count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>g_threads[i]-&gt;threadId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_threads[i]-&gt;name;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="157"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="158"><highlight class="comment">Sys_EnterCriticalSection</highlight></codeline>
<codeline lineno="159"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="160"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_EnterCriticalSection(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>MAX_CRITICAL_SECTIONS<sp/>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>TryEnterCriticalSection(<sp/>&amp;win32.criticalSections[index]<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterCriticalSection(<sp/>&amp;win32.criticalSections[index]<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Sys_DebugPrintf(<sp/>&quot;busy<sp/>lock<sp/>&apos;%s&apos;<sp/>in<sp/>thread<sp/>&apos;%s&apos;\n&quot;,<sp/>lock-&gt;name,<sp/>Sys_GetThreadName()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">Sys_LeaveCriticalSection</highlight></codeline>
<codeline lineno="172"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_LeaveCriticalSection(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>MAX_CRITICAL_SECTIONS<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>LeaveCriticalSection(<sp/>&amp;win32.criticalSections[index]<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="181"><highlight class="comment">Sys_WaitForEvent</highlight></codeline>
<codeline lineno="182"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="183"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_WaitForEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!win32.backgroundDownloadSemaphore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.backgroundDownloadSemaphore<sp/>=<sp/>CreateEvent(<sp/>NULL,<sp/>TRUE,<sp/>FALSE,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitForSingleObject(<sp/>win32.backgroundDownloadSemaphore,<sp/>INFINITE<sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>ResetEvent(<sp/>win32.backgroundDownloadSemaphore<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="195"><highlight class="comment">Sys_TriggerEvent</highlight></codeline>
<codeline lineno="196"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_TriggerEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEvent(<sp/>win32.backgroundDownloadSemaphore<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>optimize(<sp/>&quot;&quot;,<sp/>on<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_total_alloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_total_alloc_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_current_alloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_current_alloc_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_frame_alloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug_frame_alloc_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>sys_showMallocs(<sp/></highlight><highlight class="stringliteral">&quot;sys_showMallocs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_HOOK_ALLOC,<sp/>_HOOK_REALLOC,<sp/>_HOOK_FREE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CrtMemBlockHeader</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_CrtMemBlockHeader<sp/>*pBlockHeaderNext;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>block<sp/>allocated<sp/>just<sp/>before<sp/>this<sp/>one:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_CrtMemBlockHeader<sp/>*pBlockHeaderPrev;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>block<sp/>allocated<sp/>just<sp/>after<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szFileName;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Line<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nDataSize;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>user<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockUse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lRequest;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap[4];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>just<sp/>before<sp/>(lower<sp/>than)<sp/>the<sp/>user&apos;s<sp/>memory:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}<sp/>CrtMemBlockHeader;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;crtdbg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="237"><highlight class="comment">Sys_AllocHook</highlight></codeline>
<codeline lineno="238"><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>called<sp/>for<sp/>every<sp/>malloc/new/free/delete</highlight></codeline>
<codeline lineno="240"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="241"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_AllocHook(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nAllocType,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvData,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockUse,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lRequest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>szFileName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine<sp/>)<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>CrtMemBlockHeader<sp/><sp/><sp/>*pHead;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*temp;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nBlockUse<sp/>==<sp/>_CRT_BLOCK<sp/>)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>TRUE<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>pointer<sp/>to<sp/>memory<sp/>block<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(<sp/>byte<sp/>*<sp/>)pvData;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>-=<sp/>32;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>pHead<sp/>=<sp/>(<sp/>CrtMemBlockHeader<sp/>*<sp/>)temp;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>nAllocType<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>_HOOK_ALLOC:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_total_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_frame_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_total_alloc_count++;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc_count++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_frame_alloc_count++;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>_HOOK_FREE:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>pHead-&gt;gap[0]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[1]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[2]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[3]<sp/>==<sp/>0xfd<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc<sp/>-=<sp/>pHead-&gt;nDataSize;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc_count--;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_total_alloc_count++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_frame_alloc_count++;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>_HOOK_REALLOC:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>pHead-&gt;gap[0]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[1]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[2]<sp/>==<sp/>0xfd<sp/>&amp;&amp;<sp/>pHead-&gt;gap[3]<sp/>==<sp/>0xfd<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc<sp/>-=<sp/>pHead-&gt;nDataSize;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_total_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_frame_alloc<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_total_alloc_count++;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_current_alloc_count--;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_frame_alloc_count++;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>TRUE<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="292"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="293"><highlight class="comment">Sys_DebugMemory_f</highlight></codeline>
<codeline lineno="294"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DebugMemory_f(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>allocation<sp/>%8dk<sp/>in<sp/>%d<sp/>blocks\n&quot;</highlight><highlight class="normal">,<sp/>debug_total_alloc<sp/>/<sp/>1024,<sp/>debug_total_alloc_count<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>allocation<sp/>%8dk<sp/>in<sp/>%d<sp/>blocks\n&quot;</highlight><highlight class="normal">,<sp/>debug_current_alloc<sp/>/<sp/>1024,<sp/>debug_current_alloc_count<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="302"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="303"><highlight class="comment">Sys_MemFrame</highlight></codeline>
<codeline lineno="304"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="305"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_MemFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sys_showMallocs.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Frame:<sp/>%8dk<sp/>in<sp/>%5d<sp/>blocks\n&quot;</highlight><highlight class="normal">,<sp/>debug_frame_alloc<sp/>/<sp/>1024,<sp/>debug_frame_alloc_count<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>debug_frame_alloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>debug_frame_alloc_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="318"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="319"><highlight class="comment">Sys_FlushCacheMemory</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">On<sp/>windows,<sp/>the<sp/>vertex<sp/>buffers<sp/>are<sp/>write<sp/>combined,<sp/>so<sp/>they</highlight></codeline>
<codeline lineno="322"><highlight class="comment">don&apos;t<sp/>need<sp/>to<sp/>be<sp/>flushed<sp/>from<sp/>the<sp/>cache</highlight></codeline>
<codeline lineno="323"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="324"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_FlushCacheMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="330"><highlight class="comment">Sys_Error</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">Show<sp/>the<sp/>early<sp/>console<sp/>as<sp/>an<sp/>error<sp/>dialog</highlight></codeline>
<codeline lineno="333"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[4096];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>MSG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>error<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>vsprintf(<sp/>text,<sp/>error,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Conbuf_AppendText(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Conbuf_AppendText(<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>Win_SetErrorText(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>timeEndPeriod(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_ShutdownInput();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>GLimp_Shutdown();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>user<sp/>to<sp/>quit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetMessage(<sp/>&amp;msg,<sp/>NULL,<sp/>0,<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Quit();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TranslateMessage(<sp/>&amp;msg<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DispatchMessage(<sp/>&amp;msg<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_DestroyConsole();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>exit<sp/>(1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="371"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="372"><highlight class="comment">Sys_Quit</highlight></codeline>
<codeline lineno="373"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="374"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Quit(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>timeEndPeriod(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_ShutdownInput();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_DestroyConsole();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitProcess(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="384"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="385"><highlight class="comment">Sys_Printf</highlight></codeline>
<codeline lineno="386"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="387"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXPRINTMSG<sp/>4096</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Printf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[MAXPRINTMSG];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>fmt);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>msg,<sp/>MAXPRINTMSG-1,<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(argptr);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>msg[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg)-1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.win_outputDebugString.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputDebugString(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.win_outputEditString.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Conbuf_AppendText(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="407"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="408"><highlight class="comment">Sys_DebugPrintf</highlight></codeline>
<codeline lineno="409"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="410"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXPRINTMSG<sp/>4096</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DebugPrintf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[MAXPRINTMSG];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>msg,<sp/>MAXPRINTMSG-1,<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>msg[<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg)-1<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputDebugString(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="425"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="426"><highlight class="comment">Sys_DebugVPrintf</highlight></codeline>
<codeline lineno="427"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="428"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DebugVPrintf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>arg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[MAXPRINTMSG];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>msg,<sp/>MAXPRINTMSG-1,<sp/>fmt,<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>msg[<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg)-1<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputDebugString(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="439"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="440"><highlight class="comment">Sys_Sleep</highlight></codeline>
<codeline lineno="441"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="442"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Sleep(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(<sp/>msec<sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="448"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="449"><highlight class="comment">Sys_ShowWindow</highlight></codeline>
<codeline lineno="450"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="451"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_ShowWindow(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>::ShowWindow(<sp/>win32.hWnd,<sp/>show<sp/>?<sp/>SW_SHOW<sp/>:<sp/>SW_HIDE<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="457"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="458"><highlight class="comment">Sys_IsWindowVisible</highlight></codeline>
<codeline lineno="459"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="460"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sys_IsWindowVisible(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>::IsWindowVisible(<sp/>win32.hWnd<sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="466"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="467"><highlight class="comment">Sys_Mkdir</highlight></codeline>
<codeline lineno="468"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="469"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Mkdir(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>_mkdir<sp/>(path);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="475"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="476"><highlight class="comment">Sys_FileTimeStamp</highlight></codeline>
<codeline lineno="477"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="478"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">ID_TIME_T<sp/>Sys_FileTimeStamp(<sp/>FILE<sp/>*fp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_stat<sp/>st;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>_fstat(<sp/>_fileno(<sp/>fp<sp/>),<sp/>&amp;st<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>st.st_mtime;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="486"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="487"><highlight class="comment">Sys_Cwd</highlight></codeline>
<codeline lineno="488"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="489"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_Cwd(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cwd[MAX_OSPATH];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>_getcwd(<sp/>cwd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>cwd<sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>cwd[MAX_OSPATH-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cwd;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="500"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="501"><highlight class="comment">Sys_DefaultCDPath</highlight></codeline>
<codeline lineno="502"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="503"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_DefaultCDPath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="509"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="510"><highlight class="comment">Sys_DefaultBasePath</highlight></codeline>
<codeline lineno="511"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="512"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_DefaultBasePath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sys_Cwd();</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="518"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="519"><highlight class="comment">Sys_DefaultSavePath</highlight></codeline>
<codeline lineno="520"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="521"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_DefaultSavePath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;fs_basepath&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="527"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="528"><highlight class="comment">Sys_EXEPath</highlight></codeline>
<codeline lineno="529"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="530"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_EXEPath(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>exe[<sp/>MAX_OSPATH<sp/>];</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>GetModuleFileName(<sp/>NULL,<sp/>exe,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>exe<sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exe;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="538"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="539"><highlight class="comment">Sys_ListFiles</highlight></codeline>
<codeline lineno="540"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="541"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_ListFiles(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*directory,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/><ref refid="classid_list" kindref="compound">idStrList</ref><sp/>&amp;list<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_finddata_t<sp/>findinfo;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findhandle;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!extension)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>passing<sp/>a<sp/>slash<sp/>as<sp/>extension<sp/>will<sp/>find<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>extension[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>extension[1]<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>_A_SUBDIR;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>search,<sp/></highlight><highlight class="stringliteral">&quot;%s\\*%s&quot;</highlight><highlight class="normal">,<sp/>directory,<sp/>extension<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>list.Clear();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>findhandle<sp/>=<sp/>_findfirst(<sp/>search,<sp/>&amp;findinfo<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>findhandle<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flag<sp/>^<sp/>(<sp/>findinfo.attrib<sp/>&amp;<sp/>_A_SUBDIR<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.Append(<sp/>findinfo.name<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>_findnext(<sp/>findhandle,<sp/>&amp;findinfo<sp/>)<sp/>!=<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>_findclose(<sp/>findhandle<sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list.Num();</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="583"><highlight class="comment">================</highlight></codeline>
<codeline lineno="584"><highlight class="comment">Sys_GetClipboardData</highlight></codeline>
<codeline lineno="585"><highlight class="comment">================</highlight></codeline>
<codeline lineno="586"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_GetClipboardData(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cliptext;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>OpenClipboard(<sp/>NULL<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>hClipboardData;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>hClipboardData<sp/>=<sp/>GetClipboardData(<sp/>CF_TEXT<sp/>)<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>cliptext<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)GlobalLock(<sp/>hClipboardData<sp/>)<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Mem_Alloc(<sp/>GlobalSize(<sp/>hClipboardData<sp/>)<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>data,<sp/>cliptext<sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlobalUnlock(<sp/>hClipboardData<sp/>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strtok(<sp/>data,<sp/></highlight><highlight class="stringliteral">&quot;\n\r\b&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseClipboard();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="609"><highlight class="comment">================</highlight></codeline>
<codeline lineno="610"><highlight class="comment">Sys_SetClipboardData</highlight></codeline>
<codeline lineno="611"><highlight class="comment">================</highlight></codeline>
<codeline lineno="612"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_SetClipboardData(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>HGLOBAL<sp/>HMem;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PMem;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>HMem<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)::GlobalAlloc(<sp/>GMEM_MOVEABLE<sp/>|<sp/>GMEM_DDESHARE,<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>HMem<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>allocated<sp/>memory<sp/>and<sp/>obtain<sp/>a<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>PMem<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)::GlobalLock(<sp/>HMem<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>PMem<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>text<sp/>into<sp/>allocated<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>lstrcpy(<sp/>PMem,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlock<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>::GlobalUnlock(<sp/>HMem<sp/>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>Clipboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!OpenClipboard(<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GlobalFree(<sp/>HMem<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>current<sp/>Clipboard<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>EmptyClipboard();</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supply<sp/>the<sp/>memory<sp/>handle<sp/>to<sp/>the<sp/>Clipboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>SetClipboardData(<sp/>CF_TEXT,<sp/>HMem<sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>HMem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>Clipboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseClipboard();</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="646"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="647"><highlight class="comment"></highlight></codeline>
<codeline lineno="648"><highlight class="comment">DLL<sp/>Loading</highlight></codeline>
<codeline lineno="649"><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="651"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="654"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="655"><highlight class="comment">Sys_DLL_Load</highlight></codeline>
<codeline lineno="656"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="657"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_DLL_Load(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dllName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>HINSTANCE<sp/><sp/><sp/>libHandle;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>libHandle<sp/>=<sp/>LoadLibrary(<sp/>dllName<sp/>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>libHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>can&apos;t<sp/>have<sp/>LoadLibrary<sp/>load<sp/>only<sp/>from<sp/>the<sp/>specified<sp/>path,<sp/>check<sp/>it<sp/>did<sp/>the<sp/>right<sp/>thing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>loadedPath[<sp/>MAX_OSPATH<sp/>];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetModuleFileName(<sp/>libHandle,<sp/>loadedPath,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>loadedPath<sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::IcmpPath(<sp/>dllName,<sp/>loadedPath<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Printf(<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>LoadLibrary<sp/>&apos;%s&apos;<sp/>wants<sp/>to<sp/>load<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>dllName,<sp/>loadedPath<sp/>);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_DLL_Unload(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)libHandle<sp/>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)libHandle;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="675"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="676"><highlight class="comment">Sys_DLL_GetProcAddress</highlight></codeline>
<codeline lineno="677"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="678"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Sys_DLL_GetProcAddress(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*procName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetProcAddress(<sp/>(HINSTANCE)dllHandle,<sp/>procName<sp/>);<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="684"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="685"><highlight class="comment">Sys_DLL_Unload</highlight></codeline>
<codeline lineno="686"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="687"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DLL_Unload(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dllHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!dllHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FreeLibrary(<sp/>(HINSTANCE)dllHandle<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastError<sp/>=<sp/>GetLastError();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPVOID<sp/>lpMsgBuf;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMessage(</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_ALLOCATE_BUFFER,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastError,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAKELANGID(LANG_NEUTRAL,<sp/>SUBLANG_DEFAULT),<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>language</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LPTSTR)<sp/>&amp;lpMsgBuf,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Error(<sp/></highlight><highlight class="stringliteral">&quot;Sys_DLL_Unload:<sp/>FreeLibrary<sp/>failed<sp/>-<sp/>%s<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>lpMsgBuf,<sp/>lastError<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="709"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="710"><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment">EVENT<sp/>LOOP</highlight></codeline>
<codeline lineno="712"><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment">========================================================================</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_QUED_EVENTS<sp/><sp/><sp/><sp/><sp/>256</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MASK_QUED_EVENTS<sp/><sp/><sp/><sp/>(<sp/>MAX_QUED_EVENTS<sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/>eventQue[MAX_QUED_EVENTS];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventHead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventTail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="724"><highlight class="comment">================</highlight></codeline>
<codeline lineno="725"><highlight class="comment">Sys_QueEvent</highlight></codeline>
<codeline lineno="726"><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment">Ptr<sp/>should<sp/>either<sp/>be<sp/>null,<sp/>or<sp/>point<sp/>to<sp/>a<sp/>block<sp/>of<sp/>data<sp/>that<sp/>can</highlight></codeline>
<codeline lineno="728"><highlight class="comment">be<sp/>freed<sp/>by<sp/>the<sp/>game<sp/>later.</highlight></codeline>
<codeline lineno="729"><highlight class="comment">================</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_QueEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/>sysEventType_t<sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptrLength,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/>*ev;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>ev<sp/>=<sp/>&amp;eventQue[<sp/>eventHead<sp/>&amp;<sp/>MASK_QUED_EVENTS<sp/>];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eventHead<sp/>-<sp/>eventTail<sp/>&gt;=<sp/>MAX_QUED_EVENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Sys_QueEvent:<sp/>overflow\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>discarding<sp/>an<sp/>event,<sp/>but<sp/>don&apos;t<sp/>leak<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ev-&gt;evPtr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>ev-&gt;evPtr<sp/>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventTail++;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>eventHead++;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ev-&gt;evType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ev-&gt;evValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>ev-&gt;evValue2<sp/>=<sp/>value2;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>ev-&gt;evPtrLength<sp/>=<sp/>ptrLength;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>ev-&gt;evPtr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="755"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="756"><highlight class="comment">Sys_PumpEvents</highlight></codeline>
<codeline lineno="757"><highlight class="comment"></highlight></codeline>
<codeline lineno="758"><highlight class="comment">This<sp/>allows<sp/>windows<sp/>to<sp/>be<sp/>moved<sp/>during<sp/>renderbump</highlight></codeline>
<codeline lineno="759"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="760"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_PumpEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>MSG<sp/>msg;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pump<sp/>the<sp/>message<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>PeekMessage(<sp/>&amp;msg,<sp/>NULL,<sp/>0,<sp/>0,<sp/>PM_NOREMOVE<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetMessage(<sp/>&amp;msg,<sp/>NULL,<sp/>0,<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Quit();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>msg<sp/>time,<sp/>because<sp/>wndprocs<sp/>don&apos;t<sp/>have<sp/>access<sp/>to<sp/>the<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.sysMsgTime<sp/>&amp;&amp;<sp/>win32.sysMsgTime<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)msg.time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>ever<sp/>let<sp/>the<sp/>event<sp/>times<sp/>run<sp/>backwards<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/>&quot;Sys_PumpEvents:<sp/>win32.sysMsgTime<sp/>(%i)<sp/>&gt;<sp/>msg.time<sp/>(%i)\n&quot;,<sp/>win32.sysMsgTime,<sp/>msg.time<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sysMsgTime<sp/>=<sp/>msg.time;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_ALLOW_TOOLS</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GUIEditorHandleMessage<sp/>(<sp/>&amp;msg<sp/>)<sp/>)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TranslateMessage<sp/>(&amp;msg);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DispatchMessage<sp/>(&amp;msg);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="790"><highlight class="comment">================</highlight></codeline>
<codeline lineno="791"><highlight class="comment">Sys_GenerateEvents</highlight></codeline>
<codeline lineno="792"><highlight class="comment">================</highlight></codeline>
<codeline lineno="793"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_GenerateEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entered<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>entered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pump<sp/>the<sp/>message<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_PumpEvents();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>mouse<sp/>and<sp/>joystick<sp/>are<sp/>only<sp/>called<sp/>once<sp/>a<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>IN_Frame();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>console<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>Sys_ConsoleInput();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*b;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>len;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/>s<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Mem_Alloc(<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>b,<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_QueEvent(<sp/>0,<sp/>SE_CONSOLE,<sp/>0,<sp/>0,<sp/>len,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>entered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="825"><highlight class="comment">================</highlight></codeline>
<codeline lineno="826"><highlight class="comment">Sys_ClearEvents</highlight></codeline>
<codeline lineno="827"><highlight class="comment">================</highlight></codeline>
<codeline lineno="828"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_ClearEvents(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>eventHead<sp/>=<sp/>eventTail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="834"><highlight class="comment">================</highlight></codeline>
<codeline lineno="835"><highlight class="comment">Sys_GetEvent</highlight></codeline>
<codeline lineno="836"><highlight class="comment">================</highlight></codeline>
<codeline lineno="837"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/>Sys_GetEvent(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsys_event__s" kindref="compound">sysEvent_t</ref><sp/><sp/>ev;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>if<sp/>we<sp/>have<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eventHead<sp/>&gt;<sp/>eventTail<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventTail++;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eventQue[<sp/>(<sp/>eventTail<sp/>-<sp/>1<sp/>)<sp/>&amp;<sp/>MASK_QUED_EVENTS<sp/>];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>empty<sp/>event<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;ev,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>ev<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ev;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="856"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="857"><highlight class="comment">Sys_In_Restart_f</highlight></codeline>
<codeline lineno="858"><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">Restart<sp/>the<sp/>input<sp/>subsystem</highlight></codeline>
<codeline lineno="860"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="861"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_In_Restart_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_ShutdownInput();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_InitInput();</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="869"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="870"><highlight class="comment">Sys_AsyncThread</highlight></codeline>
<codeline lineno="871"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="872"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_AsyncThread(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>wakeNumber;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>startTime;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>wakeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>trigger<sp/>60<sp/>times<sp/>a<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>WaitForSingleObject(<sp/>hTimer,<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>!=<sp/>WAIT_OBJECT_0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputDebugString(<sp/></highlight><highlight class="stringliteral">&quot;idPacketServer::PacketServerInterrupt:<sp/>bad<sp/>wait<sp/>return&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="890"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wakeNumber++;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>msec<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>deltaTime<sp/>=<sp/>msec<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>msec;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>str[1024];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;%i<sp/>&quot;</highlight><highlight class="normal">,<sp/>deltaTime<sp/>);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputDebugString(<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="899"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Async();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="906"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="907"><highlight class="comment">Sys_StartAsyncThread</highlight></codeline>
<codeline lineno="908"><highlight class="comment"></highlight></codeline>
<codeline lineno="909"><highlight class="comment">Start<sp/>the<sp/>thread<sp/>that<sp/>will<sp/>call<sp/>idCommon::Async()</highlight></codeline>
<codeline lineno="910"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="911"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_StartAsyncThread(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>auto-reset<sp/>event<sp/>that<sp/>happens<sp/>60<sp/>times<sp/>a<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>hTimer<sp/>=<sp/>CreateWaitableTimer(<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!hTimer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;idPacketServer::Spawn:<sp/>CreateWaitableTimer<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>LARGE_INTEGER<sp/><sp/><sp/>t;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>t.HighPart<sp/>=<sp/>t.LowPart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>SetWaitableTimer(<sp/>hTimer,<sp/>&amp;t,<sp/>USERCMD_MSEC,<sp/>NULL,<sp/>NULL,<sp/>TRUE<sp/>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_CreateThread(<sp/>(xthread_t)Sys_AsyncThread,<sp/>NULL,<sp/>THREAD_ABOVE_NORMAL,<sp/>threadInfo,<sp/></highlight><highlight class="stringliteral">&quot;Async&quot;</highlight><highlight class="normal">,<sp/>g_threads,<sp/><sp/>&amp;g_thread_count<sp/>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SET_THREAD_AFFINITY<sp/></highlight></codeline>
<codeline lineno="926"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>the<sp/>async<sp/>thread<sp/>an<sp/>affinity<sp/>for<sp/>the<sp/>second<sp/>cpu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadAffinityMask(<sp/>(HANDLE)threadInfo.threadHandle,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!threadInfo.threadHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;Sys_StartAsyncThread:<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="936"><highlight class="comment">================</highlight></codeline>
<codeline lineno="937"><highlight class="comment">Sys_AlreadyRunning</highlight></codeline>
<codeline lineno="938"><highlight class="comment"></highlight></codeline>
<codeline lineno="939"><highlight class="comment">returns<sp/>true<sp/>if<sp/>there<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>D3<sp/>running<sp/>already</highlight></codeline>
<codeline lineno="940"><highlight class="comment">================</highlight></codeline>
<codeline lineno="941"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Sys_AlreadyRunning(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEBUG</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!win32.win_allowMultipleInstances.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>hMutexOneInstance<sp/>=<sp/>::CreateMutex(<sp/>NULL,<sp/>FALSE,<sp/></highlight><highlight class="stringliteral">&quot;DOOM3&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>::GetLastError()<sp/>==<sp/>ERROR_ALREADY_EXISTS<sp/>||<sp/>::GetLastError()<sp/>==<sp/>ERROR_ACCESS_DENIED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="951"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="955"><highlight class="comment">================</highlight></codeline>
<codeline lineno="956"><highlight class="comment">Sys_Init</highlight></codeline>
<codeline lineno="957"><highlight class="comment"></highlight></codeline>
<codeline lineno="958"><highlight class="comment">The<sp/>cvar<sp/>system<sp/>must<sp/>already<sp/>be<sp/>setup</highlight></codeline>
<codeline lineno="959"><highlight class="comment">================</highlight></codeline>
<codeline lineno="960"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OSR2_BUILD_NUMBER<sp/>1111</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WIN98_BUILD_NUMBER<sp/>1998</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>CoInitialize(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>timer<sp/>is<sp/>high<sp/>precision,<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NT<sp/>gets<sp/>18ms<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>timeBeginPeriod(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>WM_TIMER<sp/>messages<sp/>pumped<sp/>every<sp/>millisecond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>SetTimer(<sp/>NULL,<sp/>0,<sp/>100,<sp/>NULL<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;in_restart&quot;</highlight><highlight class="normal">,<sp/>Sys_In_Restart_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;restarts<sp/>the<sp/>input<sp/>system&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;createResourceIDs&quot;</highlight><highlight class="normal">,<sp/>CreateResourceIDs_f,<sp/>CMD_FL_TOOL,<sp/></highlight><highlight class="stringliteral">&quot;assigns<sp/>resource<sp/>IDs<sp/>in<sp/>_resouce.h<sp/>files&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;setAsyncSound&quot;</highlight><highlight class="normal">,<sp/>Sys_SetAsyncSound_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>the<sp/>async<sp/>sound<sp/>option&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>user<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>win32.win_username.SetString(<sp/>Sys_GetCurrentUser()<sp/>);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>win32.osversion.dwOSVersionInfoSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>win32.osversion<sp/>);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetVersionEx(<sp/>(LPOSVERSIONINFO)&amp;win32.osversion<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Error(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>OS<sp/>info&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.osversion.dwMajorVersion<sp/>&lt;<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Error(<sp/>GAME_NAME<sp/></highlight><highlight class="stringliteral">&quot;<sp/>requires<sp/>Windows<sp/>version<sp/>4<sp/>(NT)<sp/>or<sp/>greater&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.osversion.dwPlatformId<sp/>==<sp/>VER_PLATFORM_WIN32s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Error(<sp/>GAME_NAME<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>run<sp/>on<sp/>Win32s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwPlatformId<sp/>==<sp/>VER_PLATFORM_WIN32_NT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>&lt;=<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;WinNT<sp/>(NT)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>win32.osversion.dwMinorVersion<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Win2K<sp/>(NT)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>win32.osversion.dwMinorVersion<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;WinXP<sp/>(NT)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Vista&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>NT<sp/>variant&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwPlatformId<sp/>==<sp/>VER_PLATFORM_WIN32_WINDOWS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>win32.osversion.dwMinorVersion<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Win95</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.szCSDVersion[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Win95<sp/>OSR2<sp/>(95)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Win95<sp/>(95)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>win32.osversion.dwMinorVersion<sp/>==<sp/>10<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Win98</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.szCSDVersion[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Win98SE<sp/>(95)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Win98<sp/>(95)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>win32.osversion.dwMajorVersion<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>win32.osversion.dwMinorVersion<sp/>==<sp/>90<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WinMe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;WinMe<sp/>(95)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>95<sp/>variant&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_arch.SetString(<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>Windows<sp/>variant&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CPU<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Icmp(<sp/>win32.sys_cpustring.GetString(),<sp/></highlight><highlight class="stringliteral">&quot;detect&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>string;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%1.0f<sp/>MHz<sp/>&quot;</highlight><highlight class="normal">,<sp/>Sys_ClockTicksPerSecond()<sp/>/<sp/>1000000.0f<sp/>);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.cpuid<sp/>=<sp/>Sys_GetCPUId();</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Clear();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_AMD<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;AMD<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_INTEL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Intel<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_UNSUPPORTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;generic<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_MMX<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;MMX<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_3DNOW<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;3DNow!<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_SSE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;SSE<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_SSE2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;SSE2<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_SSE3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;SSE3<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.cpuid<sp/>&amp;<sp/>CPUID_HTT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;HTT<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.StripTrailing(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.StripTrailing(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.sys_cpustring.SetString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;forcing<sp/>CPU<sp/>type<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_lexer" kindref="compound">idLexer</ref><sp/>src(<sp/>win32.sys_cpustring.GetString(),<sp/>idStr::Length(<sp/>win32.sys_cpustring.GetString()<sp/>),<sp/></highlight><highlight class="stringliteral">&quot;sys_cpustring&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_token" kindref="compound">idToken</ref><sp/>token;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>CPUID_NONE;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>src.ReadToken(<sp/>&amp;token<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;generic&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_GENERIC;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;intel&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_INTEL;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;amd&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_AMD;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;mmx&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_MMX;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;3dnow&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_3DNOW;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;sse&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_SSE;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;sse2&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_SSE2;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;sse3&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_SSE3;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;htt&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|=<sp/>CPUID_HTT;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>CPUID_NONE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>unknown<sp/>sys_cpustring<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>win32.sys_cpustring.GetString()<sp/>);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>CPUID_GENERIC;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.cpuid<sp/>=<sp/>(cpuid_t)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>win32.sys_cpustring.GetString()<sp/>);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>MB<sp/>System<sp/>Memory\n&quot;</highlight><highlight class="normal">,<sp/>Sys_GetSystemRam()<sp/>);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>MB<sp/>Video<sp/>Memory\n&quot;</highlight><highlight class="normal">,<sp/>Sys_GetVideoRam()<sp/>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">Sys_Shutdown</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>CoUninitialize();</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1133"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1134"><highlight class="comment">Sys_GetProcessorId</highlight></codeline>
<codeline lineno="1135"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal">cpuid_t<sp/>Sys_GetProcessorId(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>win32.cpuid;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1142"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1143"><highlight class="comment">Sys_GetProcessorString</highlight></codeline>
<codeline lineno="1144"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1145"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sys_GetProcessorString(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>win32.sys_cpustring.GetString();</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//=======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>SET_THREAD_AFFINITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1157"><highlight class="comment">Win_Frame</highlight></codeline>
<codeline lineno="1158"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1159"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Win_Frame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>&quot;viewlog&quot;<sp/>has<sp/>been<sp/>modified,<sp/>show<sp/>or<sp/>hide<sp/>the<sp/>log<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.win_viewlog.IsModified()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!com_skipRenderer.GetBool()<sp/>&amp;&amp;<sp/>idAsyncNetwork::serverDedicated.GetInteger()<sp/>!=<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/>win32.win_viewlog.GetInteger(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32.win_viewlog.ClearModified();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_chkstk(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>);<sp/>};</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clrstk(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1174"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">TestChkStk</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestChkStk(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>buffer[0x1000];</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1185"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1186"><highlight class="comment">HackChkStk</highlight></codeline>
<codeline lineno="1187"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HackChkStk(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/><sp/><sp/>old;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>VirtualProtect(<sp/>_chkstk,<sp/>6,<sp/>PAGE_EXECUTE_READWRITE,<sp/>&amp;old<sp/>);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>*(byte<sp/>*)_chkstk<sp/>=<sp/>0xe9;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)_chkstk+1)<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)clrstk<sp/>-<sp/>(int)_chkstk<sp/>-<sp/>5;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>TestChkStk();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1199"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1200"><highlight class="comment">GetExceptionCodeInfo</highlight></codeline>
<codeline lineno="1201"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*GetExceptionCodeInfo(<sp/>UINT<sp/>code<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>code<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_ACCESS_VIOLATION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>read<sp/>from<sp/>or<sp/>write<sp/>to<sp/>a<sp/>virtual<sp/>address<sp/>for<sp/>which<sp/>it<sp/>does<sp/>not<sp/>have<sp/>the<sp/>appropriate<sp/>access.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_ARRAY_BOUNDS_EXCEEDED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>access<sp/>an<sp/>array<sp/>element<sp/>that<sp/>is<sp/>out<sp/>of<sp/>bounds<sp/>and<sp/>the<sp/>underlying<sp/>hardware<sp/>supports<sp/>bounds<sp/>checking.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_BREAKPOINT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>breakpoint<sp/>was<sp/>encountered.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_DATATYPE_MISALIGNMENT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>read<sp/>or<sp/>write<sp/>data<sp/>that<sp/>is<sp/>misaligned<sp/>on<sp/>hardware<sp/>that<sp/>does<sp/>not<sp/>provide<sp/>alignment.<sp/>For<sp/>example,<sp/>16-bit<sp/>values<sp/>must<sp/>be<sp/>aligned<sp/>on<sp/>2-byte<sp/>boundaries;<sp/>32-bit<sp/>values<sp/>on<sp/>4-byte<sp/>boundaries,<sp/>and<sp/>so<sp/>on.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_DENORMAL_OPERAND:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;One<sp/>of<sp/>the<sp/>operands<sp/>in<sp/>a<sp/>floating-point<sp/>operation<sp/>is<sp/>denormal.<sp/>A<sp/>denormal<sp/>value<sp/>is<sp/>one<sp/>that<sp/>is<sp/>too<sp/>small<sp/>to<sp/>represent<sp/>as<sp/>a<sp/>standard<sp/>floating-point<sp/>value.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_DIVIDE_BY_ZERO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>divide<sp/>a<sp/>floating-point<sp/>value<sp/>by<sp/>a<sp/>floating-point<sp/>divisor<sp/>of<sp/>zero.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_INEXACT_RESULT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>result<sp/>of<sp/>a<sp/>floating-point<sp/>operation<sp/>cannot<sp/>be<sp/>represented<sp/>exactly<sp/>as<sp/>a<sp/>decimal<sp/>fraction.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_INVALID_OPERATION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>exception<sp/>represents<sp/>any<sp/>floating-point<sp/>exception<sp/>not<sp/>included<sp/>in<sp/>this<sp/>list.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_OVERFLOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>exponent<sp/>of<sp/>a<sp/>floating-point<sp/>operation<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>magnitude<sp/>allowed<sp/>by<sp/>the<sp/>corresponding<sp/>type.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_STACK_CHECK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>stack<sp/>overflowed<sp/>or<sp/>underflowed<sp/>as<sp/>the<sp/>result<sp/>of<sp/>a<sp/>floating-point<sp/>operation.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_FLT_UNDERFLOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>exponent<sp/>of<sp/>a<sp/>floating-point<sp/>operation<sp/>is<sp/>less<sp/>than<sp/>the<sp/>magnitude<sp/>allowed<sp/>by<sp/>the<sp/>corresponding<sp/>type.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_ILLEGAL_INSTRUCTION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>execute<sp/>an<sp/>invalid<sp/>instruction.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_IN_PAGE_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>access<sp/>a<sp/>page<sp/>that<sp/>was<sp/>not<sp/>present,<sp/>and<sp/>the<sp/>system<sp/>was<sp/>unable<sp/>to<sp/>load<sp/>the<sp/>page.<sp/>For<sp/>example,<sp/>this<sp/>exception<sp/>might<sp/>occur<sp/>if<sp/>a<sp/>network<sp/>connection<sp/>is<sp/>lost<sp/>while<sp/>running<sp/>a<sp/>program<sp/>over<sp/>the<sp/>network.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_INT_DIVIDE_BY_ZERO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>divide<sp/>an<sp/>integer<sp/>value<sp/>by<sp/>an<sp/>integer<sp/>divisor<sp/>of<sp/>zero.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_INT_OVERFLOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>result<sp/>of<sp/>an<sp/>integer<sp/>operation<sp/>caused<sp/>a<sp/>carry<sp/>out<sp/>of<sp/>the<sp/>most<sp/>significant<sp/>bit<sp/>of<sp/>the<sp/>result.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_INVALID_DISPOSITION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>exception<sp/>handler<sp/>returned<sp/>an<sp/>invalid<sp/>disposition<sp/>to<sp/>the<sp/>exception<sp/>dispatcher.<sp/>Programmers<sp/>using<sp/>a<sp/>high-level<sp/>language<sp/>such<sp/>as<sp/>C<sp/>should<sp/>never<sp/>encounter<sp/>this<sp/>exception.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_NONCONTINUABLE_EXCEPTION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>continue<sp/>execution<sp/>after<sp/>a<sp/>noncontinuable<sp/>exception<sp/>occurred.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_PRIV_INSTRUCTION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>tried<sp/>to<sp/>execute<sp/>an<sp/>instruction<sp/>whose<sp/>operation<sp/>is<sp/>not<sp/>allowed<sp/>in<sp/>the<sp/>current<sp/>machine<sp/>mode.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_SINGLE_STEP:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;A<sp/>trace<sp/>trap<sp/>or<sp/>other<sp/>single-instruction<sp/>mechanism<sp/>signaled<sp/>that<sp/>one<sp/>instruction<sp/>has<sp/>been<sp/>executed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EXCEPTION_STACK_OVERFLOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>thread<sp/>used<sp/>up<sp/>its<sp/>stack.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1230"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1231"><highlight class="comment">EmailCrashReport</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/>emailer<sp/>originally<sp/>from<sp/>Raven/Quake<sp/>4</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EmailCrashReport(<sp/>LPSTR<sp/>messageText<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>LPMAPISENDMAIL<sp/><sp/>MAPISendMail;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>MapiMessage<sp/><sp/><sp/><sp/><sp/>message;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastEmailTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_Milliseconds()<sp/>&lt;<sp/>lastEmailTime<sp/>+<sp/>10000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>lastEmailTime<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>HINSTANCE<sp/>mapi<sp/>=<sp/>LoadLibrary(<sp/></highlight><highlight class="stringliteral">&quot;MAPI32.DLL&quot;</highlight><highlight class="normal"><sp/>);<sp/></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapi<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAPISendMail<sp/>=<sp/>(<sp/>LPMAPISENDMAIL<sp/>)GetProcAddress(<sp/>mapi,<sp/></highlight><highlight class="stringliteral">&quot;MAPISendMail&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>MAPISendMail<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapiRecipDesc<sp/>toProgrammers<sp/>=</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ulReserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAPI_TO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ulRecipClass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DOOM<sp/>3<sp/>Crash&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpszName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SMTP:programmers@idsoftware.com&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>lpszAddress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ulEIDSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpEntry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>&amp;message,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>message<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.lpszSubject<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DOOM<sp/>3<sp/>Fatal<sp/>Error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.lpszNoteText<sp/>=<sp/>messageText;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.nRecipCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.lpRecips<sp/>=<sp/>&amp;toProgrammers;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAPISendMail(</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LHANDLE<sp/>lhSession</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ULONG<sp/>ulUIParam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;message,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpMapiMessage<sp/>lpMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAPI_DIALOG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FLAGS<sp/>flFlags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ULONG<sp/>ulReserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeLibrary(<sp/>mapi<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Sys_FPU_PrintStateFlags(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ctrl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inof,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inse,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opof,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opse<sp/>);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1283"><highlight class="comment">_except_handler</highlight></codeline>
<codeline lineno="1284"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1285"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal">EXCEPTION_DISPOSITION<sp/>__cdecl<sp/>_except_handler(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_EXCEPTION_RECORD<sp/>*ExceptionRecord,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>EstablisherFrame,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_CONTEXT<sp/>*ContextRecord,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>DispatcherContext<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[<sp/>8192<sp/>];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>FPUFlags[2048];</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_FPU_PrintStateFlags(<sp/>FPUFlags,<sp/>ContextRecord-&gt;FloatSave.ControlWord,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.StatusWord,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.TagWord,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.ErrorOffset,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.ErrorSelector,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.DataOffset,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;FloatSave.DataSelector<sp/>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>msg,<sp/></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>describe<sp/>what<sp/>you<sp/>were<sp/>doing<sp/>when<sp/>DOOM<sp/>3<sp/>crashed!\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;If<sp/>this<sp/>text<sp/>did<sp/>not<sp/>pop<sp/>into<sp/>your<sp/>email<sp/>client<sp/>please<sp/>copy<sp/>and<sp/>email<sp/>it<sp/>to<sp/>programmers@idsoftware.com\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-=<sp/>FATAL<sp/>EXCEPTION<sp/>=-\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0x%x<sp/>at<sp/>address<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EAX<sp/>=<sp/>0x%08x<sp/>EBX<sp/>=<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ECX<sp/>=<sp/>0x%08x<sp/>EDX<sp/>=<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ESI<sp/>=<sp/>0x%08x<sp/>EDI<sp/>=<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EIP<sp/>=<sp/>0x%08x<sp/>ESP<sp/>=<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EBP<sp/>=<sp/>0x%08x<sp/>EFL<sp/>=<sp/>0x%08x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CS<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SS<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DS<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ES<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FS<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GS<sp/>=<sp/>0x%04x\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_version.GetString(),</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionRecord-&gt;ExceptionCode,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionRecord-&gt;ExceptionAddress,</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetExceptionCodeInfo(<sp/>ExceptionRecord-&gt;ExceptionCode<sp/>),</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;Eax,<sp/>ContextRecord-&gt;Ebx,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;Ecx,<sp/>ContextRecord-&gt;Edx,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;Esi,<sp/>ContextRecord-&gt;Edi,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;Eip,<sp/>ContextRecord-&gt;Esp,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;Ebp,<sp/>ContextRecord-&gt;EFlags,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegCs,</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegSs,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegDs,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegEs,</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegFs,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContextRecord-&gt;SegGs,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPUFlags</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>EmailCrashReport(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>OS<sp/>to<sp/>restart<sp/>the<sp/>faulting<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExceptionContinueExecution;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_FPU_EXCEPTIONS<sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_INVALID_OPERATION<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_DENORMALIZED_OPERAND<sp/>|<sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_DIVIDE_BY_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_NUMERIC_OVERFLOW<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_NUMERIC_UNDERFLOW<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>FPU_EXCEPTION_INEXACT_RESULT<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="1358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="1359"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1361"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1362"><highlight class="comment">WinMain</highlight></codeline>
<codeline lineno="1363"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1364"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WINAPI<sp/>WinMain(<sp/>HINSTANCE<sp/>hInstance,<sp/>HINSTANCE<sp/>hPrevInstance,<sp/>LPSTR<sp/>lpCmdLine,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCmdShow<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HCURSOR<sp/>hcurSave<sp/>=<sp/>::SetCursor(<sp/>LoadCursor(<sp/>0,<sp/>IDC_WAIT<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_SetPhysicalWorkMemory(<sp/>192<sp/>&lt;&lt;<sp/>20,<sp/>1024<sp/>&lt;&lt;<sp/>20<sp/>);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_GetCurrentMemoryStatus(<sp/>exeLaunchMemoryStats<sp/>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="1374"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>handler<sp/>=<sp/>(DWORD)_except_handler;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>EXCEPTION_REGISTRATION<sp/>record:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><sp/><sp/><sp/>handler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Address<sp/>of<sp/>handler<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><sp/><sp/><sp/>FS:[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Address<sp/>of<sp/>previous<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>FS:[0],ESP<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Install<sp/>new<sp/>EXECEPTION_REGISTRATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1382"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>win32.hInstance<sp/>=<sp/>hInstance;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::Copynz(<sp/>sys_cmdline,<sp/>lpCmdLine,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>sys_cmdline<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>before<sp/>Com/Sys_Init<sp/>since<sp/>we<sp/>need<sp/>this<sp/>for<sp/>error<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_CreateConsole();</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>abort/retry/fail<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>SetErrorMode(<sp/>SEM_FAILCRITICALERRORS<sp/>);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CRITICAL_SECTIONS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitializeCriticalSection(<sp/>&amp;win32.criticalSections[i]<sp/>);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>initial<sp/>time<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>the<sp/>painfully<sp/>slow<sp/>MS<sp/>heap<sp/>check<sp/>every<sp/>1024<sp/>allocs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>_CrtSetDbgFlag(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1403"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Sys_FPU_EnableExceptions(<sp/>TEST_FPU_EXCEPTIONS<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_FPU_SetPrecision(<sp/>FPU_PRECISION_DOUBLE_EXTENDED<sp/>);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Init(<sp/>0,<sp/>NULL,<sp/>lpCmdLine<sp/>);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEST_FPU_EXCEPTIONS<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1410"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/>Sys_FPU_GetState()<sp/>);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1412"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ID_DEDICATED</highlight></codeline>
<codeline lineno="1414"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.win_notaskkeys.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DisableTaskKeys(<sp/>TRUE,<sp/>FALSE,<sp/></highlight><highlight class="comment">/*(<sp/>win32.win_notaskkeys.GetInteger()<sp/>==<sp/>2<sp/>)*/</highlight><highlight class="normal"><sp/>FALSE<sp/>);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1418"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_StartAsyncThread();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>or<sp/>show<sp/>the<sp/>early<sp/>console<sp/>as<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>win32.win_viewlog.GetInteger()<sp/>||<sp/>com_skipRenderer.GetBool()<sp/>||<sp/>idAsyncNetwork::serverDedicated.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SET_THREAD_AFFINITY<sp/></highlight></codeline>
<codeline lineno="1429"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>the<sp/>main<sp/>thread<sp/>an<sp/>affinity<sp/>for<sp/>the<sp/>first<sp/>cpu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadAffinityMask(<sp/>GetCurrentThread(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>::SetCursor(<sp/>hcurSave<sp/>);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch<sp/>the<sp/>script<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strstr(<sp/>lpCmdLine,<sp/></highlight><highlight class="stringliteral">&quot;+debugger&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DebuggerClientInit(<sp/>lpCmdLine<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>::SetFocus(<sp/>win32.hWnd<sp/>);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>game<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Win_Frame();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_MemFrame();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>exceptions,<sp/>even<sp/>if<sp/>some<sp/>crappy<sp/>syscall<sp/>changes<sp/>them!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_FPU_EnableExceptions(<sp/>TEST_FPU_EXCEPTIONS<sp/>);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_ALLOW_TOOLS</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_GUI<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GUI<sp/>editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GUIEditorRun();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_RADIANT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Level<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiantRun();</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(com_editors<sp/>&amp;<sp/>EDITOR_MATERIAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BSM<sp/>Nerve:<sp/>Add<sp/>support<sp/>for<sp/>the<sp/>material<sp/>editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaterialEditorRun();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_LIGHT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Light<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LightEditorRun();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_SOUND<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Sound<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SoundEditorRun();</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_DECL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Declaration<sp/>Browser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeclBrowserRun();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_AF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Articulated<sp/>Figure<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AFEditorRun();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_PARTICLE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Particle<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParticleEditorRun();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_SCRIPT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>Script<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptEditorRun();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_editors<sp/>&amp;<sp/>EDITOR_PDA<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in-game<sp/>PDA<sp/>Editor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDAEditorRun();</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1500"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Frame();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>gets<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1509"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1510"><highlight class="comment">clrstk</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"></highlight></codeline>
<codeline lineno="1512"><highlight class="comment">I<sp/>tried<sp/>to<sp/>get<sp/>the<sp/>run<sp/>time<sp/>to<sp/>call<sp/>this<sp/>at<sp/>every<sp/>function<sp/>entry,<sp/>but</highlight></codeline>
<codeline lineno="1513"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1514"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>parmBytes;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">__declspec(<sp/>naked<sp/>)<sp/>void<sp/>clrstk(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eax<sp/>=<sp/>bytes<sp/>to<sp/>add<sp/>to<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>[parmBytes],eax</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg<sp/><sp/><sp/><sp/><sp/>eax<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>compute<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>stack<sp/>pointer<sp/>in<sp/>eax</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/><sp/><sp/><sp/><sp/>eax,esp</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/><sp/><sp/><sp/><sp/>eax,4</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xchg<sp/><sp/><sp/><sp/>eax,esp</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>eax,dword<sp/>ptr<sp/>[eax]<sp/><sp/><sp/><sp/><sp/>;<sp/>copy<sp/>the<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>address</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><sp/><sp/><sp/>eax</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>clear<sp/>to<sp/>zero</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><sp/><sp/><sp/>edi</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><sp/><sp/><sp/>ecx</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>edi,esp</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add<sp/><sp/><sp/><sp/><sp/>edi,12</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/>ecx,[parmBytes]</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shr<sp/><sp/><sp/><sp/><sp/>ecx,2</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xor<sp/><sp/><sp/><sp/><sp/>eax,eax</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cld</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep<sp/>stosd</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/><sp/><sp/><sp/><sp/>ecx</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/><sp/><sp/><sp/><sp/>edi</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1545"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1546"><highlight class="comment">idSysLocal::OpenURL</highlight></codeline>
<codeline lineno="1547"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1548"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSysLocal::OpenURL(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doexit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doexit_spamguard<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>HWND<sp/>wnd;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doexit_spamguard)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;OpenURL:<sp/>already<sp/>in<sp/>an<sp/>exit<sp/>sequence,<sp/>ignoring<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Open<sp/>URL:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>url);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ShellExecute(<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">,<sp/>url,<sp/>NULL,<sp/>NULL,<sp/>SW_RESTORE<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>url:<sp/>&apos;%s&apos;<sp/>&quot;</highlight><highlight class="normal">,<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>wnd<sp/>=<sp/>GetForegroundWindow();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>wnd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShowWindow(<sp/>wnd,<sp/>SW_MAXIMIZE<sp/>);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>doexit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doexit_spamguard<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;quit\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1577"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1578"><highlight class="comment">idSysLocal::StartProcess</highlight></codeline>
<codeline lineno="1579"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1580"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idSysLocal::StartProcess(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exePath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doexit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>TCHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szPathOrig[_MAX_PATH];</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>STARTUPINFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>PROCESS_INFORMATION<sp/>pi;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>ZeroMemory(<sp/>&amp;si,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(si)<sp/>);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>si.cb<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(si);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(<sp/>szPathOrig,<sp/>exePath,<sp/>_MAX_PATH<sp/>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!CreateProcess(<sp/>NULL,<sp/>szPathOrig,<sp/>NULL,<sp/>NULL,<sp/>FALSE,<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>&amp;si,<sp/>&amp;pi<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>start<sp/>process:<sp/>&apos;%s&apos;<sp/>&quot;</highlight><highlight class="normal">,<sp/>szPathOrig<sp/>);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>doexit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;quit\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1602"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1603"><highlight class="comment">Sys_SetFatalError</highlight></codeline>
<codeline lineno="1604"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1605"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_SetFatalError(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1610"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1611"><highlight class="comment">Sys_DoPreferences</highlight></codeline>
<codeline lineno="1612"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1613"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sys_DoPreferences(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sys/win32/win_main.cpp"/>
  </compounddef>
</doxygen>
